{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"About Webhook.site \u00b6 With Webhook.site , you instantly get a unique, random URL and e-mail address. Everything that's sent to these addresses are shown instantly. With this, you can test and debug Webhooks and HTTP requests, as well as create your own workflows using the Custom Actions graphical editor or WebhookScript , a simple scripting language, to transform, validate and process HTTP requests in a variety of ways \u2013 without setting up and maintaining your own infrastructure. What are people using it for? Receive Webhooks without needing an internet-facing Web server Use Webhook.site as an intermediary, proxying requests and being able to see what was sent in the past Send Webhooks to a server that's behind a firewall or private subnet Transforming Webhooks into other formats, and re-sending them to different systems Connect different APIs that aren't compatible Building contact forms that send emails Instantly build APIs without needing infrastructure Company information \u00b6 Webhook.site is operated by Webhook ApS (VAT ID: DK41561718.) Address: M.P. Bruuns Gade 52-4, 8000 Aarhus, Denmark. Founded and built by Simon Fredsted ( @fredsted ). Contact information . Acknowledgements \u00b6 The app was built with Laravel for the API. Angular.js is used for the frontend SPA. WebhookScript is based on Primi Copyright (c) P\u0159emysl Karbula. The WebhookScript editor is using the Ace editor plugin. JSONPath extraction provided by FlowCommunications . This documentation site uses MkDocs with the Material theme.","title":"About"},{"location":"index.html#about-webhooksite","text":"With Webhook.site , you instantly get a unique, random URL and e-mail address. Everything that's sent to these addresses are shown instantly. With this, you can test and debug Webhooks and HTTP requests, as well as create your own workflows using the Custom Actions graphical editor or WebhookScript , a simple scripting language, to transform, validate and process HTTP requests in a variety of ways \u2013 without setting up and maintaining your own infrastructure. What are people using it for? Receive Webhooks without needing an internet-facing Web server Use Webhook.site as an intermediary, proxying requests and being able to see what was sent in the past Send Webhooks to a server that's behind a firewall or private subnet Transforming Webhooks into other formats, and re-sending them to different systems Connect different APIs that aren't compatible Building contact forms that send emails Instantly build APIs without needing infrastructure","title":"About Webhook.site"},{"location":"index.html#company-information","text":"Webhook.site is operated by Webhook ApS (VAT ID: DK41561718.) Address: M.P. Bruuns Gade 52-4, 8000 Aarhus, Denmark. Founded and built by Simon Fredsted ( @fredsted ). Contact information .","title":"Company information"},{"location":"index.html#acknowledgements","text":"The app was built with Laravel for the API. Angular.js is used for the frontend SPA. WebhookScript is based on Primi Copyright (c) P\u0159emysl Karbula. The WebhookScript editor is using the Ace editor plugin. JSONPath extraction provided by FlowCommunications . This documentation site uses MkDocs with the Material theme.","title":"Acknowledgements"},{"location":"cli.html","text":"Webhook.site CLI \u00b6 The Webhook.site Command Line Interface allows you to interact with your Webhook.site URLs using a terminal on your computer or a server, or programmatically in scripts. The CLI is still in its infancy, and currently it's main functionality is to redirect traffic from your Webhook.site URL to the machine where the CLI is being run. You then specify a URL for where the requests should be sent, allowing you to redirect traffic to machines that are not able receive connections directly from the Internet. For development information, please see the Github Page . Installation \u00b6 Docker \u00b6 If you have installed Docker, you can simply run Webhook.site CLI via docker run , like this: docker run webhooksite/cli -- index.js help Node.js \u00b6 Node version 14 or greater required. To install: npm install -g @webhooksite/cli Then, whcli help Usage \u00b6 help : List commands \u00b6 Lists commands available to the CLI. forward : Forward requests \u00b6 The forward command listens for new incoming requests sent to your Webhook.site URL and immediately relays them to any URL you specify, or simply localhost (so it can be used as an ngrok alternative). This URL can be any URL that the machine running Webhook.site CLI can access. The request method, headers and any additional path or query string parameters added to the Webhook.site URL is forwarded on to the target. For example, if the target URL is https://example.com , sending a POST request to https://webhook.site/c33f3c3e-6018-4634-b406-65338edee460/example?query=value , the target URL will also receive a POST request on https://example.com/example?query=value . The token ID ( --token ) parameter must specify the token ID. The token ID is the long 36-character ID at the end of your Webhook.site URL. An API key ( --api-key ) must also be specified, and can be generated from the Webhook.site Control Panel . Finally, the target ( --target ) specifies where traffic should be redirected. Accessing localhost/127.0.0.1 when using Docker \u00b6 Note that per default, the host machine running the Docker command won't be available as localhost or 127.0.0.1 inside the Docker container, as the container has its own network space. This will cause errors like FetchError: request to http://127.0.0.1:8080/ failed, reason: connect ECONNREFUSED 127.0.0.1:8080 . If you wish to forward requests to the host machine, you either use host-mode networking (with the --network=host option to the docker run command), or use your host machine's LAN IP (usually in the ranges 10.x.x.x, 192.168.x.x or 172.16.x.x.) For more information, please see this Stackoverflow thread . Example \u00b6 whcli forward \\ --token = 1e25c1cb-e4d4-4399-a267-cd2cf1a6c864 \\ --api-key = ef6ef2f8-3e48-4f77-a54c-3891dc11c05c \\ --target = https://example.com","title":"CLI"},{"location":"cli.html#webhooksite-cli","text":"The Webhook.site Command Line Interface allows you to interact with your Webhook.site URLs using a terminal on your computer or a server, or programmatically in scripts. The CLI is still in its infancy, and currently it's main functionality is to redirect traffic from your Webhook.site URL to the machine where the CLI is being run. You then specify a URL for where the requests should be sent, allowing you to redirect traffic to machines that are not able receive connections directly from the Internet. For development information, please see the Github Page .","title":"Webhook.site CLI"},{"location":"cli.html#installation","text":"","title":"Installation"},{"location":"cli.html#docker","text":"If you have installed Docker, you can simply run Webhook.site CLI via docker run , like this: docker run webhooksite/cli -- index.js help","title":"Docker"},{"location":"cli.html#nodejs","text":"Node version 14 or greater required. To install: npm install -g @webhooksite/cli Then, whcli help","title":"Node.js"},{"location":"cli.html#usage","text":"","title":"Usage"},{"location":"cli.html#help-list-commands","text":"Lists commands available to the CLI.","title":"help: List commands"},{"location":"cli.html#forward-forward-requests","text":"The forward command listens for new incoming requests sent to your Webhook.site URL and immediately relays them to any URL you specify, or simply localhost (so it can be used as an ngrok alternative). This URL can be any URL that the machine running Webhook.site CLI can access. The request method, headers and any additional path or query string parameters added to the Webhook.site URL is forwarded on to the target. For example, if the target URL is https://example.com , sending a POST request to https://webhook.site/c33f3c3e-6018-4634-b406-65338edee460/example?query=value , the target URL will also receive a POST request on https://example.com/example?query=value . The token ID ( --token ) parameter must specify the token ID. The token ID is the long 36-character ID at the end of your Webhook.site URL. An API key ( --api-key ) must also be specified, and can be generated from the Webhook.site Control Panel . Finally, the target ( --target ) specifies where traffic should be redirected.","title":"forward: Forward requests"},{"location":"cli.html#accessing-localhost127001-when-using-docker","text":"Note that per default, the host machine running the Docker command won't be available as localhost or 127.0.0.1 inside the Docker container, as the container has its own network space. This will cause errors like FetchError: request to http://127.0.0.1:8080/ failed, reason: connect ECONNREFUSED 127.0.0.1:8080 . If you wish to forward requests to the host machine, you either use host-mode networking (with the --network=host option to the docker run command), or use your host machine's LAN IP (usually in the ranges 10.x.x.x, 192.168.x.x or 172.16.x.x.) For more information, please see this Stackoverflow thread .","title":"Accessing localhost/127.0.0.1 when using Docker"},{"location":"cli.html#example","text":"whcli forward \\ --token = 1e25c1cb-e4d4-4399-a267-cd2cf1a6c864 \\ --api-key = ef6ef2f8-3e48-4f77-a54c-3891dc11c05c \\ --target = https://example.com","title":"Example"},{"location":"custom-actions.html","text":"Custom Actions \u00b6 With Custom Actions, it is possible to create a workflow out of a set of actions that are executed whenever a Webhook.site URL receives a request or email. Using this functionality, you can connect APIs that aren't compatible, convert a HTTP request to an email or vice versa, build workflows that would otherwise require a developer, and much, much more. Demo \u00b6 In the following demo, webshop order details are received in a webhook. We then use Extract JSONPath and Google Sheets actions to insert their name in a Google Sheet. It also shows how variables interact with downstream actions. Repeating Actions \u00b6 Webhook.site allows some action types to be repeating, which makes Webhook.site \"loop over\" one or more values without needing to use scripts. Currently, repetition is only supported by the Extract JSONPath and Extract Regex action types. Currently, the maximum amount of items that are supported is 100 to prevent abuse. This limit may be raised in the future. Items above that are ignored. The repeating action should be ordered before the actions that are to be repeated. The actions that are repeated will run for each item that is extracted, using the same variable name. Queued Actions \u00b6 By checking the Queued checkbox when creating a Custom Action, Webhook.site will run that specific action in a background queue (asynchronously). This is useful when you need your Webhook.site URL to respond quickly, but your Custom Actions are taking a long time to run. For example, if your Webhook.site URL should respond in 5 seconds, but you need to call an endpoint with a Send Request action that responds in 10 seconds, you can queue the Send Request action. Additionally, you can specify an amount of seconds to wait until the action is executed. To do this, enter an amount of seconds in the Seconds textbox next to the Queue checkbox. As the a queued action will inherit the execution scope up until the action, there are a few things to be aware of when using Queued Actions: Only variables defined in actions ordered before the queued action will be available to the action. Variables defined by a queued action is not available to actions coming after it. You cannot, for example, mark a Send Request action as queued and use the response in a Modify Response action. If you mark several Custom Actions as queued, they will execute independently and not share variables. The amount of time until the queued action is executed can vary, but is usually in the order of seconds. If you have several actions marked as queued, it is not guaranteed that they will execute in order.","title":"About Custom Actions"},{"location":"custom-actions.html#custom-actions","text":"With Custom Actions, it is possible to create a workflow out of a set of actions that are executed whenever a Webhook.site URL receives a request or email. Using this functionality, you can connect APIs that aren't compatible, convert a HTTP request to an email or vice versa, build workflows that would otherwise require a developer, and much, much more.","title":"Custom Actions"},{"location":"custom-actions.html#demo","text":"In the following demo, webshop order details are received in a webhook. We then use Extract JSONPath and Google Sheets actions to insert their name in a Google Sheet. It also shows how variables interact with downstream actions.","title":"Demo"},{"location":"custom-actions.html#repeating-actions","text":"Webhook.site allows some action types to be repeating, which makes Webhook.site \"loop over\" one or more values without needing to use scripts. Currently, repetition is only supported by the Extract JSONPath and Extract Regex action types. Currently, the maximum amount of items that are supported is 100 to prevent abuse. This limit may be raised in the future. Items above that are ignored. The repeating action should be ordered before the actions that are to be repeated. The actions that are repeated will run for each item that is extracted, using the same variable name.","title":"Repeating Actions"},{"location":"custom-actions.html#queued-actions","text":"By checking the Queued checkbox when creating a Custom Action, Webhook.site will run that specific action in a background queue (asynchronously). This is useful when you need your Webhook.site URL to respond quickly, but your Custom Actions are taking a long time to run. For example, if your Webhook.site URL should respond in 5 seconds, but you need to call an endpoint with a Send Request action that responds in 10 seconds, you can queue the Send Request action. Additionally, you can specify an amount of seconds to wait until the action is executed. To do this, enter an amount of seconds in the Seconds textbox next to the Queue checkbox. As the a queued action will inherit the execution scope up until the action, there are a few things to be aware of when using Queued Actions: Only variables defined in actions ordered before the queued action will be available to the action. Variables defined by a queued action is not available to actions coming after it. You cannot, for example, mark a Send Request action as queued and use the response in a Modify Response action. If you mark several Custom Actions as queued, they will execute independently and not share variables. The amount of time until the queued action is executed can vary, but is usually in the order of seconds. If you have several actions marked as queued, it is not guaranteed that they will execute in order.","title":"Queued Actions"},{"location":"faq.html","text":"Webhook.site Frequently Asked Questions \u00b6 I want to whitelist Webhook.site in our firewall, which IP do you use? \u00b6 You'll need to whitelist the IP 46.4.105.116 . Both inbound and outbound originate and destinate at this IP address. Note that this may change in the future, so sign up for the newsletter to be notified of changes. Can I pay via invoice? \u00b6 After you've paid for and created a subscription , you will receive a PDF invoice via email. How can I see the pricing in my currency? \u00b6 Once you start the checkout process, you will see the amount in your local currency, including any applicable VAT. The JSON data is in a weird format/can't be parsed by Extract JSONPath \u00b6 The JSON data might have been attached to the request as form data rather than as request body data, which is usually how JSON is sent. The data might look like this on Webhook.site: To remediate this in Extract JSONPath, you'll need to set the source field to the form field variable, which is automatically set by Webhook.site. In the screenshot above, the variable name would be $request.form.my_json_data$ , which works with Extract JSONPath: JSON data is invalid when using the Send Request action \u00b6 If you use any variables in the JSON that could contain e.g. new lines or quote characters, these characters need to be \"escaped\" properly so that the JSON remains valid. Webhook.site provides an easy way to do this with the .json Variable Modifier, which will automatically escape any special JSON characters. More info here . Before: { \"message\" : \"$request.query.message$\" } After, with the JSON Escape Variable Modifier: { \"message\" : \"$request.query.message.json$\" } How do I export the data stored on Webhook.site? \u00b6 With Webhook.site Pro , there's 3 ways to export data sent to your URL or email address. We provide a CSV Export functionality, simply click the button in the menu. Data can be saved using the Webhook.site API using any programming language. The Webhook.site CLI (Command-Line Interface) can be used to forward requests from Webhook.site to a workstation or server. More info here How do I send data to my computer/localhost? \u00b6 There's several ways to accomplish this depending on your needs. You can periodically fetch the data using the Webhook.site API Requests can also be streamed to a local URL using the Webhook.site CLI , in a similar fashion to e.g. ngrok. Webhook.site also supports the XHR Redirect feature, which uses your browser in order to forward the requests. The endpoint will need to respond with CORS headers in all requests so that the browser will be able to send requests to it. The forwarding will only work as long as the browser window is open. The following CORS headers should allow Webhook.site to forward requests to your local endpoint via XHR Redirect: Access-Control-Allow-Origin: * Access-Control-Allow-Methods: * Access-Control-Allow-Headers: * Access-Control-Expose-Headers: Content-Length,Content-Range I'm getting a 404 Not Found, what's wrong? / When does Webhook.site URLs expire? \u00b6 Using the free version of Webhook.site, URLs automatically expire in 7 days. After that, the URL is no longer available and data is deleted. With the paid version, Webhook.site Pro, URLs never expire automatically. I'm getting a 405 Method Not Allowed, what's wrong? \u00b6 You might be copying the URL for the Webhook.site application, and not the actual URL. Webhook.site app (\u26d4\ufe0f wrong): https://webhook.site/#!/6dbb3859-4ad5-4e85-acae-e44d6e37ea4a Webhook.site url (\u2705 correct): https://webhook.site/6dbb3859-4ad5-4e85-acae-e44d6e37ea4a I'm getting a 429 Too Many Requests, what's wrong? \u00b6 First, make sure that you have copied the correct URL, see here . The URL was automatically blocked due to a large amount of requests, as per our Terms of Service. This is done to prevent a decrease in service level for our other customers. For Webhook.site Pro customers, it is possible to have a URL whitelisted so it will not be automatically blocked. To request a whitelisting, please contact Support . Additionally, when an URL is associated with a Webhook.site Pro or Enterprise account, the limit for automatically blocking the URL is many times higher than for the free version. I'm getting a 413 Payload Too Large, what's wrong? / What's the request size limit? \u00b6 The HTTP body data (e.g. files or JSON data) submitted to Webhook.site must be below 10 megabytes. More than that will cause a HTTP 413 response. I'm getting an \"Access Control Check error\" \u00b6 If you're requesting the Webhook.site endpoint from another domain via JavaScript, you'll need to enable CORS so the browser allows the request. Simply check this checkbox to add the necessary headers. I'm getting a \"Certificate Expired\" error \u00b6 Our SSL certificate is fully working; the issue lies with your system. In september 2021, our SSL provider, LetsEncrypt, updated their root certificate . This can mean that if your locally installed trusted root certificates are of an old version, you'll be seeing a certificate error as Webhook.site now runs a certificate that is based on the new root certificate chain. To remediate this problem, you'll need to update your local certificate trust store: Debian-based systems: Use update-ca-certificates ; more info here . Red Hat based systems: yum update ca-certificates ; more info here Some systems and packages, like Python certifi/urllib3 , also come with static certificates. We cannot support updating these. Is my data private? \u00b6 Yes. Per default, all URLs associated with a Webhook.site Pro account are only visible for the user. Additionally, users can set passwords on individual URLs to view the data. For free users, data is accessible to anyone who knows the ID of the URL. Can I use Webhook.site for production workloads? \u00b6 Yes. Thousands of our customers use Webhook.site to build workflows that help their business, without needing to hire a programmer or pay for and setup servers. We take care of the infrastructure so you can build what you need. How much data does Webhook.site store? \u00b6 For each URL associated with a Webhook.site Pro account, Webhook.site makes the latest 10.000 requests or emails available. Old requests are automatically rotated/purged periodically. In Control Panel, it is also possible to configure a lower number of requests to store automatically before they are deleted. For free users, the amount is 500 and old requests are not automatically rotated.","title":"FAQ"},{"location":"faq.html#webhooksite-frequently-asked-questions","text":"","title":"Webhook.site Frequently Asked Questions"},{"location":"faq.html#i-want-to-whitelist-webhooksite-in-our-firewall-which-ip-do-you-use","text":"You'll need to whitelist the IP 46.4.105.116 . Both inbound and outbound originate and destinate at this IP address. Note that this may change in the future, so sign up for the newsletter to be notified of changes.","title":"I want to whitelist Webhook.site in our firewall, which IP do you use?"},{"location":"faq.html#can-i-pay-via-invoice","text":"After you've paid for and created a subscription , you will receive a PDF invoice via email.","title":"Can I pay via invoice?"},{"location":"faq.html#how-can-i-see-the-pricing-in-my-currency","text":"Once you start the checkout process, you will see the amount in your local currency, including any applicable VAT.","title":"How can I see the pricing in my currency?"},{"location":"faq.html#the-json-data-is-in-a-weird-formatcant-be-parsed-by-extract-jsonpath","text":"The JSON data might have been attached to the request as form data rather than as request body data, which is usually how JSON is sent. The data might look like this on Webhook.site: To remediate this in Extract JSONPath, you'll need to set the source field to the form field variable, which is automatically set by Webhook.site. In the screenshot above, the variable name would be $request.form.my_json_data$ , which works with Extract JSONPath:","title":"The JSON data is in a weird format/can't be parsed by Extract JSONPath"},{"location":"faq.html#json-data-is-invalid-when-using-the-send-request-action","text":"If you use any variables in the JSON that could contain e.g. new lines or quote characters, these characters need to be \"escaped\" properly so that the JSON remains valid. Webhook.site provides an easy way to do this with the .json Variable Modifier, which will automatically escape any special JSON characters. More info here . Before: { \"message\" : \"$request.query.message$\" } After, with the JSON Escape Variable Modifier: { \"message\" : \"$request.query.message.json$\" }","title":"JSON data is invalid when using the Send Request action"},{"location":"faq.html#how-do-i-export-the-data-stored-on-webhooksite","text":"With Webhook.site Pro , there's 3 ways to export data sent to your URL or email address. We provide a CSV Export functionality, simply click the button in the menu. Data can be saved using the Webhook.site API using any programming language. The Webhook.site CLI (Command-Line Interface) can be used to forward requests from Webhook.site to a workstation or server. More info here","title":"How do I export the data stored on Webhook.site?"},{"location":"faq.html#how-do-i-send-data-to-my-computerlocalhost","text":"There's several ways to accomplish this depending on your needs. You can periodically fetch the data using the Webhook.site API Requests can also be streamed to a local URL using the Webhook.site CLI , in a similar fashion to e.g. ngrok. Webhook.site also supports the XHR Redirect feature, which uses your browser in order to forward the requests. The endpoint will need to respond with CORS headers in all requests so that the browser will be able to send requests to it. The forwarding will only work as long as the browser window is open. The following CORS headers should allow Webhook.site to forward requests to your local endpoint via XHR Redirect: Access-Control-Allow-Origin: * Access-Control-Allow-Methods: * Access-Control-Allow-Headers: * Access-Control-Expose-Headers: Content-Length,Content-Range","title":"How do I send data to my computer/localhost?"},{"location":"faq.html#im-getting-a-404-not-found-whats-wrong-when-does-webhooksite-urls-expire","text":"Using the free version of Webhook.site, URLs automatically expire in 7 days. After that, the URL is no longer available and data is deleted. With the paid version, Webhook.site Pro, URLs never expire automatically.","title":"I'm getting a 404 Not Found, what's wrong? / When does Webhook.site URLs expire?"},{"location":"faq.html#im-getting-a-405-method-not-allowed-whats-wrong","text":"You might be copying the URL for the Webhook.site application, and not the actual URL. Webhook.site app (\u26d4\ufe0f wrong): https://webhook.site/#!/6dbb3859-4ad5-4e85-acae-e44d6e37ea4a Webhook.site url (\u2705 correct): https://webhook.site/6dbb3859-4ad5-4e85-acae-e44d6e37ea4a","title":"I'm getting a 405 Method Not Allowed, what's wrong?"},{"location":"faq.html#im-getting-a-429-too-many-requests-whats-wrong","text":"First, make sure that you have copied the correct URL, see here . The URL was automatically blocked due to a large amount of requests, as per our Terms of Service. This is done to prevent a decrease in service level for our other customers. For Webhook.site Pro customers, it is possible to have a URL whitelisted so it will not be automatically blocked. To request a whitelisting, please contact Support . Additionally, when an URL is associated with a Webhook.site Pro or Enterprise account, the limit for automatically blocking the URL is many times higher than for the free version.","title":"I'm getting a 429 Too Many Requests, what's wrong?"},{"location":"faq.html#im-getting-a-413-payload-too-large-whats-wrong-whats-the-request-size-limit","text":"The HTTP body data (e.g. files or JSON data) submitted to Webhook.site must be below 10 megabytes. More than that will cause a HTTP 413 response.","title":"I'm getting a 413 Payload Too Large, what's wrong? / What's the request size limit?"},{"location":"faq.html#im-getting-an-access-control-check-error","text":"If you're requesting the Webhook.site endpoint from another domain via JavaScript, you'll need to enable CORS so the browser allows the request. Simply check this checkbox to add the necessary headers.","title":"I'm getting an \"Access Control Check error\""},{"location":"faq.html#im-getting-a-certificate-expired-error","text":"Our SSL certificate is fully working; the issue lies with your system. In september 2021, our SSL provider, LetsEncrypt, updated their root certificate . This can mean that if your locally installed trusted root certificates are of an old version, you'll be seeing a certificate error as Webhook.site now runs a certificate that is based on the new root certificate chain. To remediate this problem, you'll need to update your local certificate trust store: Debian-based systems: Use update-ca-certificates ; more info here . Red Hat based systems: yum update ca-certificates ; more info here Some systems and packages, like Python certifi/urllib3 , also come with static certificates. We cannot support updating these.","title":"I'm getting a \"Certificate Expired\" error"},{"location":"faq.html#is-my-data-private","text":"Yes. Per default, all URLs associated with a Webhook.site Pro account are only visible for the user. Additionally, users can set passwords on individual URLs to view the data. For free users, data is accessible to anyone who knows the ID of the URL.","title":"Is my data private?"},{"location":"faq.html#can-i-use-webhooksite-for-production-workloads","text":"Yes. Thousands of our customers use Webhook.site to build workflows that help their business, without needing to hire a programmer or pay for and setup servers. We take care of the infrastructure so you can build what you need.","title":"Can I use Webhook.site for production workloads?"},{"location":"faq.html#how-much-data-does-webhooksite-store","text":"For each URL associated with a Webhook.site Pro account, Webhook.site makes the latest 10.000 requests or emails available. Old requests are automatically rotated/purged periodically. In Control Panel, it is also possible to configure a lower number of requests to store automatically before they are deleted. For free users, the amount is 500 and old requests are not automatically rotated.","title":"How much data does Webhook.site store?"},{"location":"jobs.html","text":"Webhook.site Jobs \u00b6 Webhook.site is a small startup with a very small team that's fully remote. We believe in absolute trust in our employees. What's important to us is your work output and communication, not how many hours you spend. You'll be working at a company with a lot of dedicated customers that use the product to solve real problems in their work. As with our software, our hiring process is simple. We expect you send us a CV along with a short email describing yourself, and then we'll take a 30 minutes video call to talk about the job and any questions you may have. If we decide to hire you, you'll be able to start as soon as you like. Support Engineer (part time) \u00b6 Job Roles \u00b6 Work on and resolve customer support tickets. Respond within 24 hours. Solve problems for customers. Help setting up Custom Actions. Handle billing issues. Identify and track bugs and feature requests. Requirements \u00b6 Excellent English skills Experience with writing JavaScript or similar Experience with Web technologies: HTTP, FTP Description \u00b6 Customers use Webhook.site for a wide variety of problems, and it's your job to help them use Webhook.site to solve these issues. Users can be at the beginner to intermediate stage in terms of their understanding of Internet technology, scripting etc., and often you\u2019ll need to sense what the actual problem is\u2013which can be wildly different from what the support ticket is about. 100% remote $25/hour Minimum salary: 10 hours/week To apply, send an email to jobs@webhook.site . Full-Stack Developer (part time/full time) \u00b6 Job Roles \u00b6 Reorganize Webhook.site code Upgrade PHP version / frameworks / dependencies Optimize request times and performance Fix bugs Implement new features Write documentation (here!) for work done Requirements \u00b6 Excellent English skills Professional experience with at lease one of: PHP Angular.js Professional experience with: Git Linux Docker Description \u00b6 Webhook.site is a complex Laravel and Angular.js based system with more than 100.000 monthly unique users which use it for everything from Webhook API development to workflow automation using Webhook.site\u2019s Custom Actions feature. Much of the site is a REST API with an Angular.js client in addition to some Blade pages. Your job is to continuously improve on the codebase, whether it\u2019s code organisation, framework and dependency updates, implementing new features and fixing bug tickets. The job is paid hourly, and you\u2019ll be 100% free to schedule your work as you see fit and work as may or as few hours as you like. To apply, send an email to jobs@webhook.site .","title":"Webhook.site Jobs"},{"location":"jobs.html#webhooksite-jobs","text":"Webhook.site is a small startup with a very small team that's fully remote. We believe in absolute trust in our employees. What's important to us is your work output and communication, not how many hours you spend. You'll be working at a company with a lot of dedicated customers that use the product to solve real problems in their work. As with our software, our hiring process is simple. We expect you send us a CV along with a short email describing yourself, and then we'll take a 30 minutes video call to talk about the job and any questions you may have. If we decide to hire you, you'll be able to start as soon as you like.","title":"Webhook.site Jobs"},{"location":"jobs.html#support-engineer-part-time","text":"","title":"Support Engineer (part time)"},{"location":"jobs.html#job-roles","text":"Work on and resolve customer support tickets. Respond within 24 hours. Solve problems for customers. Help setting up Custom Actions. Handle billing issues. Identify and track bugs and feature requests.","title":"Job Roles"},{"location":"jobs.html#requirements","text":"Excellent English skills Experience with writing JavaScript or similar Experience with Web technologies: HTTP, FTP","title":"Requirements"},{"location":"jobs.html#description","text":"Customers use Webhook.site for a wide variety of problems, and it's your job to help them use Webhook.site to solve these issues. Users can be at the beginner to intermediate stage in terms of their understanding of Internet technology, scripting etc., and often you\u2019ll need to sense what the actual problem is\u2013which can be wildly different from what the support ticket is about. 100% remote $25/hour Minimum salary: 10 hours/week To apply, send an email to jobs@webhook.site .","title":"Description"},{"location":"jobs.html#full-stack-developer-part-timefull-time","text":"","title":"Full-Stack Developer (part time/full time)"},{"location":"jobs.html#job-roles_1","text":"Reorganize Webhook.site code Upgrade PHP version / frameworks / dependencies Optimize request times and performance Fix bugs Implement new features Write documentation (here!) for work done","title":"Job Roles"},{"location":"jobs.html#requirements_1","text":"Excellent English skills Professional experience with at lease one of: PHP Angular.js Professional experience with: Git Linux Docker","title":"Requirements"},{"location":"jobs.html#description_1","text":"Webhook.site is a complex Laravel and Angular.js based system with more than 100.000 monthly unique users which use it for everything from Webhook API development to workflow automation using Webhook.site\u2019s Custom Actions feature. Much of the site is a REST API with an Angular.js client in addition to some Blade pages. Your job is to continuously improve on the codebase, whether it\u2019s code organisation, framework and dependency updates, implementing new features and fixing bug tickets. The job is paid hourly, and you\u2019ll be 100% free to schedule your work as you see fit and work as may or as few hours as you like. To apply, send an email to jobs@webhook.site .","title":"Description"},{"location":"news.html","text":"News \u00b6 Subscribe below to receive updates about improvements and new features on Webhook.site as well as infrastructure changes like new IP addresses for e.g. firewall whitelisting. Expect a newsletter a few times a year at most. #mc_embed_signup form {text-align: left;padding: 0;} 21 September 2022 \u00b6 API: It's now possible to sort tokens returned by the Get Tokens endpoint. More info here: More info here 8 September 2022 \u00b6 Fixed a bug in Webhook.site CLI (\"TypeError: Echo is not a constructor\" error.) - please upgrade the NPM package to 0.1.5. Please do not use async-http-client (User-Agent AHC/2.1.) It is abandoned and contains bugs that creates too many HTTP requests. We may block users of this package in the future. 17 August 2022 \u00b6 As a result of customer abuse, we have decided to introduce rate limits on creation of URLs. The rate limit will be initially set to 10 per minute. After reaching this limit, the POST /token endpoint will return a 429 Too Many Requests response. 28 June 2022 \u00b6 New Custom Action Type: Send push messages with Pushed.co. More info here . 24 June 2022 \u00b6 New WebhookScript function: preg_match() - allows matching regex with custom regex options More info here New WebhookScript function: html_to_text() - converts html to text. A more aggressive version of html_strip_tags() More info here WebhookScript: regex_extract_first() now has a default parameter that is returned when there's no matches. The function still returns false by default when this third parameter is not set. More info here 21 May 2022 \u00b6 New Custom Actions feature: It is now possible to delay queued actions by a specified amount of seconds. More info here 20 May 2022 \u00b6 New WebhookScript function: is_numeric(). More info here Rate Limit Custom Action: It is now possible to specify a key to let you rate limit on a custom parameter. The request IP address ( $request.ip$ ) is still the default key. Action and Schedule error reports now specify the name, ID or alias of the Schedule or URL in question. Fixed a bug with Webhook.site Enterprise Custom Domain email validation. 19 April 2022 \u00b6 Fixed a bug that prevented action error notifications from being sent to the users. 14 April 2022 \u00b6 It is now possible to search requests and emails, using either the frontend or the API. The data can be filtered by a wide range of fields, queries. More info here . 30 March 2022 \u00b6 Added documentation for the Test Action endpoint . 20 March 2022 \u00b6 New Variables for Files: $request.file.[name].id$ and $request.file.[name].link$ (which returns direct link to download the file.) 14 March 2022 \u00b6 Added num2hex , hex2num and hex2bin functions. 19 January 2022 \u00b6 New Custom Actions: RabbitMQ Get & Publish, allows consuming and publishing to RabbitMQ Queues via Webhook.site Custom Actions. 21 December 2021 \u00b6 Improved handling of binary data received from Send Request actions. Added a group_id parameter when creating or updating Tokens. Fixed an issue with the Twitter Custom Action. Requests to /token/:tokenId/requests are now throttled at 60 requests/minute. 24 November 2021 \u00b6 WebhookScript: Fixed an issue that would cause strings to be interpreted as integers when encoding JSON. 30 October 2021 \u00b6 Webhook.site's requests to itself, e.g. via Send Request action or Schedules by Webhook.site, now shows more clearly as coming from Webhook.site in the request list. Outgoing requests are now sent with a User-Agent header of Webhook.site/1.0 , which can be overwrited if specifying a User-Agent header manually. Error deleting Global Variables fixed. It is now possible for Webhook.site Enterprise customers to manage their Custom Domains from the control panel. 15 October 2021 \u00b6 Fix invalid charset configurations causing issues saving requests. 4 October 2021 \u00b6 Webhook.site now supports multiple sub-users on an account, with different access permissions, available to Webhook.site Enterprise users. For more information, please contact us . 29 September 2021 \u00b6 Webhook.site CLI: New minor version, fixes a bug causing Invalid namespace errors. 17 September 2021 \u00b6 New Custom Action Variable Modifiers: .html_decode , .url_encode , and .url_decode . More info here 12 September 2021 \u00b6 New WebhookScript function: array_merge(), that merges two arrays into one. More info here New WebhookScript function: array_chunk(), that splits an array into chunks. More info here Functions dd(), dump() and echo() can now take a variable amount of arguments. More info here New WebhookScript date function: now(), which returns the current date in ISO format. More info here The date_interval() and date_interval_human() functions now defaults to \"now\" if the second parameter isn't specified. Script editor now has more space for outputs in full screen mode. 18 August 2021 \u00b6 New API Endpoint: Get tokens, which returns a list of all tokens belonging to the account. More info here Fixed a bug that caused logins to be slow on especially older accounts. Fixed a bug that caused the FTP Upload action to error when the Port field was missing. 12 August 2021 \u00b6 Google Sheet actions that consistently cause errors are now disabled automatically. Users are sent an email when this occurs. 30 July 2021 \u00b6 New WebhookScript function: hmac(), which allows easily verifying strings using the HMAC method. More info here 14 July 2021 \u00b6 New Custom Action: Replace Text, which allows easily making text replacements from variable input, and either overwrites an existing variable or creates a new one with the replaced content. 4 July 2021 \u00b6 Fixed bug causing the \"Use Request Content\" checkbox in the Send Email action to not work. 15 June 2021 \u00b6 New Custom Action: Twitter, so you can easily send tweets using Webhook.site. New WebhookScript functions: convert_kana(), string_slice(), string_upper(), string_lower(), string_title() More info here . 10 June 2021 \u00b6 Individual Custom Actions can now be set as queued , which causes them to be run in the background, or asynchronously. More info here 7 June 2021 \u00b6 Raised the limit for the amount of items processed by repeating actions to 100. Fixed a bug that would cause an error when updating notification settings in Control Panel. Fixed a bug where emails containing attachments would be stored. 23 May 2021 \u00b6 API: It's now possible to filter requests by date. More info here 13 May 2021 \u00b6 Documented clone_from option when using the API to create Tokens (URLs) WebhookScript: json_decode / json_encode now output error messages if they fail due to e.g. bad data. 1 May 2021 \u00b6 Webhook.site Schedules now has an API. More info here Fixed a bug where URLs could be in two groups at the same time. 20 April 2021 \u00b6 Added base64 encoding and decoding variable modifiers . More info here 11 April 2021 \u00b6 New Custom Action and WebhookScript function: Don't Save, which marks the request so it is not saved in Webhook.site. The request can still be seen when it comes in, but will not be available through through the app later, or through the API. New Custom Action: Stop, which immediately stops Custom Action execution and returns the default response. The Extract Regex now supports the Repeat function. More info here . 7 April 2021 \u00b6 New powerful feature: Repeating actions. Currently supported by the Extract JSONPath action, it is now possible to \"loop over\" items in a JSON array. More info here 2 April 2021 \u00b6 It is now possible to enable or disable Custom Actions on a specific Token with the API. More info here or here . When exporting CSVs, the sorting selected in the application is now used automatically. 28 March 2021 \u00b6 Today we've released the first version of the Webhook.site Command-line Interface (CLI), which allows you to forward requests from your Webhook.site URL to your local machine. More info here 24 March 2021 \u00b6 WebhookScript: Added array_sort , array_join and json_escape functions. Added modifiers for variables. More info here 23 March 2021 \u00b6 Control Panel: It's now possible to clone URLs, including their Custom Actions and other configuration. Control Panel: URLs with a password can be deleted more easily. 13 March 2021 \u00b6 Control Panel: It's now possible to set a password for a Webhook.site URL in the Control Panel. Additionally, it's now possible to easily select and delete multiple URLs at once. 11 March 2021 \u00b6 API: It's now possible to specify an alias when creating a URL via the API. More info here 6 March 2021 \u00b6 New Action: Database Query - allows running database queries on PostgreSQL and MySQL servers, inserting, changing and fetching data in specific variables or JSON format. More info here 3 March 2021 \u00b6 Webhook.site Premium has changed name to Webhook.site Pro. Functionality, pricing and everything else remains the same; it's a cosmetic change. More currencies are now supported for Webhook.site Pro subscriptions: GBP and EUR. To change the currency of an existing subscription, please contact Webhook.site Support . Custom Action output is now included in CSV Exports. 17 Feburary 2021 \u00b6 New Action: FTP(S) Upload - allows easy file upload to FTP servers. 5 Feburary 2021 \u00b6 New WebhookScript functions: html_strip_tags, html_decode, html_encode, markdown_to_html. For more information, see here . 1 Feburary 2021 \u00b6 Webhook.site has had intermittent downtime today due abuse from a user. We've identified them and blocked them from our systems. We're very sorry for the inconvenience. 31 January 2021 \u00b6 We have discontinued support for subscriptions via Patreon, who will need to create a new subscription. For more information please contact support . 19 January 2021 \u00b6 Happy new year! New Action Type: Conditions 2.0. Now supports adding multiple conditions in a single action. New Action Type: Set Variable. Working similarly to the Store Global Variable action, this action sets a runtime variable that is not persisted. Actions can now individually be executed depending on a previous set of conditions. The Debug Output section in the Custom Actions builder now shows the action number and type from where it came. The Modify Response action now supports returning the response immediately. 5 December 2020 \u00b6 Added new Custom Action: Store Global Variable, which does what it says on the tin. Bug fix: In Control Panel, the update date for each Global Variable now actually updates when a Global Variable is updated. 26 November 2020 \u00b6 Webhook.site had downtime during the night. The problem has been fixed. 25 November 2020 \u00b6 WebhookScript: It's now possible to store non-string values in set(). If the value is an array, however, it is JSON encoded first. WebhookScript: Added more examples for the date functions. 1 November 2020 \u00b6 Added new Custom Action: Rate Limit, which lets you specify the maximum amount of requests in a given duration per IP to allow to request the Webhook.URL. Dates shown in the application now include seconds. 29 October 2020 \u00b6 Added new Custom Action: Run SSH Command, which allows you to run SSH commands on your server. 22 October 2020 \u00b6 WebhookScript: Added array_keys and array_values functions. For more information, see here . 19 October 2020 \u00b6 It's now possible to set a timeout for the Send Request action. A new timeout parameter can also be given to the request() function in WebhookScript. Both places accept a value in seconds, with decimals. When exporting Custom Actions, if the URL has an alias, this is now used for the resulting filename. 11 October 2020 \u00b6 It's now possible to export and import Custom Actions to a file using the new Import/Export buttons in the Custom Actions builder. 7 October 2020 \u00b6 Added documentation for managing Custom Actions via the API. For more information, see here . Fixed a bug causing the Operator of an action to be reset to \"is equal to\" when testing. 6 October 2020 \u00b6 Action output is no longer displayed twice when testing Condition actions. 24 September 2020 \u00b6 New feature: Customize Auto-Cleanup threshold. This lets you specify how many requests or emails to keep for your URLs, if you want to keep fewer than the default amount of 10.000 for e.g. data protection reasons. Available from the brand new Settings page in Control Panel. The setting applies to all URLs that have the Auto Cleanup feature enabled - click Edit on a URL to enable it. New feature: URL groups, which lets you categorize your URLs into groups. Available from the URLs page in Control Panel. Click Edit on a URL to change its group. The URLs page in Control Panel has a new design which is less cluttered and allows you to more quickly change certain settings, URL aliases, and the description of a URL. 23 September 2020 \u00b6 Regrettably, we saw a long period of downtime again from approx 20:00 to 05.40 UTC. The cause of the downtime was a user flooding their Webhook.site URLs with many gigabytes of data, causing the system to be overloaded. The same user was responsible for the downtime at 15 September 2020 and we've now terminated their license to use Webhook.site. We are also going prioritize changes that will automatically limit this kind of abuse, as well as move to another database system that will be more resilient. 15 September 2020 \u00b6 We've seen spurious instances of downtime in the last 24 hours, the longest one lasting from approx. 14:00 to 14:50 UTC. We apologize for the inconvenience. 13 September 2020 \u00b6 WebhookScript: Added override parameter to request(), which prevents content from the source request from being included. 3 September 2020 \u00b6 WebhookScript: It is now possible to set a default for the var() function. 29 August 2020 \u00b6 A bug in the Extract JSONPath action has been fixed so that it is now also possible to filter for keys containing punctuation, e.g. .data[?(@.Employee.FirstName)] . 18 August 2020 \u00b6 WebhookScript: The to_date and date_format functions have been improved with timezone handling capabilities. 15 August 2020 \u00b6 It's now possible to set a custom timeout for Schedules, up to 30 seconds. 8 August 2020 \u00b6 You can now specify a custom Cron expression for your Webhook.site Schedule, in addition to the predefined intervals. This lets you decide exactly the hour, day and minute, etc., of when the schedule runs (based on UTC time.) It's now possible to enable email notifications for whenever a Schedule run fails to execute. To enable this, simply check the checkbox in Notification Settings. . 7 August 2020 \u00b6 It's now possible to change the name of your Provider accounts to e.g. something that's easier to remember. 5 August 2020 \u00b6 Webhook.site had an unplanned outage starting at 03.30 UTC. The site was down for around an hour. 2 August 2020 \u00b6 It is now possible to specify a default value in the Extract JSONPath, Extract Regex and Extract XPath actions, so that if the extraction could not find the item, the variable is set to the default value that is defined. This field also takes variables. Request list is now sorted by Newest First per default. Custom Action number and type is now shown next to the output in the request details. If the Action was deleted, the UUID is shown instead. 1 August 2020 \u00b6 It is now possible to enable email notifications for whenever a Custom Action encountered an error. To enable this, simply check the checkbox in Notification Settings. . 29 July 2020 \u00b6 New WebhookScript function: trim(string) , which removes space, newline and tab characters from the beginning and end of a string, similar to PHP's own trim() function. New Schedule intervals: weekly (every monday), monthly (every 1st day of month) 25 July 2020 \u00b6 New WebhookScript function: action(action_type, parameters) , to run Custom Actions inside a WebhookScript. More info here. It's now possible to download email attachments or uploaded files directly from the Webhook.site app. When sending a request using either the Send Request Custom Action or the request() function, the response is now truncated if the response content is over 20KiB. This means the whole contents is not visible in the app, but is still available to Actions. 16 July 2020 \u00b6 Better file handling for emails: attached files are now also extracted as variables New file management functions for WebhookScript: files() retrieves a an array of all files, file_content(fileId) returns the content of a specific file. More info here. 5 July 2020 \u00b6 New \"Resize Image\" action added for resizing images from either a file upload, email attachment or other Action. Better handling of downloaded files: the contents won't be shown in the debug overlay to prevent very large files from crashing the browser. Fixed a bug in the Dropbox provider returning creating an empty variable when downloading large files. 3 July 2020 \u00b6 Webhook.site was down for about 30 minutes starting 07:20 UTC due to a memory upgrade. Max request size has been increased to 10 MB from 2 MB. 23 June 2020 \u00b6 Added new Dropbox Custom Actions: Create Folder, Download, Upload, Delete, Get Link. 14 June 2020 \u00b6 WebhookScript editor syntax highlighting improved with regards to multiline strings, escape characters and more New WebhookScript editor keyboard shortcut for saving (Mac: Cmd-S, Windows: Ctrl-S.) Fix WebhookScript fullscreen mode not being disengaged when saving URLs can now accept file uploads via multipart. File contents are available via variables: request.file.<formname>.content , request.file.<formname>.size , request.file.<formname>.filename New WebhookScript function: csv_to_array() , which converts a CSV file from a string to an array that can easily be parsed. Added an example script demoing file uploads and CSV parsing 7 June 2020 \u00b6 Added new Slack Send Message Custom Action, which lets you send Slack messages via a Slack Webhook URL. 5 June 2020 \u00b6 Added \"Formula Mode\" checkbox for Add and Update Row Google Sheets actions, which parses values like entered in a cell, and allows inserting formulas. 4 June 2020 \u00b6 Added new endpoints to fetch the content and information about the latest request on a URL. See here and here . 2 June 2020 \u00b6 Added Amazon Web Services CloudFront Cache Invalidation Custom Action. Added ability to toggle Auto Cleanup, which automatically cleans up requests/emails. 30 May 2020 \u00b6 Added Discord Custom Action for sending messages. Read more in the docs 29 May 2020 \u00b6 New set of date functions added to WebhookScript, namely: to_date() , date_format() , date_to_array() , date_interval() , date_interval_human() . Read more in the docs 25 May 2020 \u00b6 New set of Amazon Web Services S3 actions: Create Bucket, Put Object, Delete Object and Get Object (which retrieves object contents to a Variable.) 22 May 2020 \u00b6 New Schedule intervals: every 1 minute and every 10 minutes, in addition to the already existing ones . 17 May 2020 \u00b6 New WebhookScript function: delay() , which lets you delay and execute WebhookScript code a set amount of seconds in the future. New WebhookScript function: exec() , which lets you dynamically execute code in a string. New WebhookScript function: import() , which downloads and executes code from a URL - great if you want to reuse your code, just put it on Github and import it with the URL! 16 May 2020 \u00b6 It's now possible to set a Token (URL or email address) to expire automatically, even for Premium users. This is useful for creating tokens for automated testing. 3 May 2020 \u00b6 New Google Sheets Custom Actions (Beta). 3 initial actions are available: Append Row, Update Row and Get Values, which allow you to manipulate or retrieve the values of a Google Sheet without writing any code. 24 April 2020 \u00b6 New fullscreen mode in WebhookScript editor Ability to edit your user profile New WebhookScript functions: base64_encode() , base64_decode() . 21 April 2020 \u00b6 New WebhookScript function: store() - creates or updates an existing Global Variable 20 April 2020 \u00b6 New Global Variables section in Control Panel. 19 April 2020 \u00b6 New WebhookScript math functions: max(), min(), mod(), pi(), rand() - for more, see the Reference 28 March 2020 \u00b6 New feature: Webhook.site Schedules lets you request any URL \u2013 including Webhook.site URLs \u2013 automatically on an interval, so you can for example run Custom Actions every 5 minutes, or make a health check for your Web site. Send Request action request timeout has been raised from 5 to 10 seconds. Applies to both the Custom Action and the WebhookScript request() function. 24 March 2020 \u00b6 New feature: API Keys can now be created so you can use the API with URLs that have the \"Require Authentication\" or \"Password\" options set. Fix: It's now possible to test Send Email actions before creating them. Prior to this, the Test button would not do anything for the Send Email action. 6 March 2020 \u00b6 New feature: Extract XPath Custom Action with accompanying xpath() WebhookScript function. Read more. 29 Feburary 2020 \u00b6 Values are no longer required for Condition actions, so it's possible to compare an empty string or missing value. Fixed an issue where a tooltip in the Custom Actions modal would not disappear. Removed Beta label from WebhookScript. 27 Feburary 2020 \u00b6 Fixed a bug where slashes at the end of Webhook.site Single Page App URLs didn't work. Fixed a bug where Copy To CURL sometimes wouldn't return a valid CURL command. 26 Feburary 2020 \u00b6 It's no longer a requirement to specify a variable for the Send Request action. 25 Feburary 2020 \u00b6 New feature: It's now possible to receive emails, which are treated like Webhooks \u2013 so you can automate emails with Custom Actions on Webhook.site. You can also test email deliverability using DKIM, DMARC and SPF validation. JSON formatting is now always enabled per default. The requests view is cleared after deleting the last request, and the tutorial text is shown. 16 Feburary 2020 \u00b6 WebhookScript: Added regex_extract and regex_extract_first functions. 15 Feburary 2020 \u00b6 WebhookScript: Added hash function. 14 Feburary 2020 \u00b6 New feature: Export to CSV lets you export all requests on a given URL to a CSV file. Fixed a bug where duplicate in-app notifications would appear on new requests. 12 Feburary 2020 \u00b6 WebhookScript: Added url_encode , url_decode , and query functions. 8 Febuary 2020 \u00b6 New Custom Action type: Condition, which lets you conditionally stop a set of actions based on comparisons. 28 January 2020 \u00b6 WebhookScript now supports newline literals ( \\\\n ) in strings, escaped by 2 backslashes. 25 January 2020 \u00b6 Global Variables are now available in the Control Panel, which lets you keep configuration like API keys in a separate place from your Custom Actions and scripts while managing them at a central place. Changed the font of the WebhookScript editor, which resulted in uneven selection of text. 23 January 2020 \u00b6 You can now specify a source variable for JSONPath and Regex actions, so you can extract text from not only the request content. 12 January 2020 \u00b6 Switched to using Ace as editor for WebhookScript.","title":"News"},{"location":"news.html#news","text":"Subscribe below to receive updates about improvements and new features on Webhook.site as well as infrastructure changes like new IP addresses for e.g. firewall whitelisting. Expect a newsletter a few times a year at most. #mc_embed_signup form {text-align: left;padding: 0;}","title":"News"},{"location":"news.html#21-september-2022","text":"API: It's now possible to sort tokens returned by the Get Tokens endpoint. More info here: More info here","title":"21 September 2022"},{"location":"news.html#8-september-2022","text":"Fixed a bug in Webhook.site CLI (\"TypeError: Echo is not a constructor\" error.) - please upgrade the NPM package to 0.1.5. Please do not use async-http-client (User-Agent AHC/2.1.) It is abandoned and contains bugs that creates too many HTTP requests. We may block users of this package in the future.","title":"8 September 2022"},{"location":"news.html#17-august-2022","text":"As a result of customer abuse, we have decided to introduce rate limits on creation of URLs. The rate limit will be initially set to 10 per minute. After reaching this limit, the POST /token endpoint will return a 429 Too Many Requests response.","title":"17 August 2022"},{"location":"news.html#28-june-2022","text":"New Custom Action Type: Send push messages with Pushed.co. More info here .","title":"28 June 2022"},{"location":"news.html#24-june-2022","text":"New WebhookScript function: preg_match() - allows matching regex with custom regex options More info here New WebhookScript function: html_to_text() - converts html to text. A more aggressive version of html_strip_tags() More info here WebhookScript: regex_extract_first() now has a default parameter that is returned when there's no matches. The function still returns false by default when this third parameter is not set. More info here","title":"24 June 2022"},{"location":"news.html#21-may-2022","text":"New Custom Actions feature: It is now possible to delay queued actions by a specified amount of seconds. More info here","title":"21 May 2022"},{"location":"news.html#20-may-2022","text":"New WebhookScript function: is_numeric(). More info here Rate Limit Custom Action: It is now possible to specify a key to let you rate limit on a custom parameter. The request IP address ( $request.ip$ ) is still the default key. Action and Schedule error reports now specify the name, ID or alias of the Schedule or URL in question. Fixed a bug with Webhook.site Enterprise Custom Domain email validation.","title":"20 May 2022"},{"location":"news.html#19-april-2022","text":"Fixed a bug that prevented action error notifications from being sent to the users.","title":"19 April 2022"},{"location":"news.html#14-april-2022","text":"It is now possible to search requests and emails, using either the frontend or the API. The data can be filtered by a wide range of fields, queries. More info here .","title":"14 April 2022"},{"location":"news.html#30-march-2022","text":"Added documentation for the Test Action endpoint .","title":"30 March 2022"},{"location":"news.html#20-march-2022","text":"New Variables for Files: $request.file.[name].id$ and $request.file.[name].link$ (which returns direct link to download the file.)","title":"20 March 2022"},{"location":"news.html#14-march-2022","text":"Added num2hex , hex2num and hex2bin functions.","title":"14 March 2022"},{"location":"news.html#19-january-2022","text":"New Custom Actions: RabbitMQ Get & Publish, allows consuming and publishing to RabbitMQ Queues via Webhook.site Custom Actions.","title":"19 January 2022"},{"location":"news.html#21-december-2021","text":"Improved handling of binary data received from Send Request actions. Added a group_id parameter when creating or updating Tokens. Fixed an issue with the Twitter Custom Action. Requests to /token/:tokenId/requests are now throttled at 60 requests/minute.","title":"21 December 2021"},{"location":"news.html#24-november-2021","text":"WebhookScript: Fixed an issue that would cause strings to be interpreted as integers when encoding JSON.","title":"24 November 2021"},{"location":"news.html#30-october-2021","text":"Webhook.site's requests to itself, e.g. via Send Request action or Schedules by Webhook.site, now shows more clearly as coming from Webhook.site in the request list. Outgoing requests are now sent with a User-Agent header of Webhook.site/1.0 , which can be overwrited if specifying a User-Agent header manually. Error deleting Global Variables fixed. It is now possible for Webhook.site Enterprise customers to manage their Custom Domains from the control panel.","title":"30 October 2021"},{"location":"news.html#15-october-2021","text":"Fix invalid charset configurations causing issues saving requests.","title":"15 October 2021"},{"location":"news.html#4-october-2021","text":"Webhook.site now supports multiple sub-users on an account, with different access permissions, available to Webhook.site Enterprise users. For more information, please contact us .","title":"4 October 2021"},{"location":"news.html#29-september-2021","text":"Webhook.site CLI: New minor version, fixes a bug causing Invalid namespace errors.","title":"29 September 2021"},{"location":"news.html#17-september-2021","text":"New Custom Action Variable Modifiers: .html_decode , .url_encode , and .url_decode . More info here","title":"17 September 2021"},{"location":"news.html#12-september-2021","text":"New WebhookScript function: array_merge(), that merges two arrays into one. More info here New WebhookScript function: array_chunk(), that splits an array into chunks. More info here Functions dd(), dump() and echo() can now take a variable amount of arguments. More info here New WebhookScript date function: now(), which returns the current date in ISO format. More info here The date_interval() and date_interval_human() functions now defaults to \"now\" if the second parameter isn't specified. Script editor now has more space for outputs in full screen mode.","title":"12 September 2021"},{"location":"news.html#18-august-2021","text":"New API Endpoint: Get tokens, which returns a list of all tokens belonging to the account. More info here Fixed a bug that caused logins to be slow on especially older accounts. Fixed a bug that caused the FTP Upload action to error when the Port field was missing.","title":"18 August 2021"},{"location":"news.html#12-august-2021","text":"Google Sheet actions that consistently cause errors are now disabled automatically. Users are sent an email when this occurs.","title":"12 August 2021"},{"location":"news.html#30-july-2021","text":"New WebhookScript function: hmac(), which allows easily verifying strings using the HMAC method. More info here","title":"30 July 2021"},{"location":"news.html#14-july-2021","text":"New Custom Action: Replace Text, which allows easily making text replacements from variable input, and either overwrites an existing variable or creates a new one with the replaced content.","title":"14 July 2021"},{"location":"news.html#4-july-2021","text":"Fixed bug causing the \"Use Request Content\" checkbox in the Send Email action to not work.","title":"4 July 2021"},{"location":"news.html#15-june-2021","text":"New Custom Action: Twitter, so you can easily send tweets using Webhook.site. New WebhookScript functions: convert_kana(), string_slice(), string_upper(), string_lower(), string_title() More info here .","title":"15 June 2021"},{"location":"news.html#10-june-2021","text":"Individual Custom Actions can now be set as queued , which causes them to be run in the background, or asynchronously. More info here","title":"10 June 2021"},{"location":"news.html#7-june-2021","text":"Raised the limit for the amount of items processed by repeating actions to 100. Fixed a bug that would cause an error when updating notification settings in Control Panel. Fixed a bug where emails containing attachments would be stored.","title":"7 June 2021"},{"location":"news.html#23-may-2021","text":"API: It's now possible to filter requests by date. More info here","title":"23 May 2021"},{"location":"news.html#13-may-2021","text":"Documented clone_from option when using the API to create Tokens (URLs) WebhookScript: json_decode / json_encode now output error messages if they fail due to e.g. bad data.","title":"13 May 2021"},{"location":"news.html#1-may-2021","text":"Webhook.site Schedules now has an API. More info here Fixed a bug where URLs could be in two groups at the same time.","title":"1 May 2021"},{"location":"news.html#20-april-2021","text":"Added base64 encoding and decoding variable modifiers . More info here","title":"20 April 2021"},{"location":"news.html#11-april-2021","text":"New Custom Action and WebhookScript function: Don't Save, which marks the request so it is not saved in Webhook.site. The request can still be seen when it comes in, but will not be available through through the app later, or through the API. New Custom Action: Stop, which immediately stops Custom Action execution and returns the default response. The Extract Regex now supports the Repeat function. More info here .","title":"11 April 2021"},{"location":"news.html#7-april-2021","text":"New powerful feature: Repeating actions. Currently supported by the Extract JSONPath action, it is now possible to \"loop over\" items in a JSON array. More info here","title":"7 April 2021"},{"location":"news.html#2-april-2021","text":"It is now possible to enable or disable Custom Actions on a specific Token with the API. More info here or here . When exporting CSVs, the sorting selected in the application is now used automatically.","title":"2 April 2021"},{"location":"news.html#28-march-2021","text":"Today we've released the first version of the Webhook.site Command-line Interface (CLI), which allows you to forward requests from your Webhook.site URL to your local machine. More info here","title":"28 March 2021"},{"location":"news.html#24-march-2021","text":"WebhookScript: Added array_sort , array_join and json_escape functions. Added modifiers for variables. More info here","title":"24 March 2021"},{"location":"news.html#23-march-2021","text":"Control Panel: It's now possible to clone URLs, including their Custom Actions and other configuration. Control Panel: URLs with a password can be deleted more easily.","title":"23 March 2021"},{"location":"news.html#13-march-2021","text":"Control Panel: It's now possible to set a password for a Webhook.site URL in the Control Panel. Additionally, it's now possible to easily select and delete multiple URLs at once.","title":"13 March 2021"},{"location":"news.html#11-march-2021","text":"API: It's now possible to specify an alias when creating a URL via the API. More info here","title":"11 March 2021"},{"location":"news.html#6-march-2021","text":"New Action: Database Query - allows running database queries on PostgreSQL and MySQL servers, inserting, changing and fetching data in specific variables or JSON format. More info here","title":"6 March 2021"},{"location":"news.html#3-march-2021","text":"Webhook.site Premium has changed name to Webhook.site Pro. Functionality, pricing and everything else remains the same; it's a cosmetic change. More currencies are now supported for Webhook.site Pro subscriptions: GBP and EUR. To change the currency of an existing subscription, please contact Webhook.site Support . Custom Action output is now included in CSV Exports.","title":"3 March 2021"},{"location":"news.html#17-feburary-2021","text":"New Action: FTP(S) Upload - allows easy file upload to FTP servers.","title":"17 Feburary 2021"},{"location":"news.html#5-feburary-2021","text":"New WebhookScript functions: html_strip_tags, html_decode, html_encode, markdown_to_html. For more information, see here .","title":"5 Feburary 2021"},{"location":"news.html#1-feburary-2021","text":"Webhook.site has had intermittent downtime today due abuse from a user. We've identified them and blocked them from our systems. We're very sorry for the inconvenience.","title":"1 Feburary 2021"},{"location":"news.html#31-january-2021","text":"We have discontinued support for subscriptions via Patreon, who will need to create a new subscription. For more information please contact support .","title":"31 January 2021"},{"location":"news.html#19-january-2021","text":"Happy new year! New Action Type: Conditions 2.0. Now supports adding multiple conditions in a single action. New Action Type: Set Variable. Working similarly to the Store Global Variable action, this action sets a runtime variable that is not persisted. Actions can now individually be executed depending on a previous set of conditions. The Debug Output section in the Custom Actions builder now shows the action number and type from where it came. The Modify Response action now supports returning the response immediately.","title":"19 January 2021"},{"location":"news.html#5-december-2020","text":"Added new Custom Action: Store Global Variable, which does what it says on the tin. Bug fix: In Control Panel, the update date for each Global Variable now actually updates when a Global Variable is updated.","title":"5 December 2020"},{"location":"news.html#26-november-2020","text":"Webhook.site had downtime during the night. The problem has been fixed.","title":"26 November 2020"},{"location":"news.html#25-november-2020","text":"WebhookScript: It's now possible to store non-string values in set(). If the value is an array, however, it is JSON encoded first. WebhookScript: Added more examples for the date functions.","title":"25 November 2020"},{"location":"news.html#1-november-2020","text":"Added new Custom Action: Rate Limit, which lets you specify the maximum amount of requests in a given duration per IP to allow to request the Webhook.URL. Dates shown in the application now include seconds.","title":"1 November 2020"},{"location":"news.html#29-october-2020","text":"Added new Custom Action: Run SSH Command, which allows you to run SSH commands on your server.","title":"29 October 2020"},{"location":"news.html#22-october-2020","text":"WebhookScript: Added array_keys and array_values functions. For more information, see here .","title":"22 October 2020"},{"location":"news.html#19-october-2020","text":"It's now possible to set a timeout for the Send Request action. A new timeout parameter can also be given to the request() function in WebhookScript. Both places accept a value in seconds, with decimals. When exporting Custom Actions, if the URL has an alias, this is now used for the resulting filename.","title":"19 October 2020"},{"location":"news.html#11-october-2020","text":"It's now possible to export and import Custom Actions to a file using the new Import/Export buttons in the Custom Actions builder.","title":"11 October 2020"},{"location":"news.html#7-october-2020","text":"Added documentation for managing Custom Actions via the API. For more information, see here . Fixed a bug causing the Operator of an action to be reset to \"is equal to\" when testing.","title":"7 October 2020"},{"location":"news.html#6-october-2020","text":"Action output is no longer displayed twice when testing Condition actions.","title":"6 October 2020"},{"location":"news.html#24-september-2020","text":"New feature: Customize Auto-Cleanup threshold. This lets you specify how many requests or emails to keep for your URLs, if you want to keep fewer than the default amount of 10.000 for e.g. data protection reasons. Available from the brand new Settings page in Control Panel. The setting applies to all URLs that have the Auto Cleanup feature enabled - click Edit on a URL to enable it. New feature: URL groups, which lets you categorize your URLs into groups. Available from the URLs page in Control Panel. Click Edit on a URL to change its group. The URLs page in Control Panel has a new design which is less cluttered and allows you to more quickly change certain settings, URL aliases, and the description of a URL.","title":"24 September 2020"},{"location":"news.html#23-september-2020","text":"Regrettably, we saw a long period of downtime again from approx 20:00 to 05.40 UTC. The cause of the downtime was a user flooding their Webhook.site URLs with many gigabytes of data, causing the system to be overloaded. The same user was responsible for the downtime at 15 September 2020 and we've now terminated their license to use Webhook.site. We are also going prioritize changes that will automatically limit this kind of abuse, as well as move to another database system that will be more resilient.","title":"23 September 2020"},{"location":"news.html#15-september-2020","text":"We've seen spurious instances of downtime in the last 24 hours, the longest one lasting from approx. 14:00 to 14:50 UTC. We apologize for the inconvenience.","title":"15 September 2020"},{"location":"news.html#13-september-2020","text":"WebhookScript: Added override parameter to request(), which prevents content from the source request from being included.","title":"13 September 2020"},{"location":"news.html#3-september-2020","text":"WebhookScript: It is now possible to set a default for the var() function.","title":"3 September 2020"},{"location":"news.html#29-august-2020","text":"A bug in the Extract JSONPath action has been fixed so that it is now also possible to filter for keys containing punctuation, e.g. .data[?(@.Employee.FirstName)] .","title":"29 August 2020"},{"location":"news.html#18-august-2020","text":"WebhookScript: The to_date and date_format functions have been improved with timezone handling capabilities.","title":"18 August 2020"},{"location":"news.html#15-august-2020","text":"It's now possible to set a custom timeout for Schedules, up to 30 seconds.","title":"15 August 2020"},{"location":"news.html#8-august-2020","text":"You can now specify a custom Cron expression for your Webhook.site Schedule, in addition to the predefined intervals. This lets you decide exactly the hour, day and minute, etc., of when the schedule runs (based on UTC time.) It's now possible to enable email notifications for whenever a Schedule run fails to execute. To enable this, simply check the checkbox in Notification Settings. .","title":"8 August 2020"},{"location":"news.html#7-august-2020","text":"It's now possible to change the name of your Provider accounts to e.g. something that's easier to remember.","title":"7 August 2020"},{"location":"news.html#5-august-2020","text":"Webhook.site had an unplanned outage starting at 03.30 UTC. The site was down for around an hour.","title":"5 August 2020"},{"location":"news.html#2-august-2020","text":"It is now possible to specify a default value in the Extract JSONPath, Extract Regex and Extract XPath actions, so that if the extraction could not find the item, the variable is set to the default value that is defined. This field also takes variables. Request list is now sorted by Newest First per default. Custom Action number and type is now shown next to the output in the request details. If the Action was deleted, the UUID is shown instead.","title":"2 August 2020"},{"location":"news.html#1-august-2020","text":"It is now possible to enable email notifications for whenever a Custom Action encountered an error. To enable this, simply check the checkbox in Notification Settings. .","title":"1 August 2020"},{"location":"news.html#29-july-2020","text":"New WebhookScript function: trim(string) , which removes space, newline and tab characters from the beginning and end of a string, similar to PHP's own trim() function. New Schedule intervals: weekly (every monday), monthly (every 1st day of month)","title":"29 July 2020"},{"location":"news.html#25-july-2020","text":"New WebhookScript function: action(action_type, parameters) , to run Custom Actions inside a WebhookScript. More info here. It's now possible to download email attachments or uploaded files directly from the Webhook.site app. When sending a request using either the Send Request Custom Action or the request() function, the response is now truncated if the response content is over 20KiB. This means the whole contents is not visible in the app, but is still available to Actions.","title":"25 July 2020"},{"location":"news.html#16-july-2020","text":"Better file handling for emails: attached files are now also extracted as variables New file management functions for WebhookScript: files() retrieves a an array of all files, file_content(fileId) returns the content of a specific file. More info here.","title":"16 July 2020"},{"location":"news.html#5-july-2020","text":"New \"Resize Image\" action added for resizing images from either a file upload, email attachment or other Action. Better handling of downloaded files: the contents won't be shown in the debug overlay to prevent very large files from crashing the browser. Fixed a bug in the Dropbox provider returning creating an empty variable when downloading large files.","title":"5 July 2020"},{"location":"news.html#3-july-2020","text":"Webhook.site was down for about 30 minutes starting 07:20 UTC due to a memory upgrade. Max request size has been increased to 10 MB from 2 MB.","title":"3 July 2020"},{"location":"news.html#23-june-2020","text":"Added new Dropbox Custom Actions: Create Folder, Download, Upload, Delete, Get Link.","title":"23 June 2020"},{"location":"news.html#14-june-2020","text":"WebhookScript editor syntax highlighting improved with regards to multiline strings, escape characters and more New WebhookScript editor keyboard shortcut for saving (Mac: Cmd-S, Windows: Ctrl-S.) Fix WebhookScript fullscreen mode not being disengaged when saving URLs can now accept file uploads via multipart. File contents are available via variables: request.file.<formname>.content , request.file.<formname>.size , request.file.<formname>.filename New WebhookScript function: csv_to_array() , which converts a CSV file from a string to an array that can easily be parsed. Added an example script demoing file uploads and CSV parsing","title":"14 June 2020"},{"location":"news.html#7-june-2020","text":"Added new Slack Send Message Custom Action, which lets you send Slack messages via a Slack Webhook URL.","title":"7 June 2020"},{"location":"news.html#5-june-2020","text":"Added \"Formula Mode\" checkbox for Add and Update Row Google Sheets actions, which parses values like entered in a cell, and allows inserting formulas.","title":"5 June 2020"},{"location":"news.html#4-june-2020","text":"Added new endpoints to fetch the content and information about the latest request on a URL. See here and here .","title":"4 June 2020"},{"location":"news.html#2-june-2020","text":"Added Amazon Web Services CloudFront Cache Invalidation Custom Action. Added ability to toggle Auto Cleanup, which automatically cleans up requests/emails.","title":"2 June 2020"},{"location":"news.html#30-may-2020","text":"Added Discord Custom Action for sending messages. Read more in the docs","title":"30 May 2020"},{"location":"news.html#29-may-2020","text":"New set of date functions added to WebhookScript, namely: to_date() , date_format() , date_to_array() , date_interval() , date_interval_human() . Read more in the docs","title":"29 May 2020"},{"location":"news.html#25-may-2020","text":"New set of Amazon Web Services S3 actions: Create Bucket, Put Object, Delete Object and Get Object (which retrieves object contents to a Variable.)","title":"25 May 2020"},{"location":"news.html#22-may-2020","text":"New Schedule intervals: every 1 minute and every 10 minutes, in addition to the already existing ones .","title":"22 May 2020"},{"location":"news.html#17-may-2020","text":"New WebhookScript function: delay() , which lets you delay and execute WebhookScript code a set amount of seconds in the future. New WebhookScript function: exec() , which lets you dynamically execute code in a string. New WebhookScript function: import() , which downloads and executes code from a URL - great if you want to reuse your code, just put it on Github and import it with the URL!","title":"17 May 2020"},{"location":"news.html#16-may-2020","text":"It's now possible to set a Token (URL or email address) to expire automatically, even for Premium users. This is useful for creating tokens for automated testing.","title":"16 May 2020"},{"location":"news.html#3-may-2020","text":"New Google Sheets Custom Actions (Beta). 3 initial actions are available: Append Row, Update Row and Get Values, which allow you to manipulate or retrieve the values of a Google Sheet without writing any code.","title":"3 May 2020"},{"location":"news.html#24-april-2020","text":"New fullscreen mode in WebhookScript editor Ability to edit your user profile New WebhookScript functions: base64_encode() , base64_decode() .","title":"24 April 2020"},{"location":"news.html#21-april-2020","text":"New WebhookScript function: store() - creates or updates an existing Global Variable","title":"21 April 2020"},{"location":"news.html#20-april-2020","text":"New Global Variables section in Control Panel.","title":"20 April 2020"},{"location":"news.html#19-april-2020","text":"New WebhookScript math functions: max(), min(), mod(), pi(), rand() - for more, see the Reference","title":"19 April 2020"},{"location":"news.html#28-march-2020","text":"New feature: Webhook.site Schedules lets you request any URL \u2013 including Webhook.site URLs \u2013 automatically on an interval, so you can for example run Custom Actions every 5 minutes, or make a health check for your Web site. Send Request action request timeout has been raised from 5 to 10 seconds. Applies to both the Custom Action and the WebhookScript request() function.","title":"28 March 2020"},{"location":"news.html#24-march-2020","text":"New feature: API Keys can now be created so you can use the API with URLs that have the \"Require Authentication\" or \"Password\" options set. Fix: It's now possible to test Send Email actions before creating them. Prior to this, the Test button would not do anything for the Send Email action.","title":"24 March 2020"},{"location":"news.html#6-march-2020","text":"New feature: Extract XPath Custom Action with accompanying xpath() WebhookScript function. Read more.","title":"6 March 2020"},{"location":"news.html#29-feburary-2020","text":"Values are no longer required for Condition actions, so it's possible to compare an empty string or missing value. Fixed an issue where a tooltip in the Custom Actions modal would not disappear. Removed Beta label from WebhookScript.","title":"29 Feburary 2020"},{"location":"news.html#27-feburary-2020","text":"Fixed a bug where slashes at the end of Webhook.site Single Page App URLs didn't work. Fixed a bug where Copy To CURL sometimes wouldn't return a valid CURL command.","title":"27 Feburary 2020"},{"location":"news.html#26-feburary-2020","text":"It's no longer a requirement to specify a variable for the Send Request action.","title":"26 Feburary 2020"},{"location":"news.html#25-feburary-2020","text":"New feature: It's now possible to receive emails, which are treated like Webhooks \u2013 so you can automate emails with Custom Actions on Webhook.site. You can also test email deliverability using DKIM, DMARC and SPF validation. JSON formatting is now always enabled per default. The requests view is cleared after deleting the last request, and the tutorial text is shown.","title":"25 Feburary 2020"},{"location":"news.html#16-feburary-2020","text":"WebhookScript: Added regex_extract and regex_extract_first functions.","title":"16 Feburary 2020"},{"location":"news.html#15-feburary-2020","text":"WebhookScript: Added hash function.","title":"15 Feburary 2020"},{"location":"news.html#14-feburary-2020","text":"New feature: Export to CSV lets you export all requests on a given URL to a CSV file. Fixed a bug where duplicate in-app notifications would appear on new requests.","title":"14 Feburary 2020"},{"location":"news.html#12-feburary-2020","text":"WebhookScript: Added url_encode , url_decode , and query functions.","title":"12 Feburary 2020"},{"location":"news.html#8-febuary-2020","text":"New Custom Action type: Condition, which lets you conditionally stop a set of actions based on comparisons.","title":"8 Febuary 2020"},{"location":"news.html#28-january-2020","text":"WebhookScript now supports newline literals ( \\\\n ) in strings, escaped by 2 backslashes.","title":"28 January 2020"},{"location":"news.html#25-january-2020","text":"Global Variables are now available in the Control Panel, which lets you keep configuration like API keys in a separate place from your Custom Actions and scripts while managing them at a central place. Changed the font of the WebhookScript editor, which resulted in uneven selection of text.","title":"25 January 2020"},{"location":"news.html#23-january-2020","text":"You can now specify a source variable for JSONPath and Regex actions, so you can extract text from not only the request content.","title":"23 January 2020"},{"location":"news.html#12-january-2020","text":"Switched to using Ace as editor for WebhookScript.","title":"12 January 2020"},{"location":"open-source.html","text":"Webhook.site Open Source \u00b6 About the Open Source version \u00b6 There are two separate editions of Webhook.site: The code for the completely open-source, MIT-licensed version described on this page is available on https://github.com/fredsted/webhook.site , and can be self-hosted using e.g. Docker, is great for testing Webhooks, but doesn't include Webhook.site Pro features like Custom Actions. The cloud version of Webhook.site at https://webhook.site which has more features, some of them requiring a paid subscription. You can choose to run the Open Source version of Webhook.site either via Docker, or install it on any Web server with PHP7 support. Realtime updates \u00b6 laravel-echo-server or Pusher can be used to enable realtime updates. Take a look at the .env.example to see the environment variables required to configure it. For laravel-echo-server , the app expects socket.io to be available at the /socket.io path relative to the index page. This can be done with nginx like so: location /socket.io { proxy_pass http://127.0.0.1:6001; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; } Installation \u00b6 Docker (Recommended) \u00b6 The provided Docker Compose file sets up a complete environment that runs the Webhook.site image and all dependencies (Redis, Laravel Echo Server, etc.). Note that if running this in production, you should probably run a Redis server that persists data to disk. The Docker image is also not tuned for large amounts of traffic. Installation Guide \u00b6 Run docker-compose up The app will be available on http://127.0.0.1:8084 . Kubernetes \u00b6 A set of Kubernetes configuration files can be found in the kubernetes subfolder . Installation Guide \u00b6 Configure the resources, and apply with kubectl apply -f ./ . Web Server \u00b6 Requirements \u00b6 PHP 7 Redis Composer Web server \u2013 e.g. nginx, apache2 DigitalOcean has a guide on how to configure nginx . Installation Guide \u00b6 Run the following commands: composer install cp .env.example .env - adjust settings as needed php artisan key:generate Setup virtual host pointing to the /public folder.","title":"Open Source"},{"location":"open-source.html#webhooksite-open-source","text":"","title":"Webhook.site Open Source"},{"location":"open-source.html#about-the-open-source-version","text":"There are two separate editions of Webhook.site: The code for the completely open-source, MIT-licensed version described on this page is available on https://github.com/fredsted/webhook.site , and can be self-hosted using e.g. Docker, is great for testing Webhooks, but doesn't include Webhook.site Pro features like Custom Actions. The cloud version of Webhook.site at https://webhook.site which has more features, some of them requiring a paid subscription. You can choose to run the Open Source version of Webhook.site either via Docker, or install it on any Web server with PHP7 support.","title":"About the Open Source version"},{"location":"open-source.html#realtime-updates","text":"laravel-echo-server or Pusher can be used to enable realtime updates. Take a look at the .env.example to see the environment variables required to configure it. For laravel-echo-server , the app expects socket.io to be available at the /socket.io path relative to the index page. This can be done with nginx like so: location /socket.io { proxy_pass http://127.0.0.1:6001; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; }","title":"Realtime updates"},{"location":"open-source.html#installation","text":"","title":"Installation"},{"location":"open-source.html#docker-recommended","text":"The provided Docker Compose file sets up a complete environment that runs the Webhook.site image and all dependencies (Redis, Laravel Echo Server, etc.). Note that if running this in production, you should probably run a Redis server that persists data to disk. The Docker image is also not tuned for large amounts of traffic.","title":"Docker (Recommended)"},{"location":"open-source.html#installation-guide","text":"Run docker-compose up The app will be available on http://127.0.0.1:8084 .","title":"Installation Guide"},{"location":"open-source.html#kubernetes","text":"A set of Kubernetes configuration files can be found in the kubernetes subfolder .","title":"Kubernetes"},{"location":"open-source.html#installation-guide_1","text":"Configure the resources, and apply with kubectl apply -f ./ .","title":"Installation Guide"},{"location":"open-source.html#web-server","text":"","title":"Web Server"},{"location":"open-source.html#requirements","text":"PHP 7 Redis Composer Web server \u2013 e.g. nginx, apache2 DigitalOcean has a guide on how to configure nginx .","title":"Requirements"},{"location":"open-source.html#installation-guide_2","text":"Run the following commands: composer install cp .env.example .env - adjust settings as needed php artisan key:generate Setup virtual host pointing to the /public folder.","title":"Installation Guide"},{"location":"premium.html","text":"Webhook.site Premium \u00b6 Webhook.site Pro was formerly known as Premium. For more information, see here .","title":"Premium"},{"location":"premium.html#webhooksite-premium","text":"Webhook.site Pro was formerly known as Premium. For more information, see here .","title":"Webhook.site Premium"},{"location":"pro.html","text":"Webhook.site Pro and Enterprise \u00b6 With Webhook.site Pro and Webhook.site Enterprise subscriptions, you get more features that allows you to do more with your URL, as well as keep the data contained private and secure. table { width:100%; table-layout: fixed; overflow-wrap: break-word; display:table!important;} .center { text-align: center; } a.no-underline { text-decoration: none; } Free Pro Enterprise Custom Actions \u274c \u2705 \u2705 Schedules \u274c \u2705 \u2705 Custom Addresses \u274c \u2705 \u2705 Secure Data \u274c \u2705 \u2705 Permanent URLs \u274c \u2705 \u2705 Request Limit, per URL 500, non-rotating 10.000 10.000 CSV Export \u274c \u2705 \u2705 Free Email Support \u274c \u2705 \u2705 Custom Domain \u274c \u274c \u2705 Multi-User Support \u274c \u274c \u2705 Pricing (Excluding VAT) $16/month $160/year (save 20%) $49/month $499/year (save 20%) Subscribe Now Pro features \u00b6 Create workflows with Custom Actions \u00b6 Extract data, send emails and HTTP requests, upload files, run scripts and much more with Custom Actions that are run on each incoming request or email, with the Webhook.site Custom Actions builder. Native integrations for AWS, Google Sheets, Slack, Dropbox, MySQL and others. Read more Schedules \u00b6 Use Schedules by Webhook.site to send requests any URL or run your Custom Actions automatically on an interval. Use it for monitoring your Web site, clearing caches, and much more. Supports cron syntax, in addition to predefined intervals. Read more Custom URLs and Emails \u00b6 Get an address that's easy to remember: webhook.site/my-alias my-alias@email.webhook.site (With Webhook.site Enterprise , you can even use your own domain name.) Security \u00b6 Your data is secured in your account, and can be accessed by API Key or login. With the free version of Webhook.site, others can freely view the requests sent to your URL. Permanent URLs \u00b6 The URLs stay in your account forever, the 7-day auto expiration of the free version is removed. Store more than 500 requests or emails \u00b6 With the free version, URLs stop taking in new requests or emails after the 500 request limit is reached. With Pro, the limit of max 500 requests or emails per URL is removed and raised to 10.000 requests or emails, which are then rotated automatically. Unlimited URLs \u00b6 Create as many upgraded URLs or email addresses as you need at no extra cost. CSV Export \u00b6 Export all requests and emails to a CSV file. Email Support \u00b6 We\u2019ll help you troubleshoot and set up your Custom Actions and workflows. Enterprise features \u00b6 In addition to all Pro features, Enterprise also contains the following features: Custom Domain \u00b6 Use a your own (sub)domain for URLs and emails: mydomain.com/my-alias my-alias@email.mydomain.com Additionally, Webhook.site provides an SSL certificate which is included free of charge with your Enterprise subscription. Multi-User Support \u00b6 Ideal for larger organizations, share URLs, schedules, and other data with the rest of the organization. Configure individual users' access with User Types like Administrator and Viewer, so some users may only view the content.","title":"Pro & Enterprise"},{"location":"pro.html#webhooksite-pro-and-enterprise","text":"With Webhook.site Pro and Webhook.site Enterprise subscriptions, you get more features that allows you to do more with your URL, as well as keep the data contained private and secure. table { width:100%; table-layout: fixed; overflow-wrap: break-word; display:table!important;} .center { text-align: center; } a.no-underline { text-decoration: none; } Free Pro Enterprise Custom Actions \u274c \u2705 \u2705 Schedules \u274c \u2705 \u2705 Custom Addresses \u274c \u2705 \u2705 Secure Data \u274c \u2705 \u2705 Permanent URLs \u274c \u2705 \u2705 Request Limit, per URL 500, non-rotating 10.000 10.000 CSV Export \u274c \u2705 \u2705 Free Email Support \u274c \u2705 \u2705 Custom Domain \u274c \u274c \u2705 Multi-User Support \u274c \u274c \u2705 Pricing (Excluding VAT) $16/month $160/year (save 20%) $49/month $499/year (save 20%) Subscribe Now","title":"Webhook.site Pro and Enterprise"},{"location":"pro.html#pro-features","text":"","title":"Pro features"},{"location":"pro.html#create-workflows-with-custom-actions","text":"Extract data, send emails and HTTP requests, upload files, run scripts and much more with Custom Actions that are run on each incoming request or email, with the Webhook.site Custom Actions builder. Native integrations for AWS, Google Sheets, Slack, Dropbox, MySQL and others. Read more","title":"Create workflows with Custom Actions"},{"location":"pro.html#schedules","text":"Use Schedules by Webhook.site to send requests any URL or run your Custom Actions automatically on an interval. Use it for monitoring your Web site, clearing caches, and much more. Supports cron syntax, in addition to predefined intervals. Read more","title":"Schedules"},{"location":"pro.html#custom-urls-and-emails","text":"Get an address that's easy to remember: webhook.site/my-alias my-alias@email.webhook.site (With Webhook.site Enterprise , you can even use your own domain name.)","title":"Custom URLs and Emails"},{"location":"pro.html#security","text":"Your data is secured in your account, and can be accessed by API Key or login. With the free version of Webhook.site, others can freely view the requests sent to your URL.","title":"Security"},{"location":"pro.html#permanent-urls","text":"The URLs stay in your account forever, the 7-day auto expiration of the free version is removed.","title":"Permanent URLs"},{"location":"pro.html#store-more-than-500-requests-or-emails","text":"With the free version, URLs stop taking in new requests or emails after the 500 request limit is reached. With Pro, the limit of max 500 requests or emails per URL is removed and raised to 10.000 requests or emails, which are then rotated automatically.","title":"Store more than 500 requests or emails"},{"location":"pro.html#unlimited-urls","text":"Create as many upgraded URLs or email addresses as you need at no extra cost.","title":"Unlimited URLs"},{"location":"pro.html#csv-export","text":"Export all requests and emails to a CSV file.","title":"CSV Export"},{"location":"pro.html#email-support","text":"We\u2019ll help you troubleshoot and set up your Custom Actions and workflows.","title":"Email Support"},{"location":"pro.html#enterprise-features","text":"In addition to all Pro features, Enterprise also contains the following features:","title":"Enterprise features"},{"location":"pro.html#custom-domain","text":"Use a your own (sub)domain for URLs and emails: mydomain.com/my-alias my-alias@email.mydomain.com Additionally, Webhook.site provides an SSL certificate which is included free of charge with your Enterprise subscription.","title":"Custom Domain"},{"location":"pro.html#multi-user-support","text":"Ideal for larger organizations, share URLs, schedules, and other data with the rest of the organization. Configure individual users' access with User Types like Administrator and Viewer, so some users may only view the content.","title":"Multi-User Support"},{"location":"schedules.html","text":"Webhook.site Schedules \u00b6 Included in your Webhook.site Pro subscription is Webhook.site Schedules , which enables you to periodically send requests to specified URLs (also including your Webhook.site URLs, so your Custom Actions can be executed periodially) with a custom method, headers, and interval. Schedules can be used for a variety of purposes, including cache warming, uptime monitoring, automatic data transfer, etc. After creating the Schedule, you can view the logs for the last 100 scheduled requests. Per default, the timeout for the Schedule requests is 5 seconds, but can range from 1 to 30 seconds. A timeout or server error will trigger a Schedule error notification email, if enabled in Control Panel -> Settings. Schedules can also be managed using the Schedules API . Schedule Intervals \u00b6 In addition to be able to use a custom cron -style expression string, Schedules can be executed at the following preset intervals: 1 minute 5 minutes 10 minutes 1 hour 24 hours (at 00:00) Every week (mondays at 00:00) Every month (1st day at 00:00) Schedule intervals are based on UTC time.","title":"Schedules"},{"location":"schedules.html#webhooksite-schedules","text":"Included in your Webhook.site Pro subscription is Webhook.site Schedules , which enables you to periodically send requests to specified URLs (also including your Webhook.site URLs, so your Custom Actions can be executed periodially) with a custom method, headers, and interval. Schedules can be used for a variety of purposes, including cache warming, uptime monitoring, automatic data transfer, etc. After creating the Schedule, you can view the logs for the last 100 scheduled requests. Per default, the timeout for the Schedule requests is 5 seconds, but can range from 1 to 30 seconds. A timeout or server error will trigger a Schedule error notification email, if enabled in Control Panel -> Settings. Schedules can also be managed using the Schedules API .","title":"Webhook.site Schedules"},{"location":"schedules.html#schedule-intervals","text":"In addition to be able to use a custom cron -style expression string, Schedules can be executed at the following preset intervals: 1 minute 5 minutes 10 minutes 1 hour 24 hours (at 00:00) Every week (mondays at 00:00) Every month (1st day at 00:00) Schedule intervals are based on UTC time.","title":"Schedule Intervals"},{"location":"api/about.html","text":"Webhook.site API \u00b6 The Webhook.site API is public, free to use, doesn't require authentication and is relatively easy to use. Note Please note that fair use guidelines and other limitations apply as described by the Terms of Service . General Usage \u00b6 Base URL: https://webhook.site . We recommend that you set the Accept and Content-Type headers to application/json . Common Usages \u00b6 Get data sent to URL \u00b6 To retrieve the data that's sent to a Webhook.site URL or Email, you'll want to use the Get Requests endpoint. For example, with cURL , this returns the 50 latest requests in JSON format. curl https://webhook.site/token/a2a6a4ae-4130-4063-953a-84fa29d81d43/requests More info here . Create new URL/email address \u00b6 In the Webhook.site API, this is referred to as a token . To create a new one programmatically, you can use the API like this: curl -X POST https://webhook.site/token This will return information about the token in JSON format, including its UUID. Your URL will be available at the endpoint https://webhook.site/[token uuid] . If you are a Webhook.site Pro or Enterprise customer, you should provide an API key in order to associate the created token with your account automatically: curl -X POST -H 'Api-Key: 00000000-0000-0000-0000-000000000000' https://webhook.site/token More info here . Authentication \u00b6 While most functions in the Webhook.site API work without any authentication whatsoever, some endpoints do require authentication, or will return a 401 Unauthorized status code. API Key \u00b6 An API Key can be generated in the Control Panel, and provides access to Tokens that are either a) password protected or b) require login. Create API Key To specify an API Key in a request, use the Api-Key HTTP header: Api-Key: [your API Key] Password \u00b6 If you have set a password on a Webhook.site URL/token, to access the API resources for that token, you can use either of the following methods: Specify the password using the password query string: ?password=[your password] Set the password using HTTP Basic Auth, using the Authorization header. More info","title":"Usage & Authentication"},{"location":"api/about.html#webhooksite-api","text":"The Webhook.site API is public, free to use, doesn't require authentication and is relatively easy to use. Note Please note that fair use guidelines and other limitations apply as described by the Terms of Service .","title":"Webhook.site API"},{"location":"api/about.html#general-usage","text":"Base URL: https://webhook.site . We recommend that you set the Accept and Content-Type headers to application/json .","title":"General Usage"},{"location":"api/about.html#common-usages","text":"","title":"Common Usages"},{"location":"api/about.html#get-data-sent-to-url","text":"To retrieve the data that's sent to a Webhook.site URL or Email, you'll want to use the Get Requests endpoint. For example, with cURL , this returns the 50 latest requests in JSON format. curl https://webhook.site/token/a2a6a4ae-4130-4063-953a-84fa29d81d43/requests More info here .","title":"Get data sent to URL"},{"location":"api/about.html#create-new-urlemail-address","text":"In the Webhook.site API, this is referred to as a token . To create a new one programmatically, you can use the API like this: curl -X POST https://webhook.site/token This will return information about the token in JSON format, including its UUID. Your URL will be available at the endpoint https://webhook.site/[token uuid] . If you are a Webhook.site Pro or Enterprise customer, you should provide an API key in order to associate the created token with your account automatically: curl -X POST -H 'Api-Key: 00000000-0000-0000-0000-000000000000' https://webhook.site/token More info here .","title":"Create new URL/email address"},{"location":"api/about.html#authentication","text":"While most functions in the Webhook.site API work without any authentication whatsoever, some endpoints do require authentication, or will return a 401 Unauthorized status code.","title":"Authentication"},{"location":"api/about.html#api-key","text":"An API Key can be generated in the Control Panel, and provides access to Tokens that are either a) password protected or b) require login. Create API Key To specify an API Key in a request, use the Api-Key HTTP header: Api-Key: [your API Key]","title":"API Key"},{"location":"api/about.html#password","text":"If you have set a password on a Webhook.site URL/token, to access the API resources for that token, you can use either of the following methods: Specify the password using the password query string: ?password=[your password] Set the password using HTTP Basic Auth, using the Authorization header. More info","title":"Password"},{"location":"api/action-types.html","text":"The following is a list of the API names for Action Types, along with a list of parameters, and their validation requirements. extract_jsonpath \u00b6 jsonpath : required , string variable_name : required , string source : string default : string repeat : boolean extract_regex \u00b6 regex : required , string variable_name : required , string source : string default : string repeat : boolean extract_xpath \u00b6 xpath : required , string variable_name : required , string source : string default : string send_request \u00b6 url : required , string content : nullable, string method : nullable, in:POST,GET,OPTIONS,PUT,DELETE headers : nullable, string skip_ssl_verification : nullable, bool variable_name : string timeout : nullable, numeric, max:30 send_email \u00b6 sender : string recipient : required , string content : string is_html : boolean subject : required , string modify_response \u00b6 content : string status : string headers : string stop : bool script \u00b6 script : required , string rate_limit \u00b6 period : required , int count : required , int condition \u00b6 input : string operator : required , string, in:eq,neq,sw,ew,ct,nct,gt,gte,lt,lte value : string action : required , string, in:stop,continue,noop conditions \u00b6 conditions : required , array mode : required , string, in:one,all,none action : required , string, in:stop,continue,noop google_sheets_add_row \u00b6 provider_id : string, required spreadsheet_id : string, required range : string, required values : string, required formula_mode : bool google_sheets_update_row \u00b6 provider_id : string, required spreadsheet_id : string, required range : string, required values : string, required formula_mode : bool google_sheets_get_values \u00b6 provider_id : string, required spreadsheet_id : string, required range : string, required variable_name : required , string aws_s3_create_bucket \u00b6 provider_id : string, required region : string, required bucket_name : string, required canned_acl : string, in:private,public-read,public-read-write,authenticated-read aws_s3_put_object \u00b6 provider_id : string, required region : string, required bucket_name : string object_key : string, required body : string, required canned_acl : string, in:private,public-read,public-read-write,authenticated-read aws_s3_delete_object \u00b6 provider_id : string, required region : string bucket_name : string, required object_key : string, required aws_s3_get_object \u00b6 provider_id : string, required region : string bucket_name : string, required object_key : string, required variable_name : string, required , min:1 aws_s3_get_object \u00b6 provider_id : string, required region : string bucket_name : string, required object_key : string, required variable_name : string, required , min:1 aws_cf_invalidate \u00b6 provider_id : required , int distribution_id : required , string paths : required , string discord_send_message \u00b6 provider_id : required , string content : required , string username : string avatar_url : url slack_send_message \u00b6 webhook_url : required , url raw : bool content : required , string dropbox_create_folder \u00b6 provider_id : string, required path : string, required dropbox_delete \u00b6 provider_id : string, required path : string, required dropbox_download_file \u00b6 provider_id : string, required path : string, required variable_name : string, required dropbox_upload_file \u00b6 provider_id : string, required path : string, required body : string, required mode : string, required , in:add,overwrite,update dropbox_get_link \u00b6 provider_id : string, required path : string, required variable_name : string, required image_resize \u00b6 source : string, required width : string, required _without:height height : string, required _without:width aspect_ratio : bool, required variable_name : string, required ssh_run_command \u00b6 provider_id : string, required host : required , string port : number, min:1, max:65535 username : required , string command : required , string variable_name : string store_global_variable \u00b6 name : required , string value : nullable, string set_variable \u00b6 name : required , string value : nullable, string ftp_upload \u00b6 host : required , string port : number, min:1, max:65535 password : required , string username : required , string path : required , string content : required , string ssl : bool passive : bool database \u00b6 type : required , in:mysql,pgsql host : required , string port : number, min:1, max:65535 database : required , string password : string username : required , string statement : required , string params : array variable_name : string dont_save \u00b6 No parameters for dont_save . stop \u00b6 No parameters for stop . twitter_tweet \u00b6 provider_id : required , string tweet : required , string rabbitmq_get \u00b6 host : string, required port : int username : string, required password : string, required vhost : string queue : string, required ssl : boolean variable_name : string rabbitmq_publish \u00b6 host : string, required port : int username : string, required password : string, required vhost : string queue : string, required ssl : boolean message : string, required","title":"Action types"},{"location":"api/action-types.html#extract_jsonpath","text":"jsonpath : required , string variable_name : required , string source : string default : string repeat : boolean","title":"extract_jsonpath"},{"location":"api/action-types.html#extract_regex","text":"regex : required , string variable_name : required , string source : string default : string repeat : boolean","title":"extract_regex"},{"location":"api/action-types.html#extract_xpath","text":"xpath : required , string variable_name : required , string source : string default : string","title":"extract_xpath"},{"location":"api/action-types.html#send_request","text":"url : required , string content : nullable, string method : nullable, in:POST,GET,OPTIONS,PUT,DELETE headers : nullable, string skip_ssl_verification : nullable, bool variable_name : string timeout : nullable, numeric, max:30","title":"send_request"},{"location":"api/action-types.html#send_email","text":"sender : string recipient : required , string content : string is_html : boolean subject : required , string","title":"send_email"},{"location":"api/action-types.html#modify_response","text":"content : string status : string headers : string stop : bool","title":"modify_response"},{"location":"api/action-types.html#script","text":"script : required , string","title":"script"},{"location":"api/action-types.html#rate_limit","text":"period : required , int count : required , int","title":"rate_limit"},{"location":"api/action-types.html#condition","text":"input : string operator : required , string, in:eq,neq,sw,ew,ct,nct,gt,gte,lt,lte value : string action : required , string, in:stop,continue,noop","title":"condition"},{"location":"api/action-types.html#conditions","text":"conditions : required , array mode : required , string, in:one,all,none action : required , string, in:stop,continue,noop","title":"conditions"},{"location":"api/action-types.html#google_sheets_add_row","text":"provider_id : string, required spreadsheet_id : string, required range : string, required values : string, required formula_mode : bool","title":"google_sheets_add_row"},{"location":"api/action-types.html#google_sheets_update_row","text":"provider_id : string, required spreadsheet_id : string, required range : string, required values : string, required formula_mode : bool","title":"google_sheets_update_row"},{"location":"api/action-types.html#google_sheets_get_values","text":"provider_id : string, required spreadsheet_id : string, required range : string, required variable_name : required , string","title":"google_sheets_get_values"},{"location":"api/action-types.html#aws_s3_create_bucket","text":"provider_id : string, required region : string, required bucket_name : string, required canned_acl : string, in:private,public-read,public-read-write,authenticated-read","title":"aws_s3_create_bucket"},{"location":"api/action-types.html#aws_s3_put_object","text":"provider_id : string, required region : string, required bucket_name : string object_key : string, required body : string, required canned_acl : string, in:private,public-read,public-read-write,authenticated-read","title":"aws_s3_put_object"},{"location":"api/action-types.html#aws_s3_delete_object","text":"provider_id : string, required region : string bucket_name : string, required object_key : string, required","title":"aws_s3_delete_object"},{"location":"api/action-types.html#aws_s3_get_object","text":"provider_id : string, required region : string bucket_name : string, required object_key : string, required variable_name : string, required , min:1","title":"aws_s3_get_object"},{"location":"api/action-types.html#aws_s3_get_object_1","text":"provider_id : string, required region : string bucket_name : string, required object_key : string, required variable_name : string, required , min:1","title":"aws_s3_get_object"},{"location":"api/action-types.html#aws_cf_invalidate","text":"provider_id : required , int distribution_id : required , string paths : required , string","title":"aws_cf_invalidate"},{"location":"api/action-types.html#discord_send_message","text":"provider_id : required , string content : required , string username : string avatar_url : url","title":"discord_send_message"},{"location":"api/action-types.html#slack_send_message","text":"webhook_url : required , url raw : bool content : required , string","title":"slack_send_message"},{"location":"api/action-types.html#dropbox_create_folder","text":"provider_id : string, required path : string, required","title":"dropbox_create_folder"},{"location":"api/action-types.html#dropbox_delete","text":"provider_id : string, required path : string, required","title":"dropbox_delete"},{"location":"api/action-types.html#dropbox_download_file","text":"provider_id : string, required path : string, required variable_name : string, required","title":"dropbox_download_file"},{"location":"api/action-types.html#dropbox_upload_file","text":"provider_id : string, required path : string, required body : string, required mode : string, required , in:add,overwrite,update","title":"dropbox_upload_file"},{"location":"api/action-types.html#dropbox_get_link","text":"provider_id : string, required path : string, required variable_name : string, required","title":"dropbox_get_link"},{"location":"api/action-types.html#image_resize","text":"source : string, required width : string, required _without:height height : string, required _without:width aspect_ratio : bool, required variable_name : string, required","title":"image_resize"},{"location":"api/action-types.html#ssh_run_command","text":"provider_id : string, required host : required , string port : number, min:1, max:65535 username : required , string command : required , string variable_name : string","title":"ssh_run_command"},{"location":"api/action-types.html#store_global_variable","text":"name : required , string value : nullable, string","title":"store_global_variable"},{"location":"api/action-types.html#set_variable","text":"name : required , string value : nullable, string","title":"set_variable"},{"location":"api/action-types.html#ftp_upload","text":"host : required , string port : number, min:1, max:65535 password : required , string username : required , string path : required , string content : required , string ssl : bool passive : bool","title":"ftp_upload"},{"location":"api/action-types.html#database","text":"type : required , in:mysql,pgsql host : required , string port : number, min:1, max:65535 database : required , string password : string username : required , string statement : required , string params : array variable_name : string","title":"database"},{"location":"api/action-types.html#dont_save","text":"No parameters for dont_save .","title":"dont_save"},{"location":"api/action-types.html#stop","text":"No parameters for stop .","title":"stop"},{"location":"api/action-types.html#twitter_tweet","text":"provider_id : required , string tweet : required , string","title":"twitter_tweet"},{"location":"api/action-types.html#rabbitmq_get","text":"host : string, required port : int username : string, required password : string, required vhost : string queue : string, required ssl : boolean variable_name : string","title":"rabbitmq_get"},{"location":"api/action-types.html#rabbitmq_publish","text":"host : string, required port : int username : string, required password : string, required vhost : string queue : string, required ssl : boolean message : string, required","title":"rabbitmq_publish"},{"location":"api/custom-actions.html","text":"API Endpoints: Custom Actions \u00b6 Action Types \u00b6 Click here for a list of the API names and parameters for Action Types . Actions \u00b6 Create Custom Action \u00b6 Can require authentication. POST /token/:token_id/actions type is the name of an Action Type . order specified which order the action is executed in. parameters can vary depending on the Action Type . disabled if set to true, the action is skipped upon execution. Request \u00b6 Example 1: Condition action \u00b6 { \"type\" : \"condition\" , \"order\" : 3 , \"disabled\" : false , \"parameters\" : { \"input\" : \"$request.content$\" , \"operator\" : \"eq\" , \"value\" : \"\" , \"action\" : \"stop\" } } Example 2: WebhookScript action \u00b6 { \"type\" : \"script\" , \"order\" : 1 , \"parameters\" : { \"script\" : \"expiry = '2021-08-01T00:00:00.000000Z'\\nnow = to_date('now')\\n\\nif (date_interval(now, expiry) < 0) {\\n // Respond with 410 Gone\\n respond('This content is no longer available.', 410)\\n}\\n\" } } Example 3: Creating WebhookScript action with Python 3 \u00b6 Same script as Example 2. Requires the requests module, which can be installed using pip install requests . import requests script = \"\"\" expiry = '2021-08-01T00:00:00.000000Z' now = to_date('now') if (date_interval(now, expiry) < 0) { // Respond with 410 Gone respond('This content is no longer available.', 410) } \"\"\" data = { \"type\" : \"script\" , \"order\" : 1 , \"parameters\" : { \"script\" : script } } r = requests . post ( 'https://webhook.site/token/7d63959e-4fec-49bd-90dc-a4615722825e/actions' , json = data ) Response \u00b6 { \"uuid\" : \"7ae324d6-c65b-416b-8f83-18fb89e0c740\" , \"token_id\" : \"fe18d303-631d-4620-acb3-5c0b1b0b876d\" , \"type\" : \"condition\" , \"order\" : 3 , \"disabled\" : null , \"parameters\" : { \"input\" : \"$request.content$\" , \"operator\" : \"eq\" , \"value\" : \"\" , \"action\" : \"stop\" } } Get Custom Actions \u00b6 Can require authentication. GET /token/:token_id/actions Response \u00b6 200 OK { \"data\" : [ { \"uuid\" : \"52055928-099a-44dc-ba31-e8d808b98ea1\" , \"token_id\" : \"fe18d303-631d-4620-acb3-5c0b1b0b876d\" , \"type\" : \"condition\" , \"order\" : 1 , \"disabled\" : false , \"parameters\" : { \"input\" : \"$request.header.content-type$\" , \"operator\" : \"nct\" , \"value\" : \"application/json\" , \"action\" : \"stop\" } }, { \"uuid\" : \"27b07ca7-ea83-48f5-b376-2372cf25d3a1\" , \"token_id\" : \"fe18d303-631d-4620-acb3-5c0b1b0b876d\" , \"type\" : \"condition\" , \"order\" : 2 , \"disabled\" : null , \"parameters\" : { \"input\" : \"$request.content$\" , \"operator\" : \"eq\" , \"value\" : \"\" , \"action\" : \"stop\" } } ] } Update Custom Action \u00b6 Can require authentication. PUT /token/:token_id/actions/:action_id Request \u00b6 See Create Custom Action endpoint. Response \u00b6 See Create Custom Action endpoint. Test Custom Action \u00b6 Can require authentication. Request \u00b6 POST /token/:token_id/test-action Query string parameters \u00b6 request_id : A request ID to base the test run on. If not set, uses default request variables. action_id : When set, overwrites the parameters of an existing action. If not, tests a temporary new, empty action with ID 00000000-0000-4000-0000-000000000000 . { \"type\" : \"script\" , \"order\" : 2 , \"parameters\" : { \"script\" : \"echo('hello world')\" } } Response \u00b6 200 OK { \"success\" : true , \"result\" : { \"output\" : { \"08529a4f-ad84-450b-977a-1d126d6ca6b7\" : [ \"Set runtime variable $aaa$ to \\\"example\\\"\" ], \"00000000-0000-4000-0000-000000000000\" : [ \"hello world\" ] }, \"response\" : { \"content\" : null , \"status\" : null , \"headers\" : null }, \"variables\" : { \"request.header.content-length\" : \"57362\" , \"request.header.user-agent\" : \"Paw/3.3.5 (Macintosh; OS X/11.6.2) GCDHTTPRequest\" , \"request.header.connection\" : \"close\" , \"request.header.host\" : \"webhook.site\" , \"request.header.content-type\" : \"application/json\" , \"request.uuid\" : \"87240a26-1426-45dd-9b4c-961a323652a9\" , \"request.token_id\" : \"7fc77812-9efe-41b6-9365-e2c1fb5feb62\" , \"request.content\" : \"\" , \"request.date\" : \"2022-03-20 10:18:58\" , \"request.timestamp\" : 1647771538 , \"request.hostname\" : \"webhook.site\" , \"request.size\" : 0 , \"request.type\" : \"web\" , \"request.ip\" : \"86.52.35.76\" , \"request.user_agent\" : \"Paw/3.3.5 (Macintosh; OS X/11.6.2) GCDHTTPRequest\" , \"request.url\" : \"https://webhook.site/7fc77812-9efe-41b6-9365-e2c1fb5feb62\" , \"request.method\" : \"POST\" , } } } Delete Custom Action \u00b6 Can require authentication. DELETE /token/:token_id/actions/:action_id Toggle Custom Actions \u00b6 Can require authentication. PUT /token/:token_id/actions/toggle This endpoint toggles whether actions are enabled on a specific token. Response \u00b6 200 OK { \"enabled\" : true }","title":"Custom Actions"},{"location":"api/custom-actions.html#api-endpoints-custom-actions","text":"","title":"API Endpoints: Custom Actions"},{"location":"api/custom-actions.html#action-types","text":"Click here for a list of the API names and parameters for Action Types .","title":"Action Types"},{"location":"api/custom-actions.html#actions","text":"","title":"Actions"},{"location":"api/custom-actions.html#create-custom-action","text":"Can require authentication. POST /token/:token_id/actions type is the name of an Action Type . order specified which order the action is executed in. parameters can vary depending on the Action Type . disabled if set to true, the action is skipped upon execution.","title":"Create Custom Action"},{"location":"api/custom-actions.html#request","text":"","title":"Request"},{"location":"api/custom-actions.html#example-1-condition-action","text":"{ \"type\" : \"condition\" , \"order\" : 3 , \"disabled\" : false , \"parameters\" : { \"input\" : \"$request.content$\" , \"operator\" : \"eq\" , \"value\" : \"\" , \"action\" : \"stop\" } }","title":"Example 1: Condition action"},{"location":"api/custom-actions.html#example-2-webhookscript-action","text":"{ \"type\" : \"script\" , \"order\" : 1 , \"parameters\" : { \"script\" : \"expiry = '2021-08-01T00:00:00.000000Z'\\nnow = to_date('now')\\n\\nif (date_interval(now, expiry) < 0) {\\n // Respond with 410 Gone\\n respond('This content is no longer available.', 410)\\n}\\n\" } }","title":"Example 2: WebhookScript action"},{"location":"api/custom-actions.html#example-3-creating-webhookscript-action-with-python-3","text":"Same script as Example 2. Requires the requests module, which can be installed using pip install requests . import requests script = \"\"\" expiry = '2021-08-01T00:00:00.000000Z' now = to_date('now') if (date_interval(now, expiry) < 0) { // Respond with 410 Gone respond('This content is no longer available.', 410) } \"\"\" data = { \"type\" : \"script\" , \"order\" : 1 , \"parameters\" : { \"script\" : script } } r = requests . post ( 'https://webhook.site/token/7d63959e-4fec-49bd-90dc-a4615722825e/actions' , json = data )","title":"Example 3: Creating WebhookScript action with Python 3"},{"location":"api/custom-actions.html#response","text":"{ \"uuid\" : \"7ae324d6-c65b-416b-8f83-18fb89e0c740\" , \"token_id\" : \"fe18d303-631d-4620-acb3-5c0b1b0b876d\" , \"type\" : \"condition\" , \"order\" : 3 , \"disabled\" : null , \"parameters\" : { \"input\" : \"$request.content$\" , \"operator\" : \"eq\" , \"value\" : \"\" , \"action\" : \"stop\" } }","title":"Response"},{"location":"api/custom-actions.html#get-custom-actions","text":"Can require authentication. GET /token/:token_id/actions","title":"Get Custom Actions"},{"location":"api/custom-actions.html#response_1","text":"200 OK { \"data\" : [ { \"uuid\" : \"52055928-099a-44dc-ba31-e8d808b98ea1\" , \"token_id\" : \"fe18d303-631d-4620-acb3-5c0b1b0b876d\" , \"type\" : \"condition\" , \"order\" : 1 , \"disabled\" : false , \"parameters\" : { \"input\" : \"$request.header.content-type$\" , \"operator\" : \"nct\" , \"value\" : \"application/json\" , \"action\" : \"stop\" } }, { \"uuid\" : \"27b07ca7-ea83-48f5-b376-2372cf25d3a1\" , \"token_id\" : \"fe18d303-631d-4620-acb3-5c0b1b0b876d\" , \"type\" : \"condition\" , \"order\" : 2 , \"disabled\" : null , \"parameters\" : { \"input\" : \"$request.content$\" , \"operator\" : \"eq\" , \"value\" : \"\" , \"action\" : \"stop\" } } ] }","title":"Response"},{"location":"api/custom-actions.html#update-custom-action","text":"Can require authentication. PUT /token/:token_id/actions/:action_id","title":"Update Custom Action"},{"location":"api/custom-actions.html#request_1","text":"See Create Custom Action endpoint.","title":"Request"},{"location":"api/custom-actions.html#response_2","text":"See Create Custom Action endpoint.","title":"Response"},{"location":"api/custom-actions.html#test-custom-action","text":"Can require authentication.","title":"Test Custom Action"},{"location":"api/custom-actions.html#request_2","text":"POST /token/:token_id/test-action","title":"Request"},{"location":"api/custom-actions.html#query-string-parameters","text":"request_id : A request ID to base the test run on. If not set, uses default request variables. action_id : When set, overwrites the parameters of an existing action. If not, tests a temporary new, empty action with ID 00000000-0000-4000-0000-000000000000 . { \"type\" : \"script\" , \"order\" : 2 , \"parameters\" : { \"script\" : \"echo('hello world')\" } }","title":"Query string parameters"},{"location":"api/custom-actions.html#response_3","text":"200 OK { \"success\" : true , \"result\" : { \"output\" : { \"08529a4f-ad84-450b-977a-1d126d6ca6b7\" : [ \"Set runtime variable $aaa$ to \\\"example\\\"\" ], \"00000000-0000-4000-0000-000000000000\" : [ \"hello world\" ] }, \"response\" : { \"content\" : null , \"status\" : null , \"headers\" : null }, \"variables\" : { \"request.header.content-length\" : \"57362\" , \"request.header.user-agent\" : \"Paw/3.3.5 (Macintosh; OS X/11.6.2) GCDHTTPRequest\" , \"request.header.connection\" : \"close\" , \"request.header.host\" : \"webhook.site\" , \"request.header.content-type\" : \"application/json\" , \"request.uuid\" : \"87240a26-1426-45dd-9b4c-961a323652a9\" , \"request.token_id\" : \"7fc77812-9efe-41b6-9365-e2c1fb5feb62\" , \"request.content\" : \"\" , \"request.date\" : \"2022-03-20 10:18:58\" , \"request.timestamp\" : 1647771538 , \"request.hostname\" : \"webhook.site\" , \"request.size\" : 0 , \"request.type\" : \"web\" , \"request.ip\" : \"86.52.35.76\" , \"request.user_agent\" : \"Paw/3.3.5 (Macintosh; OS X/11.6.2) GCDHTTPRequest\" , \"request.url\" : \"https://webhook.site/7fc77812-9efe-41b6-9365-e2c1fb5feb62\" , \"request.method\" : \"POST\" , } } }","title":"Response"},{"location":"api/custom-actions.html#delete-custom-action","text":"Can require authentication. DELETE /token/:token_id/actions/:action_id","title":"Delete Custom Action"},{"location":"api/custom-actions.html#toggle-custom-actions","text":"Can require authentication. PUT /token/:token_id/actions/toggle This endpoint toggles whether actions are enabled on a specific token.","title":"Toggle Custom Actions"},{"location":"api/custom-actions.html#response_4","text":"200 OK { \"enabled\" : true }","title":"Response"},{"location":"api/examples.html","text":"API Examples \u00b6 Before using the API, please first create an API key here . cURL \u00b6 Quick upload file to Token \u00b6 Uploads the file example.png from the current directory. curl -F 'file=@example.png' https://webhook.site/00000000-0000-0000-0000-000000000000 To download the file, click the Download link in the Webhook.site interface, or via the API, use the download endpoint . PHP \u00b6 Create Token (URL/Email address) \u00b6 Creates a Webhook.site Token and outputs its Web URL. You'll need to replace the API key. <?php $apiKey = '00000000-0000-0000-0000-000000000000' ; // Create a stream context $context = stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Api-Key: $apiKey\\r\\n \" ]]); // Send API request $response = json_decode ( file_get_contents ( 'https://webhook.site/token' , false , $context ), true ); echo \"URL Created: https://webhook.site/ { $response [ 'uuid' ] } \" ; Fetch latest data \u00b6 Simple example of how to loop through the latest requests or emails sent to a Webhook.site URL or email and display in a friendly manner. You'll need to replace the API key and token ID. <?php $apiKey = '00000000-0000-0000-0000-000000000000' ; $tokenId = '00000000-0000-0000-0000-000000000000' ; $url = \"https://webhook.site/token/ $tokenId /requests?sorting=newest\" ; $context = stream_context_create ([ 'http' => [ 'header' => \"Api-Key: $apiKey\\r\\n \" ]]); $response = json_decode ( file_get_contents ( $url , false , $context ), true ); foreach ( $response [ 'data' ] as $req ) { echo \" \\n \" ; echo \"ID : { $req [ 'uuid' ] } \\n \" ; echo \"Type : { $req [ 'type' ] } \\n \" ; echo \"Date : { $req [ 'created_at' ] } \\n \" ; echo \"User-Agent: { $req [ 'headers' ][ 'user-agent' ][ 0 ] ?? 'Unknown' } \\n \" ; echo \"--- content begin --- \\n \" ; echo $req [ 'content' ]; echo \" \\n --- content end --- \\n \" ; } Example output after running e.g. curl -X POST https://webhook.site/00000000-0000-0000-0000-000000000000 -d \"Hello world\" : ID : 58980c49-7e09-4cd8-8d64-bbfcfc38a1c5 Type : web Date : 2021-12-01 19:24:10 User-Agent: Paw/3.3.1 (Macintosh; OS X/11.6.0) GCDHTTPRequest --- content begin --- Hello world! --- content end --- Python \u00b6 Create Token (URL/Email address) \u00b6 Requires the requests module, which can be installed using pip install requests . You'll also need to replace the API key. import requests json = { \"default_status\" : 200 , \"default_content\" : \"Hello world!\" , \"default_content_type\" : \"text/html\" , } headers = { \"api-key\" : \"00000000-0000-0000-0000-000000000000\" } r = requests . post ( 'https://webhook.site/token' , json = json , headers = headers ) print ( 'URL Created: https://webhook.site/' + r . json ()[ 'uuid' ]) Fetch latest data \u00b6 Requires the requests module, which can be installed using pip install requests . Prints the 50 latest requests sent to a given URL to console. import requests token_id = \"00000000-0000-0000-0000-000000000000\" headers = { \"api-key\" : \"00000000-0000-0000-0000-000000000000\" } r = requests . get ( 'https://webhook.site/token/' + token_id + '/requests?sorting=newest' , headers = headers ) for request in r . json ()[ 'data' ]: print ( request )","title":"Script Examples"},{"location":"api/examples.html#api-examples","text":"Before using the API, please first create an API key here .","title":"API Examples"},{"location":"api/examples.html#curl","text":"","title":"cURL"},{"location":"api/examples.html#quick-upload-file-to-token","text":"Uploads the file example.png from the current directory. curl -F 'file=@example.png' https://webhook.site/00000000-0000-0000-0000-000000000000 To download the file, click the Download link in the Webhook.site interface, or via the API, use the download endpoint .","title":"Quick upload file to Token"},{"location":"api/examples.html#php","text":"","title":"PHP"},{"location":"api/examples.html#create-token-urlemail-address","text":"Creates a Webhook.site Token and outputs its Web URL. You'll need to replace the API key. <?php $apiKey = '00000000-0000-0000-0000-000000000000' ; // Create a stream context $context = stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Api-Key: $apiKey\\r\\n \" ]]); // Send API request $response = json_decode ( file_get_contents ( 'https://webhook.site/token' , false , $context ), true ); echo \"URL Created: https://webhook.site/ { $response [ 'uuid' ] } \" ;","title":"Create Token (URL/Email address)"},{"location":"api/examples.html#fetch-latest-data","text":"Simple example of how to loop through the latest requests or emails sent to a Webhook.site URL or email and display in a friendly manner. You'll need to replace the API key and token ID. <?php $apiKey = '00000000-0000-0000-0000-000000000000' ; $tokenId = '00000000-0000-0000-0000-000000000000' ; $url = \"https://webhook.site/token/ $tokenId /requests?sorting=newest\" ; $context = stream_context_create ([ 'http' => [ 'header' => \"Api-Key: $apiKey\\r\\n \" ]]); $response = json_decode ( file_get_contents ( $url , false , $context ), true ); foreach ( $response [ 'data' ] as $req ) { echo \" \\n \" ; echo \"ID : { $req [ 'uuid' ] } \\n \" ; echo \"Type : { $req [ 'type' ] } \\n \" ; echo \"Date : { $req [ 'created_at' ] } \\n \" ; echo \"User-Agent: { $req [ 'headers' ][ 'user-agent' ][ 0 ] ?? 'Unknown' } \\n \" ; echo \"--- content begin --- \\n \" ; echo $req [ 'content' ]; echo \" \\n --- content end --- \\n \" ; } Example output after running e.g. curl -X POST https://webhook.site/00000000-0000-0000-0000-000000000000 -d \"Hello world\" : ID : 58980c49-7e09-4cd8-8d64-bbfcfc38a1c5 Type : web Date : 2021-12-01 19:24:10 User-Agent: Paw/3.3.1 (Macintosh; OS X/11.6.0) GCDHTTPRequest --- content begin --- Hello world! --- content end ---","title":"Fetch latest data"},{"location":"api/examples.html#python","text":"","title":"Python"},{"location":"api/examples.html#create-token-urlemail-address_1","text":"Requires the requests module, which can be installed using pip install requests . You'll also need to replace the API key. import requests json = { \"default_status\" : 200 , \"default_content\" : \"Hello world!\" , \"default_content_type\" : \"text/html\" , } headers = { \"api-key\" : \"00000000-0000-0000-0000-000000000000\" } r = requests . post ( 'https://webhook.site/token' , json = json , headers = headers ) print ( 'URL Created: https://webhook.site/' + r . json ()[ 'uuid' ])","title":"Create Token (URL/Email address)"},{"location":"api/examples.html#fetch-latest-data_1","text":"Requires the requests module, which can be installed using pip install requests . Prints the 50 latest requests sent to a given URL to console. import requests token_id = \"00000000-0000-0000-0000-000000000000\" headers = { \"api-key\" : \"00000000-0000-0000-0000-000000000000\" } r = requests . get ( 'https://webhook.site/token/' + token_id + '/requests?sorting=newest' , headers = headers ) for request in r . json ()[ 'data' ]: print ( request )","title":"Fetch latest data"},{"location":"api/schedules.html","text":"API Endpoints: Schedules \u00b6 Create schedule \u00b6 Requires authentication. Request \u00b6 POST /schedules name The name of the schedule. interval One of the following interval strings: monthly , weekly , daily , hourly , 10-minute , 5-minute , 1-minute , cron cron When interval is cron , specify a cron-style interval, e.g. */5 * * * * for every 5 minutes. Otherwise can be left out. request_url The request URL that the schedule should act on. request_method HTTP Method (POST, GET, etc.) request_body request_headers HTTP headers, separated by \\n timeout Timeout in seconds (min 1, max 30) Variables will be replaced in the fields request_url , request_method , request_headers and request_body . More info here . { \"name\" : \"My schedule\" , \"interval\" : \"5-minute\" , \"request_url\" : \"https://example.com\" , \"request_method\" : \"POST\" , \"request_body\" : \"{\\\"json\\\": \\\"message\\\"}\" , \"request_headers\" : \"Authorization: Bearer mytoken\\nContent-Type: application/json\" } Response \u00b6 { \"name\" : \"My schedule\" , \"interval\" : \"5-minute\" , \"request_url\" : \"https:\\/\\/example.com\" , \"request_method\" : \"POST\" , \"request_body\" : \"{\\\"json\\\": \\\"message\\\"}\" , \"request_headers\" : \"Authorization: Bearer mytoken\\nContent-Type: application\\/json\" , \"user_id\" : 21 , \"updated_at\" : \"2021-05-01 13:27:25\" , \"created_at\" : \"2021-05-01 13:27:25\" , \"id\" : 58 } Get all schedules \u00b6 GET /schedules?page=1&per_page=15 Response \u00b6 { \"current_page\" : 1 , \"data\" : [ { \"id\" : 58 , \"name\" : \"My schedule\" , \"interval\" : \"5-minute\" , \"cron\" : null , \"user_id\" : 21 , \"request_method\" : \"POST\" , \"request_url\" : \"https:\\/\\/example.com\" , \"request_headers\" : \"Authorization: Bearer mytoken\\nContent-Type: application\\/json\" , \"request_body\" : \"{\\\"json\\\": \\\"message\\\"}\" , \"timeout\" : 5 , \"last_run_at\" : null , \"last_status\" : null , \"created_at\" : \"2021-05-01 13:27:25\" , \"updated_at\" : \"2021-05-01 13:27:25\" } ], \"first_page_url\" : \"https:\\/\\/webhook.site\\/schedules?page=1\" , \"from\" : 1 , \"last_page\" : 1 , \"last_page_url\" : \"https:\\/\\/webhook.site\\/schedules?page=1\" , \"next_page_url\" : null , \"path\" : \"https:\\/\\/webhook.site\\/schedules\" , \"per_page\" : 15 , \"prev_page_url\" : null , \"to\" : 6 , \"total\" : 6 } Get single schedule \u00b6 Request \u00b6 GET /schedules/:scheduleId Response \u00b6 { \"id\" : 58 , \"name\" : \"My schedule\" , \"interval\" : \"5-minute\" , \"cron\" : null , \"user_id\" : 21 , \"request_method\" : \"POST\" , \"request_url\" : \"https:\\/\\/example.com\" , \"request_headers\" : \"Authorization: Bearer mytoken\\nContent-Type: application\\/json\" , \"request_body\" : \"{\\\"json\\\": \\\"message\\\"}\" , \"timeout\" : 5 , \"last_run_at\" : null , \"last_status\" : null , \"created_at\" : \"2021-05-01 13:27:25\" , \"updated_at\" : \"2021-05-01 13:27:25\" } Update schedule \u00b6 Request \u00b6 PUT /schedules/:scheduleId (See Create schedule above for request.) Response \u00b6 (See Get single schedule for response.) Delete schedule \u00b6 Request \u00b6 DELETE /schedules/:scheduleId Response \u00b6 204 No content","title":"Schedules"},{"location":"api/schedules.html#api-endpoints-schedules","text":"","title":"API Endpoints: Schedules"},{"location":"api/schedules.html#create-schedule","text":"Requires authentication.","title":"Create schedule"},{"location":"api/schedules.html#request","text":"POST /schedules name The name of the schedule. interval One of the following interval strings: monthly , weekly , daily , hourly , 10-minute , 5-minute , 1-minute , cron cron When interval is cron , specify a cron-style interval, e.g. */5 * * * * for every 5 minutes. Otherwise can be left out. request_url The request URL that the schedule should act on. request_method HTTP Method (POST, GET, etc.) request_body request_headers HTTP headers, separated by \\n timeout Timeout in seconds (min 1, max 30) Variables will be replaced in the fields request_url , request_method , request_headers and request_body . More info here . { \"name\" : \"My schedule\" , \"interval\" : \"5-minute\" , \"request_url\" : \"https://example.com\" , \"request_method\" : \"POST\" , \"request_body\" : \"{\\\"json\\\": \\\"message\\\"}\" , \"request_headers\" : \"Authorization: Bearer mytoken\\nContent-Type: application/json\" }","title":"Request"},{"location":"api/schedules.html#response","text":"{ \"name\" : \"My schedule\" , \"interval\" : \"5-minute\" , \"request_url\" : \"https:\\/\\/example.com\" , \"request_method\" : \"POST\" , \"request_body\" : \"{\\\"json\\\": \\\"message\\\"}\" , \"request_headers\" : \"Authorization: Bearer mytoken\\nContent-Type: application\\/json\" , \"user_id\" : 21 , \"updated_at\" : \"2021-05-01 13:27:25\" , \"created_at\" : \"2021-05-01 13:27:25\" , \"id\" : 58 }","title":"Response"},{"location":"api/schedules.html#get-all-schedules","text":"GET /schedules?page=1&per_page=15","title":"Get all schedules"},{"location":"api/schedules.html#response_1","text":"{ \"current_page\" : 1 , \"data\" : [ { \"id\" : 58 , \"name\" : \"My schedule\" , \"interval\" : \"5-minute\" , \"cron\" : null , \"user_id\" : 21 , \"request_method\" : \"POST\" , \"request_url\" : \"https:\\/\\/example.com\" , \"request_headers\" : \"Authorization: Bearer mytoken\\nContent-Type: application\\/json\" , \"request_body\" : \"{\\\"json\\\": \\\"message\\\"}\" , \"timeout\" : 5 , \"last_run_at\" : null , \"last_status\" : null , \"created_at\" : \"2021-05-01 13:27:25\" , \"updated_at\" : \"2021-05-01 13:27:25\" } ], \"first_page_url\" : \"https:\\/\\/webhook.site\\/schedules?page=1\" , \"from\" : 1 , \"last_page\" : 1 , \"last_page_url\" : \"https:\\/\\/webhook.site\\/schedules?page=1\" , \"next_page_url\" : null , \"path\" : \"https:\\/\\/webhook.site\\/schedules\" , \"per_page\" : 15 , \"prev_page_url\" : null , \"to\" : 6 , \"total\" : 6 }","title":"Response"},{"location":"api/schedules.html#get-single-schedule","text":"","title":"Get single schedule"},{"location":"api/schedules.html#request_1","text":"GET /schedules/:scheduleId","title":"Request"},{"location":"api/schedules.html#response_2","text":"{ \"id\" : 58 , \"name\" : \"My schedule\" , \"interval\" : \"5-minute\" , \"cron\" : null , \"user_id\" : 21 , \"request_method\" : \"POST\" , \"request_url\" : \"https:\\/\\/example.com\" , \"request_headers\" : \"Authorization: Bearer mytoken\\nContent-Type: application\\/json\" , \"request_body\" : \"{\\\"json\\\": \\\"message\\\"}\" , \"timeout\" : 5 , \"last_run_at\" : null , \"last_status\" : null , \"created_at\" : \"2021-05-01 13:27:25\" , \"updated_at\" : \"2021-05-01 13:27:25\" }","title":"Response"},{"location":"api/schedules.html#update-schedule","text":"","title":"Update schedule"},{"location":"api/schedules.html#request_2","text":"PUT /schedules/:scheduleId (See Create schedule above for request.)","title":"Request"},{"location":"api/schedules.html#response_3","text":"(See Get single schedule for response.)","title":"Response"},{"location":"api/schedules.html#delete-schedule","text":"","title":"Delete schedule"},{"location":"api/schedules.html#request_3","text":"DELETE /schedules/:scheduleId","title":"Request"},{"location":"api/schedules.html#response_4","text":"204 No content","title":"Response"},{"location":"api/tokens.html","text":"API Endpoints: Tokens (URLs & Email Addresses) \u00b6 Tokens \u00b6 A token is a container for incoming requests and emails, and corresponds to a Webhook.site URL or Email. A token ID is a 36 character UUID consisting of hexadecimal characters and dashes. Simply, the token ID is the part after https://webhook.site/ in the URL, or before @email.webhook.site in the email address. Create token \u00b6 POST /token After creating a token, the URL at https://webhook.site/{token.uuid} becomes accessible, and emails can be sent to {token.uuid}@email.webhook.site . default_* parameters sets the response of the URL. timeout waits an amount of seconds before returning the response (intended for testing timeouts) expiry set to true will cause the token to automatically be deleted within 7 days of no activity, even if creating the token as a Pro user. If you're using tokens for automated testing, for example, you can enable this to avoid filling up your user profile. cors set to true will add CORS headers to the request so browsers will send cross-domain requests to the URL alias allows setting the alias of the token. actions specifies if Custom Actions are enabled and executed on every request/email (true), or disabled (false.) clone_from specifies a token UUID (or alias) that will act as a template for the new token. When specified, settingssuch as default content, timeout, password as well as Custom Actions are copied to the new token. group_id specifies which group ID the token should be added to. Request \u00b6 Example 1: JSON \u00b6 { \"default_status\" : 200 , \"default_content\" : \"Hello world!\" , \"default_content_type\" : \"text/html\" , \"timeout\" : 0 , \"cors\" : false , \"expiry\" : true , \"alias\" : \"my-webhook\" , \"actions\" : true } Example 2: Creating with Python 3 \u00b6 Requires the requests module, which can be installed using pip install requests . You'll also need to replace the API key. Create an API key here . import requests json = { \"default_status\" : 200 , \"default_content\" : \"Hello world!\" , \"default_content_type\" : \"text/html\" , } headers = { \"api-key\" : \"00000000-0000-0000-0000-000000000000\" } r = requests . post ( 'https://webhook.site/token' , json = json , headers = headers ) print ( 'URL Created: https://webhook.site/' + r . json ()[ 'uuid' ]) Response \u00b6 200 OK { \"redirect\" : false , \"alias\" : null , \"timeout\" : 0 , \"premium\" : true , \"uuid\" : \"9981f9f4-657a-4ebf-be7c-1915bedd4775\" , \"ip\" : \"127.0.0.1\" , \"user_agent\" : \"Paw\\/3.1.8 (Macintosh; OS X\\/10.14.6) GCDHTTPRequest\" , \"default_content\" : \"Hello world!\" , \"default_status\" : 200 , \"default_content_type\" : \"text\\/plain\" , \"premium_expires_at\" : \"2019-10-22 10:52:20\" , \"created_at\" : \"2019-09-22 10:52:20\" , \"updated_at\" : \"2019-09-22 10:52:20\" } Note about expiry: If there's no incoming requests for about a week, and the token is not upgraded to premium, the token is automatically deleted along with any other data. Get tokens \u00b6 Requires authentication. Request \u00b6 GET /token Returns a list of all Tokens associated with an account. Query string parameters \u00b6 per_page - amount of requests returned, defaults to 50 (max 100) page - page number to retrieve (default 1) order_by - which field to order tokens by ( created_at (default) or token_id ) order_direction - order direction ( asc (default) or desc ) Response \u00b6 { \"current_page\" : 1 , \"data\" : [ { \"uuid\" : \"44fb1548-cd1f-4928-880c-cce094e5e179\" , \"redirect\" : false , \"alias\" : null , \"actions\" : true , \"cors\" : false , \"expiry\" : false , \"timeout\" : 0 , \"premium\" : true , \"user_id\" : null , \"password\" : true , \"ip\" : \"127.0.0.1\" , \"user_agent\" : \"Mozilla\\/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit\\/605.1.15 (KHTML, like Gecko) Version\\/14.0.3 Safari\\/605.1.15\" , \"default_content\" : \"\" , \"default_status\" : 200 , \"default_content_type\" : \"text\\/plain\" , \"premium_expires_at\" : null , \"created_at\" : \"2021-08-11 18:34:44\" , \"updated_at\" : \"2021-08-11 18:34:44\" , \"require_auth\" : true , \"latest_request_id\" : \"ea5f5920-0398-465c-8f9c-8074f0d805a4\" , \"latest_request_at\" : \"2021-08-12 19:56:50\" , \"category_id\" : null , \"requests\" : 1 }, ... ], \"first_page_url\" : \"https:\\/\\/webhook.site\\/token?page=1\" , \"from\" : 1 , \"last_page\" : 1 , \"last_page_url\" : \"https:\\/\\/webhook.site\\/token?page=1\" , \"next_page_url\" : null , \"path\" : \"https:\\/\\/webhook.site\\/token\" , \"per_page\" : 50 , \"prev_page_url\" : null , \"to\" : 2 , \"total\" : 2 } Update token \u00b6 Can require authentication. PUT /token/:token_id Request \u00b6 See POST /token Response \u00b6 See POST /token Set password (Pro) \u00b6 Can require authentication. Requires user with Pro upgrade. PUT /token/:token_id/password Sets a password to view the requests of a token. Request \u00b6 { \"password\" : \"hunter2\" , \"old_password\" : \"hunter1\" } Response \u00b6 See POST /token Set alias (Pro) \u00b6 Can require authentication. Requires user with Pro upgrade. PUT /token/:token_id/alias Sets the alias for the token, which makes the token available at https://webhook.site/<alias> or <alias>@email.webhook.site in addition to its 36 character UUID. Rules for alias format: Length between 3-32 characters. Allowed characters: A-Z, a-z and - (dash.) Request \u00b6 { \"alias\" : \"my-webhook\" } Response \u00b6 See POST /token Toggle CORS \u00b6 Attaches CORS headers to the response of the Token, allowing browsers to request it from all domains. PUT /token/:token_id/cors/toggle Response \u00b6 { \"enabled\" : true } Get token \u00b6 Can require authentication. GET /token/:token_id Response \u00b6 See POST /token Delete token \u00b6 Can require authentication. DELETE /token/:token_id Response \u00b6 204 No Content Requests \u00b6 Create request \u00b6 (any method) /:tokenId (any method) /:tokenId/:statusCode (any method) /:tokenId/(anything) If statusCode is valid, that HTTP status will be used in the response (instead of the default.) Instead of tokenId , an alias can also be supplied. Request \u00b6 (Anything.) Response \u00b6 (The default response of the Token.) Get requests \u00b6 Can require authentication. GET /token/:token_id/requests Lists all request sent to a token. Query string parameters \u00b6 sorting - either newest or oldest (default) per_page - amount of requests returned, defaults to 50 (max 100) page - page number to retrieve (default 1) date_from , date_to - filter requests by date, format yyyy-MM-dd HH:mm:ss query - filter requests by a query string search (see below for examples) Query string search examples \u00b6 You can filter requests by a query string syntax foobar - returns requests or emails with body contents containing the word foobar content:foobar - returns requests or emails with body contents containing the word foobar method:GET - returns all requests with method GET headers.user-agent:\"Paw/3.3.5 (Macintosh; OS X/11.6.2) GCDHTTPRequest\" - search value of user-agent header query.action:create - returns requests that have the query string action set to create . _exists_:query.action - returns requests where the action query is set to type:web / type:email - returns either Web requests or emails type:web AND method:POST - AND query method:PUT OR method:POST - OR query (method:PUT) AND (content:example OR content:test) AND NOT (content:foobar) created_at:[\"2022-01-01 00:00:00\" TO \"2022-12-31 00:00:00\"] - date range query Response \u00b6 { \"data\" : [ { \"uuid\" : \"a2a6a4ae-4130-4063-953a-84fa29d81d43\" , \"token_id\" : \"a94a7294-c4aa-4074-ab77-c4cf86fd53b1\" , \"ip\" : \"127.0.0.1\" , \"hostname\" : \"webhook.site\" , \"method\" : \"POST\" , \"user_agent\" : \"Paw\\/3.1.8 (Macintosh; OS X\\/10.14.6) GCDHTTPRequest\" , \"content\" : \"{\\\"first_name\\\":\\\"Arch\\\",\\\"last_name\\\":\\\"Weber\\\"}\" , \"query\" : { \"action\" : \"create\" }, \"request\" : { \"status\" : \"example\" }, \"files\" : { \"file\" : { \"id\" : \"98bf4c25-58ab-4c5d-ba91-fb6f709ea78d\" , \"filename\" : \"example.png\" , \"size\" : 420915 , \"content_type\" : \"image/png\" } }, \"headers\" : { \"content-length\" : [ \"271\" ], \"user-agent\" : [ \"Paw\\/3.1.8 (Macintosh; OS X\\/10.14.6) GCDHTTPRequest\" ] }, \"url\" : \"https:\\/\\/webhook.site\\/a94a7294-c4aa-4074-ab77-c4cf86fd53b1\\/201?\" , \"created_at\" : \"2019-10-03 19:06:35\" , \"updated_at\" : \"2019-10-03 19:06:35\" , \"custom_action_output\" : [] } ], \"total\" : 1 , \"per_page\" : 50 , \"current_page\" : 1 , \"is_last_page\" : true , \"from\" : 1 , \"to\" : 1 } Get single request \u00b6 Can require authentication. GET /token/:token_id/request/:request_id GET /token/:token_id/request/latest - retrieves the latest request sent to the URL Response \u00b6 { \"uuid\" : \"a2a6a4ae-4130-4063-953a-84fa29d81d43\" , \"token_id\" : \"a94a7294-c4aa-4074-ab77-c4cf86fd53b1\" , \"ip\" : \"127.0.0.1\" , \"hostname\" : \"webhook.site\" , \"method\" : \"POST\" , \"user_agent\" : \"Paw\\/3.1.8 (Macintosh; OS X\\/10.14.6) GCDHTTPRequest\" , \"content\" : \"{\\\"first_name\\\":\\\"Arch\\\",\\\"last_name\\\":\\\"Weber\\\"}\" , \"query\" : { \"action\" : \"create\" }, \"headers\" : { \"content-length\" : [ \"271\" ], \"user-agent\" : [ \"Paw\\/3.1.8 (Macintosh; OS X\\/10.14.6) GCDHTTPRequest\" ] }, \"files\" : { \"foo\" : { \"id\" : \"65d6e0ce-a840-47bc-b6b6-ff1ff38c34ca\" , \"filename\" : \"example.json\" , \"size\" : 5132873 , \"content_type\" : \"text/plain\" } }, \"url\" : \"https:\\/\\/webhook.site\\/a94a7294-c4aa-4074-ab77-c4cf86fd53b1\\/201?\" , \"created_at\" : \"2019-10-03 19:06:35\" , \"updated_at\" : \"2019-10-03 19:06:35\" } Get raw request content \u00b6 Can require authentication. GET /token/:token_id/request/:request_id/raw GET /token/:token_id/request/latest/raw - retrieves the latest request sent to the URL Returns the request as a response (body, content-type.) Download request file \u00b6 Can require authentication. GET /token/:tokenId/request/:requestId/download/:fileId Files that are included in a request or as email attachments are available to download using this endpoint. Delete request \u00b6 Can require authentication. DELETE /token/:token_id/request/:request_id DELETE /token/:token_id/request Deletes a request. If no request_id , all requests related to the token will be deleted. Response \u00b6 204 No Content","title":"Tokens (URLs/Email addresses)"},{"location":"api/tokens.html#api-endpointstokens-urls-email-addresses","text":"","title":"API Endpoints:Tokens (URLs &amp; Email Addresses)"},{"location":"api/tokens.html#tokens","text":"A token is a container for incoming requests and emails, and corresponds to a Webhook.site URL or Email. A token ID is a 36 character UUID consisting of hexadecimal characters and dashes. Simply, the token ID is the part after https://webhook.site/ in the URL, or before @email.webhook.site in the email address.","title":"Tokens"},{"location":"api/tokens.html#create-token","text":"POST /token After creating a token, the URL at https://webhook.site/{token.uuid} becomes accessible, and emails can be sent to {token.uuid}@email.webhook.site . default_* parameters sets the response of the URL. timeout waits an amount of seconds before returning the response (intended for testing timeouts) expiry set to true will cause the token to automatically be deleted within 7 days of no activity, even if creating the token as a Pro user. If you're using tokens for automated testing, for example, you can enable this to avoid filling up your user profile. cors set to true will add CORS headers to the request so browsers will send cross-domain requests to the URL alias allows setting the alias of the token. actions specifies if Custom Actions are enabled and executed on every request/email (true), or disabled (false.) clone_from specifies a token UUID (or alias) that will act as a template for the new token. When specified, settingssuch as default content, timeout, password as well as Custom Actions are copied to the new token. group_id specifies which group ID the token should be added to.","title":"Create token"},{"location":"api/tokens.html#request","text":"","title":"Request"},{"location":"api/tokens.html#example-1-json","text":"{ \"default_status\" : 200 , \"default_content\" : \"Hello world!\" , \"default_content_type\" : \"text/html\" , \"timeout\" : 0 , \"cors\" : false , \"expiry\" : true , \"alias\" : \"my-webhook\" , \"actions\" : true }","title":"Example 1: JSON"},{"location":"api/tokens.html#example-2-creating-with-python-3","text":"Requires the requests module, which can be installed using pip install requests . You'll also need to replace the API key. Create an API key here . import requests json = { \"default_status\" : 200 , \"default_content\" : \"Hello world!\" , \"default_content_type\" : \"text/html\" , } headers = { \"api-key\" : \"00000000-0000-0000-0000-000000000000\" } r = requests . post ( 'https://webhook.site/token' , json = json , headers = headers ) print ( 'URL Created: https://webhook.site/' + r . json ()[ 'uuid' ])","title":"Example 2: Creating with Python 3"},{"location":"api/tokens.html#response","text":"200 OK { \"redirect\" : false , \"alias\" : null , \"timeout\" : 0 , \"premium\" : true , \"uuid\" : \"9981f9f4-657a-4ebf-be7c-1915bedd4775\" , \"ip\" : \"127.0.0.1\" , \"user_agent\" : \"Paw\\/3.1.8 (Macintosh; OS X\\/10.14.6) GCDHTTPRequest\" , \"default_content\" : \"Hello world!\" , \"default_status\" : 200 , \"default_content_type\" : \"text\\/plain\" , \"premium_expires_at\" : \"2019-10-22 10:52:20\" , \"created_at\" : \"2019-09-22 10:52:20\" , \"updated_at\" : \"2019-09-22 10:52:20\" } Note about expiry: If there's no incoming requests for about a week, and the token is not upgraded to premium, the token is automatically deleted along with any other data.","title":"Response"},{"location":"api/tokens.html#get-tokens","text":"Requires authentication.","title":"Get tokens"},{"location":"api/tokens.html#request_1","text":"GET /token Returns a list of all Tokens associated with an account.","title":"Request"},{"location":"api/tokens.html#query-string-parameters","text":"per_page - amount of requests returned, defaults to 50 (max 100) page - page number to retrieve (default 1) order_by - which field to order tokens by ( created_at (default) or token_id ) order_direction - order direction ( asc (default) or desc )","title":"Query string parameters"},{"location":"api/tokens.html#response_1","text":"{ \"current_page\" : 1 , \"data\" : [ { \"uuid\" : \"44fb1548-cd1f-4928-880c-cce094e5e179\" , \"redirect\" : false , \"alias\" : null , \"actions\" : true , \"cors\" : false , \"expiry\" : false , \"timeout\" : 0 , \"premium\" : true , \"user_id\" : null , \"password\" : true , \"ip\" : \"127.0.0.1\" , \"user_agent\" : \"Mozilla\\/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit\\/605.1.15 (KHTML, like Gecko) Version\\/14.0.3 Safari\\/605.1.15\" , \"default_content\" : \"\" , \"default_status\" : 200 , \"default_content_type\" : \"text\\/plain\" , \"premium_expires_at\" : null , \"created_at\" : \"2021-08-11 18:34:44\" , \"updated_at\" : \"2021-08-11 18:34:44\" , \"require_auth\" : true , \"latest_request_id\" : \"ea5f5920-0398-465c-8f9c-8074f0d805a4\" , \"latest_request_at\" : \"2021-08-12 19:56:50\" , \"category_id\" : null , \"requests\" : 1 }, ... ], \"first_page_url\" : \"https:\\/\\/webhook.site\\/token?page=1\" , \"from\" : 1 , \"last_page\" : 1 , \"last_page_url\" : \"https:\\/\\/webhook.site\\/token?page=1\" , \"next_page_url\" : null , \"path\" : \"https:\\/\\/webhook.site\\/token\" , \"per_page\" : 50 , \"prev_page_url\" : null , \"to\" : 2 , \"total\" : 2 }","title":"Response"},{"location":"api/tokens.html#update-token","text":"Can require authentication. PUT /token/:token_id","title":"Update token"},{"location":"api/tokens.html#request_2","text":"See POST /token","title":"Request"},{"location":"api/tokens.html#response_2","text":"See POST /token","title":"Response"},{"location":"api/tokens.html#set-password-pro","text":"Can require authentication. Requires user with Pro upgrade. PUT /token/:token_id/password Sets a password to view the requests of a token.","title":"Set password (Pro)"},{"location":"api/tokens.html#request_3","text":"{ \"password\" : \"hunter2\" , \"old_password\" : \"hunter1\" }","title":"Request"},{"location":"api/tokens.html#response_3","text":"See POST /token","title":"Response"},{"location":"api/tokens.html#set-alias-pro","text":"Can require authentication. Requires user with Pro upgrade. PUT /token/:token_id/alias Sets the alias for the token, which makes the token available at https://webhook.site/<alias> or <alias>@email.webhook.site in addition to its 36 character UUID. Rules for alias format: Length between 3-32 characters. Allowed characters: A-Z, a-z and - (dash.)","title":"Set alias (Pro)"},{"location":"api/tokens.html#request_4","text":"{ \"alias\" : \"my-webhook\" }","title":"Request"},{"location":"api/tokens.html#response_4","text":"See POST /token","title":"Response"},{"location":"api/tokens.html#toggle-cors","text":"Attaches CORS headers to the response of the Token, allowing browsers to request it from all domains. PUT /token/:token_id/cors/toggle","title":"Toggle CORS"},{"location":"api/tokens.html#response_5","text":"{ \"enabled\" : true }","title":"Response"},{"location":"api/tokens.html#get-token","text":"Can require authentication. GET /token/:token_id","title":"Get token"},{"location":"api/tokens.html#response_6","text":"See POST /token","title":"Response"},{"location":"api/tokens.html#delete-token","text":"Can require authentication. DELETE /token/:token_id","title":"Delete token"},{"location":"api/tokens.html#response_7","text":"204 No Content","title":"Response"},{"location":"api/tokens.html#requests","text":"","title":"Requests"},{"location":"api/tokens.html#create-request","text":"(any method) /:tokenId (any method) /:tokenId/:statusCode (any method) /:tokenId/(anything) If statusCode is valid, that HTTP status will be used in the response (instead of the default.) Instead of tokenId , an alias can also be supplied.","title":"Create request"},{"location":"api/tokens.html#request_5","text":"(Anything.)","title":"Request"},{"location":"api/tokens.html#response_8","text":"(The default response of the Token.)","title":"Response"},{"location":"api/tokens.html#get-requests","text":"Can require authentication. GET /token/:token_id/requests Lists all request sent to a token.","title":"Get requests"},{"location":"api/tokens.html#query-string-parameters_1","text":"sorting - either newest or oldest (default) per_page - amount of requests returned, defaults to 50 (max 100) page - page number to retrieve (default 1) date_from , date_to - filter requests by date, format yyyy-MM-dd HH:mm:ss query - filter requests by a query string search (see below for examples)","title":"Query string parameters"},{"location":"api/tokens.html#query-string-search-examples","text":"You can filter requests by a query string syntax foobar - returns requests or emails with body contents containing the word foobar content:foobar - returns requests or emails with body contents containing the word foobar method:GET - returns all requests with method GET headers.user-agent:\"Paw/3.3.5 (Macintosh; OS X/11.6.2) GCDHTTPRequest\" - search value of user-agent header query.action:create - returns requests that have the query string action set to create . _exists_:query.action - returns requests where the action query is set to type:web / type:email - returns either Web requests or emails type:web AND method:POST - AND query method:PUT OR method:POST - OR query (method:PUT) AND (content:example OR content:test) AND NOT (content:foobar) created_at:[\"2022-01-01 00:00:00\" TO \"2022-12-31 00:00:00\"] - date range query","title":"Query string search examples"},{"location":"api/tokens.html#response_9","text":"{ \"data\" : [ { \"uuid\" : \"a2a6a4ae-4130-4063-953a-84fa29d81d43\" , \"token_id\" : \"a94a7294-c4aa-4074-ab77-c4cf86fd53b1\" , \"ip\" : \"127.0.0.1\" , \"hostname\" : \"webhook.site\" , \"method\" : \"POST\" , \"user_agent\" : \"Paw\\/3.1.8 (Macintosh; OS X\\/10.14.6) GCDHTTPRequest\" , \"content\" : \"{\\\"first_name\\\":\\\"Arch\\\",\\\"last_name\\\":\\\"Weber\\\"}\" , \"query\" : { \"action\" : \"create\" }, \"request\" : { \"status\" : \"example\" }, \"files\" : { \"file\" : { \"id\" : \"98bf4c25-58ab-4c5d-ba91-fb6f709ea78d\" , \"filename\" : \"example.png\" , \"size\" : 420915 , \"content_type\" : \"image/png\" } }, \"headers\" : { \"content-length\" : [ \"271\" ], \"user-agent\" : [ \"Paw\\/3.1.8 (Macintosh; OS X\\/10.14.6) GCDHTTPRequest\" ] }, \"url\" : \"https:\\/\\/webhook.site\\/a94a7294-c4aa-4074-ab77-c4cf86fd53b1\\/201?\" , \"created_at\" : \"2019-10-03 19:06:35\" , \"updated_at\" : \"2019-10-03 19:06:35\" , \"custom_action_output\" : [] } ], \"total\" : 1 , \"per_page\" : 50 , \"current_page\" : 1 , \"is_last_page\" : true , \"from\" : 1 , \"to\" : 1 }","title":"Response"},{"location":"api/tokens.html#get-single-request","text":"Can require authentication. GET /token/:token_id/request/:request_id GET /token/:token_id/request/latest - retrieves the latest request sent to the URL","title":"Get single request"},{"location":"api/tokens.html#response_10","text":"{ \"uuid\" : \"a2a6a4ae-4130-4063-953a-84fa29d81d43\" , \"token_id\" : \"a94a7294-c4aa-4074-ab77-c4cf86fd53b1\" , \"ip\" : \"127.0.0.1\" , \"hostname\" : \"webhook.site\" , \"method\" : \"POST\" , \"user_agent\" : \"Paw\\/3.1.8 (Macintosh; OS X\\/10.14.6) GCDHTTPRequest\" , \"content\" : \"{\\\"first_name\\\":\\\"Arch\\\",\\\"last_name\\\":\\\"Weber\\\"}\" , \"query\" : { \"action\" : \"create\" }, \"headers\" : { \"content-length\" : [ \"271\" ], \"user-agent\" : [ \"Paw\\/3.1.8 (Macintosh; OS X\\/10.14.6) GCDHTTPRequest\" ] }, \"files\" : { \"foo\" : { \"id\" : \"65d6e0ce-a840-47bc-b6b6-ff1ff38c34ca\" , \"filename\" : \"example.json\" , \"size\" : 5132873 , \"content_type\" : \"text/plain\" } }, \"url\" : \"https:\\/\\/webhook.site\\/a94a7294-c4aa-4074-ab77-c4cf86fd53b1\\/201?\" , \"created_at\" : \"2019-10-03 19:06:35\" , \"updated_at\" : \"2019-10-03 19:06:35\" }","title":"Response"},{"location":"api/tokens.html#get-raw-request-content","text":"Can require authentication. GET /token/:token_id/request/:request_id/raw GET /token/:token_id/request/latest/raw - retrieves the latest request sent to the URL Returns the request as a response (body, content-type.)","title":"Get raw request content"},{"location":"api/tokens.html#download-request-file","text":"Can require authentication. GET /token/:tokenId/request/:requestId/download/:fileId Files that are included in a request or as email attachments are available to download using this endpoint.","title":"Download request file"},{"location":"api/tokens.html#delete-request","text":"Can require authentication. DELETE /token/:token_id/request/:request_id DELETE /token/:token_id/request Deletes a request. If no request_id , all requests related to the token will be deleted.","title":"Delete request"},{"location":"api/tokens.html#response_11","text":"204 No Content","title":"Response"},{"location":"custom-actions/action-types.html","text":"WebhookScript \u00b6 Executes custom scripts using a scripting language that's very similar to JavaScript and PHP. More information here Text \u00b6 Extract JSONPath \u00b6 This action runs a JSONPath query on the contents of a request. With it, you can extract any data from a JSON document and store it in a variable, which can then be used in a downstream action. JSONPath is very similar to the jq commandline utility. JSONPath Examples \u00b6 Example data: { \"store\" : { \"name\" : \"Cool Books Ltd\" , \"books\" : [ { \"title\" : \"12 Rules for Life\" , \"author\" : \"Jordan B. Peterson\" , \"author.age\" : 60 , \"price\" : 10 , \"isbn\" : \"13123123123\" }, { \"title\" : \"How to Win Friends and Influence People\" , \"author\" : \"Dale Carnegie\" , \"price\" : 9 , \"isbn\" : \"23482394\" } ] } } JSONPath Result .store.name name property of store object .store.books[0][\"author.age\"] author age of first book (bracket syntax can be useful for e.g. keys containing periods) $.store.books[*].author the authors of all books in the store $..author all authors $.store..price the price of everything in the store. $..books[2] the third book $..books[(@.length-1)] the last book in order. $..books[-1:] the last book in order. $..books[0,1] the first two books $..books[:2] the first two books $..books[::2] every second book starting from first one $..books[1:6:3] every third book starting from 1 till 6 $..books[?(@.isbn)] filter all books with isbn number $..books[?(@.price<10)] filter all books cheaper than 10 $..* all elements in the data (recursively extracted) JSONPath Syntax \u00b6 Symbol Description $ The root object/element (not strictly necessary) @ The current object/element . or [] Child operator .. Recursive descent * Wildcard. All child elements regardless their index. [,] Array indices as a set [start:end:step] Array slice operator borrowed from ES4/Python. ?() Filters a result set by a script expression () Uses the result of a \"script\" expression as the index For more details on what's possible with JSONPath, take a look at the docs . As you start entering a JSONPath, the results are validated and shown next to the input field. Extract Regex \u00b6 This action runs a Regex (regular expression) query on the contents of a request. With it, you can extract any data from a text document and store it in a variable, which can then be used in a downstream action. As you start entering a Regex, the results are validated and shown next to the input field. Extract XPath \u00b6 Similar to the Extract JSONPath Custom Action, Extract XPath lets you extract values from an XML or HTML document and save the result as a variable. XPath Examples \u00b6 The following examples are based on this XML document: <?xml version=\"1.0\"?> <organization name= \"ExampleCo\" > <employees> <employee id= \"1\" > Jack </employee> <employee id= \"2\" > Ann </employee> </employees> </organization> Example XPath Notes Result /organization Finds all content within the organization element Jack Ann //employee[@id != 1] // traverses all <employee> elements in document, the @id query selects all except those with id =1 Jack /organization/@name @name to get the \"name\" property of the element ExampleCo /organization/employees/employee[2] [2] specifies 2nd element Ann /organization/employees/employee[2]/@id Get the \"id\" property of second employee element 2 /organization/employees/employee[@id=1] Employee element with id property equal to \"1\" Jack /organization/employees/employee[last()] Last employee element Ann //employee[contains(@id, \"2\")] Employee within any parent element where id contains \"2\" Ann For more examples, see W3CSchools or XPath Cheatsheet Replace Text \u00b6 An action that allows replacing multiple inputs to a string with specified replacements. Additionally, Webhook.site will replace all variables in the source text as well as the text being replaced, and the replacement. Network \u00b6 Send Request \u00b6 This will send a request with variable contents from the Webhook.site cloud. Per default, the request contents will be identical to what was sent to the URL originally. Variables extracted previously can be used. The response of the request is stored in a series of variable names prefixed with a value of your choosing. The following variables are set after the request has been fired: $your_prefix.content$ - response body content $your_prefix.status$ - response status code $your_prefix.headers$ - response headers $your_prefix.url$ - the URL the request was sent to Send Email \u00b6 This will send a email with variable contents from the Webhook.site cloud. Variables extracted previously can be used. Run SSH Command \u00b6 Allows you to run one or more SSH command on a server. Webhook.site captures the output (stdout), stderr and the command exit code as Variables that can be used in downstream actions: $ssh.stdout$ $ssh.stderr$ $ssh.exit$ FTP(S) Upload \u00b6 Allows uploading a file to a FTP or FTPS (FTP with TLS/SSL) server, specifying a hostname, port, username, password, relative path to the file, whether to use SSL and whether to use passive mode. Finally, the file content can be specified, in which Variables are replaced. We recommend storing the password as a Global Variable. Database Query \u00b6 Allows running a database query, with support for fetching out data in a series of variables. We recommend storing the password as a Global Variable. Supported Database Servers \u00b6 Currently supported are: PostgreSQL MySQL If your database server is not on the list, please contact support . Using Parameters \u00b6 When using e.g. INSERT or UPDATE statements, we strongly recommend using parameters for each column value. Doing this, you avoid SQL injection attacks and other issues when using user-submitted data (e.g. via Variables), or even just data containing special characters like quotes, that could otherwise break a query. Each parameter name should start with a colon (:) and be a single word. You can then reference these parameters inside the query, like in the following example: Fetching data \u00b6 When fetching data using e.g. SELECT statements, Webhook.site automatically inserts data in a series of Custom Action Variables, which are then available to downstream actions. For example, when fetching rows from the following table: Using the following statement: select * from employees If the variable name prefix would be set to output , the following variables would be created containing specific values: Variable Name Value $output.0.id$ 1 $output.0.fname$ Simon $output.0.lname$ Fredsted $output.0.title$ Founder $output.1.id$ 2 $output.1.fname$ Jack $output.1.lname$ Daniels $output.1.title$ Assistant Additionally, a variable would be created with the name $output.json$ containing the data in JSON format: [ { \"id\" : 1 , \"fname\" : \"Simon\" , \"lname\" : \"Fredsted\" , \"title\" : \"Founder\" }, { \"id\" : 2 , \"fname\" : \"Jack\" , \"lname\" : \"Daniels\" , \"title\" : \"Assistant\" } ] Behavior \u00b6 Modify Response \u00b6 This action can be used to modify the response of the Webhook.site URL based on the input. Rate Limit \u00b6 This action can be used to allow a specific amount of requests in a specific amount of time per a given IP. If the IP is rate limited, the URL will respond with a HTTP 429 , action execution is stopped, and the request is not saved in Webhook.site. Don't Save \u00b6 Marks the request so it is not saved in Webhook.site, which is useful when receiving a large amount of requests. Stop \u00b6 Immediately stops Custom Action execution and returns the default response. Logic \u00b6 Condition \u00b6 Useful if you need to validate that the request does or does not conform to certain criteria, the Condition action will either stop or continue based on a condition. In both the input and the value fields, variables will be replaced (including Global Variables from the Control Panel), so you can compare e.g. JSONPath or Regex values - or even values from a previous HTTP request that was sent. Currently, two actions are provided: stop and continue. Stop will stop further action execution of the condition is a match. Continue will only continue further execution if the condition is a match, and otherwise stop. The following \"operators\" are available: is equal to is not equal to starts with ends with contains does not contain is greater than is greater than or equal to is less than is less than or equal to The \"result\" of the condition will be logged below the request details, so you can see what happened. Image Handling \u00b6 Resize Image \u00b6 Takes an image from either a URL or raw image data from e.g. a file upload, email attachment, request response or another action such as Dropbox. You can enter both width and height to contrain the image in both dimensions, or enter a single dimension. Check \"Keep Aspect Ratio\" so that the image keeps the aspect ratio, but doesn't exceed the height and width constraints. Google Sheets \u00b6 Google Sheets Custom Actions lets you manipulate and retrieve values from a Google Sheet. The following Google Sheets Custom Actions are available: Add Row - appends one or more new rows to an existing spreadsheet Update Row - updates one or more cells in an existing spreadsheet Get Values - retrieves one or more cell values from an existing spreadsheet To start, you need to make sure that you have connected a Google account in the Control Panel, available here . After that, you can select the account in the dropdown when creating the Custom Action. Usage Limits \u00b6 It is important to note that Google will block Write requests (i.e. adding or updating rows) at 60 requests per minute . After that, the action will temporarilyfail with the following error message: Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer Therefore, for importing mass amounts of data in a short timespan, Google Sheets is not recommended. Instead, we recommend using the Database Query action. Specifying the spreadsheet \u00b6 When specifying the spreadsheet, you can either just copy/paste the spreadsheet URL or enter the spreadsheet ID. Variables can be used to specify the spreadsheet. Ranges \u00b6 All actions must specify a range, which behaves similar in all actions. For the Add Row action, Google Sheets will automatically find a \"table\" (e.g. a homogenous mass of data) and add the values at the bottom. A range is the same query as in Google Sheets, e.g. to select A1-C3 in Worksheet \"Example\", enter 'Example'!A1:C3 . Values \u00b6 When inserting or updating values, you can either enter a value in the text field, or supply multiple cells and/or rows using JSON. To insert two rows, the JSON would be [\"cell 1\", \"cell 2\"] . Variables \u00b6 The Get Values Action allows you to define variables based on the output. Since this action can return multiple pieces of data, multiple variables are created. For example, if you select two columns and two rows, e.g. A1:B2 , four variables would be defined: variable_name.0.0 = value of A1 variable_name.0.1 = value of A2 variable_name.1.0 = value of B1 variable_name.1.1 = value of B2 Additionally, the data is available in JSON, with the variable_name.json variable being defined, and continuing with the example above, would contain the following JSON: [ [ \"A1\" , \"A2\" ], [ \"B1\" , \"B2\" ] ] Amazon Web Services (AWS) \u00b6 S3 \u00b6 The following actions are available for AWS S3: Create Bucket Create Object Delete Object Get Object (retrieves object contents to a Variable) In addition to the \"official\" Amazon endpoints, Webhook.site also supports S3-compatible storages like DigitalOcean, MinIO, Wasabi and more. The endpoint can be specified when setting up the account in Control Panel. CloudFront \u00b6 The \"Create Invalidation\" action allows you to dynamically create a CloudFront cache invalidation as a Custom Action. Both the Distribution ID and the paths to be invalidated are replaced with Webhook.site Variables. Discord \u00b6 With the Discord Custom Action, you can send messages to a specified channel (Each bot account uses a specific channel, so you can connect more accounts to send to different channels or servers.) In addition, you can choose a custom username and avatar image for the bot user. Slack \u00b6 With the Slack Custom Action, you can easily use Slack's Webhook URLs to send messages to a channel. Dropbox \u00b6 The Dropbox integration has access to the entire contents of your dropbox, and currently the following actions are available: Create Folder Download File Upload File Delete File Delete Folder Get Link - creates a temporary download link for any file in your Dropbox, and saves it in a variable. Twitter \u00b6 The Twitter Integration supports the following actions using Twitter's API: Post Tweet RabbitMQ \u00b6 The RabbitMQ Integration allows you to publish and consume messages from a RabbitMQ queue by specifying the server connection details. Pushed \u00b6 With the Send Push Notification action, you can easily send push notifications to your mobile devices using your Pushed.co account. With a free Pushed.co account , you can send up to 1000 push notifications a month.","title":"Action Types"},{"location":"custom-actions/action-types.html#webhookscript","text":"Executes custom scripts using a scripting language that's very similar to JavaScript and PHP. More information here","title":"WebhookScript"},{"location":"custom-actions/action-types.html#text","text":"","title":"Text"},{"location":"custom-actions/action-types.html#extract-jsonpath","text":"This action runs a JSONPath query on the contents of a request. With it, you can extract any data from a JSON document and store it in a variable, which can then be used in a downstream action. JSONPath is very similar to the jq commandline utility.","title":"Extract JSONPath"},{"location":"custom-actions/action-types.html#jsonpath-examples","text":"Example data: { \"store\" : { \"name\" : \"Cool Books Ltd\" , \"books\" : [ { \"title\" : \"12 Rules for Life\" , \"author\" : \"Jordan B. Peterson\" , \"author.age\" : 60 , \"price\" : 10 , \"isbn\" : \"13123123123\" }, { \"title\" : \"How to Win Friends and Influence People\" , \"author\" : \"Dale Carnegie\" , \"price\" : 9 , \"isbn\" : \"23482394\" } ] } } JSONPath Result .store.name name property of store object .store.books[0][\"author.age\"] author age of first book (bracket syntax can be useful for e.g. keys containing periods) $.store.books[*].author the authors of all books in the store $..author all authors $.store..price the price of everything in the store. $..books[2] the third book $..books[(@.length-1)] the last book in order. $..books[-1:] the last book in order. $..books[0,1] the first two books $..books[:2] the first two books $..books[::2] every second book starting from first one $..books[1:6:3] every third book starting from 1 till 6 $..books[?(@.isbn)] filter all books with isbn number $..books[?(@.price<10)] filter all books cheaper than 10 $..* all elements in the data (recursively extracted)","title":"JSONPath Examples"},{"location":"custom-actions/action-types.html#jsonpath-syntax","text":"Symbol Description $ The root object/element (not strictly necessary) @ The current object/element . or [] Child operator .. Recursive descent * Wildcard. All child elements regardless their index. [,] Array indices as a set [start:end:step] Array slice operator borrowed from ES4/Python. ?() Filters a result set by a script expression () Uses the result of a \"script\" expression as the index For more details on what's possible with JSONPath, take a look at the docs . As you start entering a JSONPath, the results are validated and shown next to the input field.","title":"JSONPath Syntax"},{"location":"custom-actions/action-types.html#extract-regex","text":"This action runs a Regex (regular expression) query on the contents of a request. With it, you can extract any data from a text document and store it in a variable, which can then be used in a downstream action. As you start entering a Regex, the results are validated and shown next to the input field.","title":"Extract Regex"},{"location":"custom-actions/action-types.html#extract-xpath","text":"Similar to the Extract JSONPath Custom Action, Extract XPath lets you extract values from an XML or HTML document and save the result as a variable.","title":"Extract XPath"},{"location":"custom-actions/action-types.html#xpath-examples","text":"The following examples are based on this XML document: <?xml version=\"1.0\"?> <organization name= \"ExampleCo\" > <employees> <employee id= \"1\" > Jack </employee> <employee id= \"2\" > Ann </employee> </employees> </organization> Example XPath Notes Result /organization Finds all content within the organization element Jack Ann //employee[@id != 1] // traverses all <employee> elements in document, the @id query selects all except those with id =1 Jack /organization/@name @name to get the \"name\" property of the element ExampleCo /organization/employees/employee[2] [2] specifies 2nd element Ann /organization/employees/employee[2]/@id Get the \"id\" property of second employee element 2 /organization/employees/employee[@id=1] Employee element with id property equal to \"1\" Jack /organization/employees/employee[last()] Last employee element Ann //employee[contains(@id, \"2\")] Employee within any parent element where id contains \"2\" Ann For more examples, see W3CSchools or XPath Cheatsheet","title":"XPath Examples"},{"location":"custom-actions/action-types.html#replace-text","text":"An action that allows replacing multiple inputs to a string with specified replacements. Additionally, Webhook.site will replace all variables in the source text as well as the text being replaced, and the replacement.","title":"Replace Text"},{"location":"custom-actions/action-types.html#network","text":"","title":"Network"},{"location":"custom-actions/action-types.html#send-request","text":"This will send a request with variable contents from the Webhook.site cloud. Per default, the request contents will be identical to what was sent to the URL originally. Variables extracted previously can be used. The response of the request is stored in a series of variable names prefixed with a value of your choosing. The following variables are set after the request has been fired: $your_prefix.content$ - response body content $your_prefix.status$ - response status code $your_prefix.headers$ - response headers $your_prefix.url$ - the URL the request was sent to","title":"Send Request"},{"location":"custom-actions/action-types.html#send-email","text":"This will send a email with variable contents from the Webhook.site cloud. Variables extracted previously can be used.","title":"Send Email"},{"location":"custom-actions/action-types.html#run-ssh-command","text":"Allows you to run one or more SSH command on a server. Webhook.site captures the output (stdout), stderr and the command exit code as Variables that can be used in downstream actions: $ssh.stdout$ $ssh.stderr$ $ssh.exit$","title":"Run SSH Command"},{"location":"custom-actions/action-types.html#ftps-upload","text":"Allows uploading a file to a FTP or FTPS (FTP with TLS/SSL) server, specifying a hostname, port, username, password, relative path to the file, whether to use SSL and whether to use passive mode. Finally, the file content can be specified, in which Variables are replaced. We recommend storing the password as a Global Variable.","title":"FTP(S) Upload"},{"location":"custom-actions/action-types.html#database-query","text":"Allows running a database query, with support for fetching out data in a series of variables. We recommend storing the password as a Global Variable.","title":"Database Query"},{"location":"custom-actions/action-types.html#supported-database-servers","text":"Currently supported are: PostgreSQL MySQL If your database server is not on the list, please contact support .","title":"Supported Database Servers"},{"location":"custom-actions/action-types.html#using-parameters","text":"When using e.g. INSERT or UPDATE statements, we strongly recommend using parameters for each column value. Doing this, you avoid SQL injection attacks and other issues when using user-submitted data (e.g. via Variables), or even just data containing special characters like quotes, that could otherwise break a query. Each parameter name should start with a colon (:) and be a single word. You can then reference these parameters inside the query, like in the following example:","title":"Using Parameters"},{"location":"custom-actions/action-types.html#fetching-data","text":"When fetching data using e.g. SELECT statements, Webhook.site automatically inserts data in a series of Custom Action Variables, which are then available to downstream actions. For example, when fetching rows from the following table: Using the following statement: select * from employees If the variable name prefix would be set to output , the following variables would be created containing specific values: Variable Name Value $output.0.id$ 1 $output.0.fname$ Simon $output.0.lname$ Fredsted $output.0.title$ Founder $output.1.id$ 2 $output.1.fname$ Jack $output.1.lname$ Daniels $output.1.title$ Assistant Additionally, a variable would be created with the name $output.json$ containing the data in JSON format: [ { \"id\" : 1 , \"fname\" : \"Simon\" , \"lname\" : \"Fredsted\" , \"title\" : \"Founder\" }, { \"id\" : 2 , \"fname\" : \"Jack\" , \"lname\" : \"Daniels\" , \"title\" : \"Assistant\" } ]","title":"Fetching data"},{"location":"custom-actions/action-types.html#behavior","text":"","title":"Behavior"},{"location":"custom-actions/action-types.html#modify-response","text":"This action can be used to modify the response of the Webhook.site URL based on the input.","title":"Modify Response"},{"location":"custom-actions/action-types.html#rate-limit","text":"This action can be used to allow a specific amount of requests in a specific amount of time per a given IP. If the IP is rate limited, the URL will respond with a HTTP 429 , action execution is stopped, and the request is not saved in Webhook.site.","title":"Rate Limit"},{"location":"custom-actions/action-types.html#dont-save","text":"Marks the request so it is not saved in Webhook.site, which is useful when receiving a large amount of requests.","title":"Don't Save"},{"location":"custom-actions/action-types.html#stop","text":"Immediately stops Custom Action execution and returns the default response.","title":"Stop"},{"location":"custom-actions/action-types.html#logic","text":"","title":"Logic"},{"location":"custom-actions/action-types.html#condition","text":"Useful if you need to validate that the request does or does not conform to certain criteria, the Condition action will either stop or continue based on a condition. In both the input and the value fields, variables will be replaced (including Global Variables from the Control Panel), so you can compare e.g. JSONPath or Regex values - or even values from a previous HTTP request that was sent. Currently, two actions are provided: stop and continue. Stop will stop further action execution of the condition is a match. Continue will only continue further execution if the condition is a match, and otherwise stop. The following \"operators\" are available: is equal to is not equal to starts with ends with contains does not contain is greater than is greater than or equal to is less than is less than or equal to The \"result\" of the condition will be logged below the request details, so you can see what happened.","title":"Condition"},{"location":"custom-actions/action-types.html#image-handling","text":"","title":"Image Handling"},{"location":"custom-actions/action-types.html#resize-image","text":"Takes an image from either a URL or raw image data from e.g. a file upload, email attachment, request response or another action such as Dropbox. You can enter both width and height to contrain the image in both dimensions, or enter a single dimension. Check \"Keep Aspect Ratio\" so that the image keeps the aspect ratio, but doesn't exceed the height and width constraints.","title":"Resize Image"},{"location":"custom-actions/action-types.html#google-sheets","text":"Google Sheets Custom Actions lets you manipulate and retrieve values from a Google Sheet. The following Google Sheets Custom Actions are available: Add Row - appends one or more new rows to an existing spreadsheet Update Row - updates one or more cells in an existing spreadsheet Get Values - retrieves one or more cell values from an existing spreadsheet To start, you need to make sure that you have connected a Google account in the Control Panel, available here . After that, you can select the account in the dropdown when creating the Custom Action.","title":"Google Sheets"},{"location":"custom-actions/action-types.html#usage-limits","text":"It is important to note that Google will block Write requests (i.e. adding or updating rows) at 60 requests per minute . After that, the action will temporarilyfail with the following error message: Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer Therefore, for importing mass amounts of data in a short timespan, Google Sheets is not recommended. Instead, we recommend using the Database Query action.","title":"Usage Limits"},{"location":"custom-actions/action-types.html#specifying-the-spreadsheet","text":"When specifying the spreadsheet, you can either just copy/paste the spreadsheet URL or enter the spreadsheet ID. Variables can be used to specify the spreadsheet.","title":"Specifying the spreadsheet"},{"location":"custom-actions/action-types.html#ranges","text":"All actions must specify a range, which behaves similar in all actions. For the Add Row action, Google Sheets will automatically find a \"table\" (e.g. a homogenous mass of data) and add the values at the bottom. A range is the same query as in Google Sheets, e.g. to select A1-C3 in Worksheet \"Example\", enter 'Example'!A1:C3 .","title":"Ranges"},{"location":"custom-actions/action-types.html#values","text":"When inserting or updating values, you can either enter a value in the text field, or supply multiple cells and/or rows using JSON. To insert two rows, the JSON would be [\"cell 1\", \"cell 2\"] .","title":"Values"},{"location":"custom-actions/action-types.html#variables","text":"The Get Values Action allows you to define variables based on the output. Since this action can return multiple pieces of data, multiple variables are created. For example, if you select two columns and two rows, e.g. A1:B2 , four variables would be defined: variable_name.0.0 = value of A1 variable_name.0.1 = value of A2 variable_name.1.0 = value of B1 variable_name.1.1 = value of B2 Additionally, the data is available in JSON, with the variable_name.json variable being defined, and continuing with the example above, would contain the following JSON: [ [ \"A1\" , \"A2\" ], [ \"B1\" , \"B2\" ] ]","title":"Variables"},{"location":"custom-actions/action-types.html#amazon-web-services-aws","text":"","title":"Amazon Web Services (AWS)"},{"location":"custom-actions/action-types.html#s3","text":"The following actions are available for AWS S3: Create Bucket Create Object Delete Object Get Object (retrieves object contents to a Variable) In addition to the \"official\" Amazon endpoints, Webhook.site also supports S3-compatible storages like DigitalOcean, MinIO, Wasabi and more. The endpoint can be specified when setting up the account in Control Panel.","title":"S3"},{"location":"custom-actions/action-types.html#cloudfront","text":"The \"Create Invalidation\" action allows you to dynamically create a CloudFront cache invalidation as a Custom Action. Both the Distribution ID and the paths to be invalidated are replaced with Webhook.site Variables.","title":"CloudFront"},{"location":"custom-actions/action-types.html#discord","text":"With the Discord Custom Action, you can send messages to a specified channel (Each bot account uses a specific channel, so you can connect more accounts to send to different channels or servers.) In addition, you can choose a custom username and avatar image for the bot user.","title":"Discord"},{"location":"custom-actions/action-types.html#slack","text":"With the Slack Custom Action, you can easily use Slack's Webhook URLs to send messages to a channel.","title":"Slack"},{"location":"custom-actions/action-types.html#dropbox","text":"The Dropbox integration has access to the entire contents of your dropbox, and currently the following actions are available: Create Folder Download File Upload File Delete File Delete Folder Get Link - creates a temporary download link for any file in your Dropbox, and saves it in a variable.","title":"Dropbox"},{"location":"custom-actions/action-types.html#twitter","text":"The Twitter Integration supports the following actions using Twitter's API: Post Tweet","title":"Twitter"},{"location":"custom-actions/action-types.html#rabbitmq","text":"The RabbitMQ Integration allows you to publish and consume messages from a RabbitMQ queue by specifying the server connection details.","title":"RabbitMQ"},{"location":"custom-actions/action-types.html#pushed","text":"With the Send Push Notification action, you can easily send push notifications to your mobile devices using your Pushed.co account. With a free Pushed.co account , you can send up to 1000 push notifications a month.","title":"Pushed"},{"location":"custom-actions/examples.html","text":"Adding rows to an Airtable Base \u00b6 While Webhook.site doesn't have a native integration with Airtable, due to the simple API, it's exceedingly easy to add rows to a so-called Airtable Base. First, create an API key on your Account page: https://airtable.com/account. Next, go to Airtable's API documentation and select the Base you want to interact with: https://airtable.com/api. In the upper right corner, make sure show API key is checked. If you then scroll down to the Create records section, you can essentially copy everything over to a Send Request action. Things to note: The Request Method should be POST Make sure you copy everything between --data ' and the final ' (quote) character Also make sure that quotes aren't included in the two header lines","title":"Examples"},{"location":"custom-actions/examples.html#adding-rows-to-an-airtable-base","text":"While Webhook.site doesn't have a native integration with Airtable, due to the simple API, it's exceedingly easy to add rows to a so-called Airtable Base. First, create an API key on your Account page: https://airtable.com/account. Next, go to Airtable's API documentation and select the Base you want to interact with: https://airtable.com/api. In the upper right corner, make sure show API key is checked. If you then scroll down to the Create records section, you can essentially copy everything over to a Send Request action. Things to note: The Request Method should be POST Make sure you copy everything between --data ' and the final ' (quote) character Also make sure that quotes aren't included in the two header lines","title":"Adding rows to an Airtable Base"},{"location":"custom-actions/variables.html","text":"Variables are the most important part of Custom Actions, and are characterized by a name surrounded by two dollar signs: $example$ . Variables can be used in any field that has a \u24e5 icon in the editor. They act as placeholders that are replaced by dynamic content as the request or email is received. Each request or email has a set of Base Variables (see below) that contain information like the request IP, method, headers, query string values, form values and the request content. To see a list of variables, click the Variables button in the editor. Clicking on a variable copies it to the clipboard. Many of the the available Custom Actions can register a variable during the runtime of the actions, so for example you can register the result of a JSONPath query and use it in a \"Modify Response\" action to make the response dynamic, or even use it to send a request to another HTTP address, and then use the response of that. Files can referred to and be used through Variables. This works since Custom Actions are executed synchronously in a chain, sharing data as they're being executed. The format of variables are dollar signs surrounded by a word, for example: $example$ . Variable Modifiers \u00b6 Adding specific suffixes to variable names will let you process the value in the following ways: Variable Example Input Example Output Description $example$ {\"json\": \"value\"} {\"json\": \"value\"} no modifier $example.json$ {\"json\": \"value\"} {\\\"json\\\": \\\"value\\\"} Escapes all special JSON characters, allowing to use any string in a JSON object. Escaped characters include \\b, \\f, \\n, \\r, \\t, \", \\ $example.html_encode$ <p>some html</p> &lt;p&gt;some html&lt;/p&gt; Escapes all special HTML characters $example.html_decode$ &lt;p&gt;some html&lt;/p&gt; <p>some html</p> Replaces all escaped HTML escapes with normal characters $example.html_strip$ <p>some html</p> some html Removes all HTML tags from input string $example.base64_encode$ {\"json\": \"<b>value</b>\"} eyJqc29uIjogIjxiPnZhbHVlPC9iPiJ9Cg== Encodes the variable to base64 $example.base64_decode$ eyJqc29uIjogIjxiPnZhbHVlPC9iPiJ9Cg== {\"json\": \"<b>value</b>\"} Decodes a base64 encoded string $example.url_encode$ {\"json\": \"value\"} %7B%22json%22%3A+%22value%22%7D Escapes all special HTTP URL characters $example.url_decode$ %7B%22json%22%3A+%22value%22%7D {\"json\": \"value\"} Replaces all special HTTP URL escapes with normal characters Base Variables \u00b6 These variables are automatically available for each request or email. Different variables are available depending on the type. Variable Name Available For Description request.uuid All The UUID of the request request.token_id All The Token UUID (URL ID) of the request request.content All The body content of the request request.date All Creation date in Y-m-d H:m:s format request.date All Creation date in UNIX timestamp format request.hostname All Hostname of the request (usually webhook.site ) request.header.[name] All Created for each HTTP header request.size All Request body size in bytes request.type All Request type ( email or web ) request.file.[name].filename All Created for each file upload, with name being the input name property. Contains the client file name request.file.[name].size All Contains the file size in bytes request.file.[name].content All Contains the file content request.file.[name].content_type All Contains the file content type (e.g. image/png) request.file.[name].id All Contains the Webhook.site file ID request.file.[name].link All Contains the direct download link to the file from Webhook.site's server. request.query.[name] Web Created for each query string (e.g. ?name=value) request.form.[name] Web Created for each form field request.ip Web IP of the host making the request request.user_agent Web User agent header request.url Web Full URL of the request (e.g. https://webhook.site/xxx-xxx...) request.method Web HTTP method (GET, POST, etc.) request.sender Email Sender address request.message_id Email Email message ID request.text_content Email Parsed plaintext content request.destinations Email Comma separated list of recipients. request.checks.[name] Email True or false for email checks (DKIM, SPF, etc.)","title":"Variables"},{"location":"custom-actions/variables.html#variable-modifiers","text":"Adding specific suffixes to variable names will let you process the value in the following ways: Variable Example Input Example Output Description $example$ {\"json\": \"value\"} {\"json\": \"value\"} no modifier $example.json$ {\"json\": \"value\"} {\\\"json\\\": \\\"value\\\"} Escapes all special JSON characters, allowing to use any string in a JSON object. Escaped characters include \\b, \\f, \\n, \\r, \\t, \", \\ $example.html_encode$ <p>some html</p> &lt;p&gt;some html&lt;/p&gt; Escapes all special HTML characters $example.html_decode$ &lt;p&gt;some html&lt;/p&gt; <p>some html</p> Replaces all escaped HTML escapes with normal characters $example.html_strip$ <p>some html</p> some html Removes all HTML tags from input string $example.base64_encode$ {\"json\": \"<b>value</b>\"} eyJqc29uIjogIjxiPnZhbHVlPC9iPiJ9Cg== Encodes the variable to base64 $example.base64_decode$ eyJqc29uIjogIjxiPnZhbHVlPC9iPiJ9Cg== {\"json\": \"<b>value</b>\"} Decodes a base64 encoded string $example.url_encode$ {\"json\": \"value\"} %7B%22json%22%3A+%22value%22%7D Escapes all special HTTP URL characters $example.url_decode$ %7B%22json%22%3A+%22value%22%7D {\"json\": \"value\"} Replaces all special HTTP URL escapes with normal characters","title":"Variable Modifiers"},{"location":"custom-actions/variables.html#base-variables","text":"These variables are automatically available for each request or email. Different variables are available depending on the type. Variable Name Available For Description request.uuid All The UUID of the request request.token_id All The Token UUID (URL ID) of the request request.content All The body content of the request request.date All Creation date in Y-m-d H:m:s format request.date All Creation date in UNIX timestamp format request.hostname All Hostname of the request (usually webhook.site ) request.header.[name] All Created for each HTTP header request.size All Request body size in bytes request.type All Request type ( email or web ) request.file.[name].filename All Created for each file upload, with name being the input name property. Contains the client file name request.file.[name].size All Contains the file size in bytes request.file.[name].content All Contains the file content request.file.[name].content_type All Contains the file content type (e.g. image/png) request.file.[name].id All Contains the Webhook.site file ID request.file.[name].link All Contains the direct download link to the file from Webhook.site's server. request.query.[name] Web Created for each query string (e.g. ?name=value) request.form.[name] Web Created for each form field request.ip Web IP of the host making the request request.user_agent Web User agent header request.url Web Full URL of the request (e.g. https://webhook.site/xxx-xxx...) request.method Web HTTP method (GET, POST, etc.) request.sender Email Sender address request.message_id Email Email message ID request.text_content Email Parsed plaintext content request.destinations Email Comma separated list of recipients. request.checks.[name] Email True or false for email checks (DKIM, SPF, etc.)","title":"Base Variables"},{"location":"webhookscript/index.html","text":"About WebhookScript \u00b6 WebhookScript is an easy to use scripting language designed for executing Web-related actions on incoming requests. While the other actions like Extract Regex and Send Email allows you to create flows in a visual editor, WebhookScript makes it quicker to create more advanced logic. WebhookScript can be combined with other Custom Actions as data can be shared between them using Variables . Syntax \u00b6 The syntax is very similar to PHP and JavaScript. See also the full language specification . products = [ 'apple' : [ 'price' : 10 ], 'blueberry' : [ 'price' : 1 ], 'cake' : [ 'price' : 550 ] ] shouldAddVat = var ( 'request.query.vat' ); selectedProduct = var ( 'request.query.product' ); if ( ! selectedProduct ) { respond ( 'Please select a product!' , 500 ) } price = products [ selectedProduct ][ 'price' ]; if ( shouldAddVat == 1 ) { price = price * 1.25 ; } respond ( 'Your price is {}' . format ( price ), 200 ); Variables in WebhookScript \u00b6 Custom Action Variables in WebhookScript behave a little differently than other action types: in the code, they will not be replaced automatically like in other action types. Instead, to interface with Custom Action Variables (created in previous actions, or default variables provided for each request or email), the function var() can be used. The dollar-sign syntax (e.g. $request.content$ ) is optional when using the var() function, and the following two statements are equivalent: var('$request.content$') / var('request.content') . In addition, set() can be used to export a variable from your script to further downstream actions. store() is used to permanently set a Global Variable. About the Editor \u00b6 Shortcuts \u00b6 The shortcuts are available when the editor is focused. Windows Mac Shortcut Alt-R Alt-R Test code (update Debug Panel) Ctrl-S Cmd-S Save action without exiting Debug Panel \u00b6 Below the editor is the \"debug panel\" containing data relating to the current and previous actions: Debug outputs shows the outputs of all the actions, with the current action being edited or created marked in blue. Response shows details of the response of the URL formatted in JSON. Variables is a table of all current available variables for use in the script with the var() function or variables array. Fullscreen Mode \u00b6 To enable fullscreen mode, click the Expand button in the upper right corner to make the editor take up more screen space. Click again to disengage fullscreen mode.","title":"About WebhookScript"},{"location":"webhookscript/index.html#about-webhookscript","text":"WebhookScript is an easy to use scripting language designed for executing Web-related actions on incoming requests. While the other actions like Extract Regex and Send Email allows you to create flows in a visual editor, WebhookScript makes it quicker to create more advanced logic. WebhookScript can be combined with other Custom Actions as data can be shared between them using Variables .","title":"About WebhookScript"},{"location":"webhookscript/index.html#syntax","text":"The syntax is very similar to PHP and JavaScript. See also the full language specification . products = [ 'apple' : [ 'price' : 10 ], 'blueberry' : [ 'price' : 1 ], 'cake' : [ 'price' : 550 ] ] shouldAddVat = var ( 'request.query.vat' ); selectedProduct = var ( 'request.query.product' ); if ( ! selectedProduct ) { respond ( 'Please select a product!' , 500 ) } price = products [ selectedProduct ][ 'price' ]; if ( shouldAddVat == 1 ) { price = price * 1.25 ; } respond ( 'Your price is {}' . format ( price ), 200 );","title":"Syntax"},{"location":"webhookscript/index.html#variables-in-webhookscript","text":"Custom Action Variables in WebhookScript behave a little differently than other action types: in the code, they will not be replaced automatically like in other action types. Instead, to interface with Custom Action Variables (created in previous actions, or default variables provided for each request or email), the function var() can be used. The dollar-sign syntax (e.g. $request.content$ ) is optional when using the var() function, and the following two statements are equivalent: var('$request.content$') / var('request.content') . In addition, set() can be used to export a variable from your script to further downstream actions. store() is used to permanently set a Global Variable.","title":"Variables in WebhookScript"},{"location":"webhookscript/index.html#about-the-editor","text":"","title":"About the Editor"},{"location":"webhookscript/index.html#shortcuts","text":"The shortcuts are available when the editor is focused. Windows Mac Shortcut Alt-R Alt-R Test code (update Debug Panel) Ctrl-S Cmd-S Save action without exiting","title":"Shortcuts"},{"location":"webhookscript/index.html#debug-panel","text":"Below the editor is the \"debug panel\" containing data relating to the current and previous actions: Debug outputs shows the outputs of all the actions, with the current action being edited or created marked in blue. Response shows details of the response of the URL formatted in JSON. Variables is a table of all current available variables for use in the script with the var() function or variables array.","title":"Debug Panel"},{"location":"webhookscript/index.html#fullscreen-mode","text":"To enable fullscreen mode, click the Expand button in the upper right corner to make the editor take up more screen space. Click again to disengage fullscreen mode.","title":"Fullscreen Mode"},{"location":"webhookscript/date-format.html","text":"Date format characters \u00b6 WebhookScript uses the ISO format for converting and formatting dates, and the format is compatible with the Moment.js format method . The following examples are based on the date 2017-01-05 17:04:05.084512 . Code Example Description OD 5 Day number with alternative numbers such as \u4e09 for 3 if locale is ja_JP OM 1 Month number with alternative numbers such as \u1040\u1042 for 2 if locale is my_MM OY 2017 Year number with alternative numbers such as \u06f1\u06f9\u06f9\u06f8 for 1998 if locale is fa OH 17 24-hours number with alternative numbers such as \u1091\u1093 for 13 if locale is shn_MM Oh 5 12-hours number with alternative numbers such as \u5341\u4e00 for 11 if locale is lzh_TW Om 4 Minute number with alternative numbers such as \u0b6b\u0b6d for 57 if locale is or Os 5 Second number with alternative numbers such as \u5341\u4e94 for 15 if locale is ja_JP D 5 Day of month number (from 1 to 31) DD 05 Day of month number with trailing zero (from 01 to 31) Do 5th Day of month with ordinal suffix (from 1st to 31th), translatable d 4 Day of week number (from 0 (Sunday) to 6 (Saturday)) dd Th Minified day name (from Su to Sa), transatable ddd Thu Short day name (from Sun to Sat), transatable dddd Thursday Day name (from Sunday to Saturday), transatable DDD 5 Day of year number (from 1 to 366) DDDD 005 Day of year number with trailing zeros (3 digits, from 001 to 366) DDDo 5th Day of year number with ordinal suffix (from 1st to 366th), translatable e 4 Day of week number (from 0 (Sunday) to 6 (Saturday)), similar to \"d\" but this one is translatable (takes first day of week of the current locale) E 4 Day of week number (from 1 (Monday) to 7 (Sunday)) H 17 Hour from 0 to 23 HH 17 Hour with trailing zero from 00 to 23 h 5 Hour from 0 to 12 hh 05 Hour with trailing zero from 00 to 12 k 17 Hour from 1 to 24 kk 17 Hour with trailing zero from 01 to 24 L 04/09/1986 Date (in local format) LL September 4 1986 Month name, day of month, year LLL September 4 1986 8:30 PM Month name, day of month, year, time LLLL Thursday, September 4 1986 8:30 PM Day of week, month name, day of month, year, time LT 8:30 PM Time (without seconds) LTS 8:30:00 PM Time (with seconds) m 4 Minute from 0 to 59 mm 04 Minute with trailing zero from 00 to 59 a pm Meridiem am/pm A PM Meridiem AM/PM s 5 Second from 0 to 59 ss 05 Second with trailing zero from 00 to 59 S 0 Second tenth SS 08 Second hundredth (on 2 digits with trailing zero) SSS 084 Millisecond (on 3 digits with trailing zeros) SSSS 0845 Second ten thousandth (on 4 digits with trailing zeros) SSSSS 08451 Second hundred thousandth (on 5 digits with trailing zeros) SSSSSS 084512 Microsecond (on 6 digits with trailing zeros) SSSSSSS 0845120 Second ten millionth (on 7 digits with trailing zeros) SSSSSSSS 08451200 Second hundred millionth (on 8 digits with trailing zeros) SSSSSSSSS 084512000 Nanosecond (on 9 digits with trailing zeros) M 1 Month from 1 to 12 MM 01 Month with trailing zero from 01 to 12 MMM Jan Short month name, translatable MMMM January Month name, translatable Mo 1st Month with ordinal suffix from 1st to 12th, translatable Q 1 Quarter from 1 to 4 Qo 1st Quarter with ordinal suffix from 1st to 4th, translatable G 2017 ISO week year (see ISO week date) GG 2017 ISO week year (on 2 digits with trailing zero) GGG 2017 ISO week year (on 3 digits with trailing zeros) GGGG 2017 ISO week year (on 4 digits with trailing zeros) GGGGG 02017 ISO week year (on 5 digits with trailing zeros) g 2017 Week year according to locale settings, translatable gg 2017 Week year according to locale settings (on 2 digits with trailing zero), translatable ggg 2017 Week year according to locale settings (on 3 digits with trailing zeros), translatable gggg 2017 Week year according to locale settings (on 4 digits with trailing zeros), translatable ggggg 02017 Week year according to locale settings (on 5 digits with trailing zeros), translatable W 1 ISO week number in the year (see ISO week date) WW 01 ISO week number in the year (on 2 digits with trailing zero) Wo 1st ISO week number in the year with ordinal suffix, translatable w 1 Week number in the year according to locale settings, translatable ww 01 Week number in the year according to locale settings (on 2 digits with trailing zero) wo 1st Week number in the year according to locale settings with ordinal suffix, translatable x 1483635845085 Millisecond-precision timestamp (same as date.getTime() in JavaScript) X 1483635845 Timestamp (number of seconds since 1970-01-01) Y 2017 Full year from -9999 to 9999 YY 17 Year on 2 digits from 00 to 99 YYYY 2017 Year on 4 digits from 0000 to 9999 YYYYY 02017 Year on 5 digits from 00000 to 09999 YYYYYY +002017 Year on 5 digits with sign from -09999 to +09999 z UTC Abbreviated time zone name zz UTC Time zone name Z +00:00 Time zone offset HH:mm ZZ +0000 Time zone offset HHmm Source: Carbon Docs","title":"Date format characters"},{"location":"webhookscript/date-format.html#date-format-characters","text":"WebhookScript uses the ISO format for converting and formatting dates, and the format is compatible with the Moment.js format method . The following examples are based on the date 2017-01-05 17:04:05.084512 . Code Example Description OD 5 Day number with alternative numbers such as \u4e09 for 3 if locale is ja_JP OM 1 Month number with alternative numbers such as \u1040\u1042 for 2 if locale is my_MM OY 2017 Year number with alternative numbers such as \u06f1\u06f9\u06f9\u06f8 for 1998 if locale is fa OH 17 24-hours number with alternative numbers such as \u1091\u1093 for 13 if locale is shn_MM Oh 5 12-hours number with alternative numbers such as \u5341\u4e00 for 11 if locale is lzh_TW Om 4 Minute number with alternative numbers such as \u0b6b\u0b6d for 57 if locale is or Os 5 Second number with alternative numbers such as \u5341\u4e94 for 15 if locale is ja_JP D 5 Day of month number (from 1 to 31) DD 05 Day of month number with trailing zero (from 01 to 31) Do 5th Day of month with ordinal suffix (from 1st to 31th), translatable d 4 Day of week number (from 0 (Sunday) to 6 (Saturday)) dd Th Minified day name (from Su to Sa), transatable ddd Thu Short day name (from Sun to Sat), transatable dddd Thursday Day name (from Sunday to Saturday), transatable DDD 5 Day of year number (from 1 to 366) DDDD 005 Day of year number with trailing zeros (3 digits, from 001 to 366) DDDo 5th Day of year number with ordinal suffix (from 1st to 366th), translatable e 4 Day of week number (from 0 (Sunday) to 6 (Saturday)), similar to \"d\" but this one is translatable (takes first day of week of the current locale) E 4 Day of week number (from 1 (Monday) to 7 (Sunday)) H 17 Hour from 0 to 23 HH 17 Hour with trailing zero from 00 to 23 h 5 Hour from 0 to 12 hh 05 Hour with trailing zero from 00 to 12 k 17 Hour from 1 to 24 kk 17 Hour with trailing zero from 01 to 24 L 04/09/1986 Date (in local format) LL September 4 1986 Month name, day of month, year LLL September 4 1986 8:30 PM Month name, day of month, year, time LLLL Thursday, September 4 1986 8:30 PM Day of week, month name, day of month, year, time LT 8:30 PM Time (without seconds) LTS 8:30:00 PM Time (with seconds) m 4 Minute from 0 to 59 mm 04 Minute with trailing zero from 00 to 59 a pm Meridiem am/pm A PM Meridiem AM/PM s 5 Second from 0 to 59 ss 05 Second with trailing zero from 00 to 59 S 0 Second tenth SS 08 Second hundredth (on 2 digits with trailing zero) SSS 084 Millisecond (on 3 digits with trailing zeros) SSSS 0845 Second ten thousandth (on 4 digits with trailing zeros) SSSSS 08451 Second hundred thousandth (on 5 digits with trailing zeros) SSSSSS 084512 Microsecond (on 6 digits with trailing zeros) SSSSSSS 0845120 Second ten millionth (on 7 digits with trailing zeros) SSSSSSSS 08451200 Second hundred millionth (on 8 digits with trailing zeros) SSSSSSSSS 084512000 Nanosecond (on 9 digits with trailing zeros) M 1 Month from 1 to 12 MM 01 Month with trailing zero from 01 to 12 MMM Jan Short month name, translatable MMMM January Month name, translatable Mo 1st Month with ordinal suffix from 1st to 12th, translatable Q 1 Quarter from 1 to 4 Qo 1st Quarter with ordinal suffix from 1st to 4th, translatable G 2017 ISO week year (see ISO week date) GG 2017 ISO week year (on 2 digits with trailing zero) GGG 2017 ISO week year (on 3 digits with trailing zeros) GGGG 2017 ISO week year (on 4 digits with trailing zeros) GGGGG 02017 ISO week year (on 5 digits with trailing zeros) g 2017 Week year according to locale settings, translatable gg 2017 Week year according to locale settings (on 2 digits with trailing zero), translatable ggg 2017 Week year according to locale settings (on 3 digits with trailing zeros), translatable gggg 2017 Week year according to locale settings (on 4 digits with trailing zeros), translatable ggggg 02017 Week year according to locale settings (on 5 digits with trailing zeros), translatable W 1 ISO week number in the year (see ISO week date) WW 01 ISO week number in the year (on 2 digits with trailing zero) Wo 1st ISO week number in the year with ordinal suffix, translatable w 1 Week number in the year according to locale settings, translatable ww 01 Week number in the year according to locale settings (on 2 digits with trailing zero) wo 1st Week number in the year according to locale settings with ordinal suffix, translatable x 1483635845085 Millisecond-precision timestamp (same as date.getTime() in JavaScript) X 1483635845 Timestamp (number of seconds since 1970-01-01) Y 2017 Full year from -9999 to 9999 YY 17 Year on 2 digits from 00 to 99 YYYY 2017 Year on 4 digits from 0000 to 9999 YYYYY 02017 Year on 5 digits from 00000 to 09999 YYYYYY +002017 Year on 5 digits with sign from -09999 to +09999 z UTC Abbreviated time zone name zz UTC Time zone name Z +00:00 Time zone offset HH:mm ZZ +0000 Time zone offset HHmm Source: Carbon Docs","title":"Date format characters"},{"location":"webhookscript/date-locales.html","text":"List of available date function locales \u00b6 aa aa_DJ aa_ER aa_ER@saaho aa_ET af af_NA af_ZA agq agr agr_PE ak ak_GH am am_ET an an_ES anp anp_IN ar ar_AE ar_BH ar_DJ ar_DZ ar_EG ar_EH ar_ER ar_IL ar_IN ar_IQ ar_JO ar_KM ar_KW ar_LB ar_LY ar_MA ar_MR ar_OM ar_PS ar_QA ar_SA ar_SD ar_SO ar_SS ar_SY ar_Shakl ar_TD ar_TN ar_YE as as_IN asa ast ast_ES ayc ayc_PE az az_AZ az_Cyrl az_IR az_Latn bas be be_BY be_BY@latin bem bem_ZM ber ber_DZ ber_MA bez bg bg_BG bhb bhb_IN bho bho_IN bi bi_VU bm bn bn_BD bn_IN bo bo_CN bo_IN br br_FR brx brx_IN bs bs_BA bs_Cyrl bs_Latn byn byn_ER ca ca_AD ca_ES ca_ES_Valencia ca_FR ca_IT ccp ccp_IN ce ce_RU cgg chr chr_US cmn cmn_TW crh crh_UA cs cs_CZ csb csb_PL cu cv cv_RU cy cy_GB da da_DK da_GL dav de de_AT de_BE de_CH de_DE de_IT de_LI de_LU dje doi doi_IN dsb dsb_DE dua dv dv_MV dyo dz dz_BT ebu ee ee_TG el el_CY el_GR en en_001 en_150 en_AG en_AI en_AS en_AT en_AU en_BB en_BE en_BI en_BM en_BS en_BW en_BZ en_CA en_CC en_CH en_CK en_CM en_CX en_CY en_DE en_DG en_DK en_DM en_ER en_FI en_FJ en_FK en_FM en_GB en_GD en_GG en_GH en_GI en_GM en_GU en_GY en_HK en_IE en_IL en_IM en_IN en_IO en_ISO en_JE en_JM en_KE en_KI en_KN en_KY en_LC en_LR en_LS en_MG en_MH en_MO en_MP en_MS en_MT en_MU en_MW en_MY en_NA en_NF en_NG en_NL en_NR en_NU en_NZ en_PG en_PH en_PK en_PN en_PR en_PW en_RW en_SB en_SC en_SD en_SE en_SG en_SH en_SI en_SL en_SS en_SX en_SZ en_TC en_TK en_TO en_TT en_TV en_TZ en_UG en_UM en_US en_US_Posix en_VC en_VG en_VI en_VU en_WS en_ZA en_ZM en_ZW eo es es_419 es_AR es_BO es_BR es_BZ es_CL es_CO es_CR es_CU es_DO es_EA es_EC es_ES es_GQ es_GT es_HN es_IC es_MX es_NI es_PA es_PE es_PH es_PR es_PY es_SV es_US es_UY es_VE et et_EE eu eu_ES ewo fa fa_AF fa_IR ff ff_CM ff_GN ff_MR ff_SN fi fi_FI fil fil_PH fo fo_DK fo_FO fr fr_BE fr_BF fr_BI fr_BJ fr_BL fr_CA fr_CD fr_CF fr_CG fr_CH fr_CI fr_CM fr_DJ fr_DZ fr_FR fr_GA fr_GF fr_GN fr_GP fr_GQ fr_HT fr_KM fr_LU fr_MA fr_MC fr_MF fr_MG fr_ML fr_MQ fr_MR fr_MU fr_NC fr_NE fr_PF fr_PM fr_RE fr_RW fr_SC fr_SN fr_SY fr_TD fr_TG fr_TN fr_VU fr_WF fr_YT fur fur_IT fy fy_DE fy_NL ga ga_IE gd gd_GB gez gez_ER gez_ET gl gl_ES gom gom_Latn gsw gsw_CH gsw_FR gsw_LI gu gu_IN guz gv gv_GB ha ha_GH ha_NE ha_NG hak hak_TW haw he he_IL hi hi_IN hif hif_FJ hne hne_IN hr hr_BA hr_HR hsb hsb_DE ht ht_HT hu hu_HU hy hy_AM i18n ia ia_FR id id_ID ig ig_NG ii ik ik_CA in is is_IS it it_CH it_IT it_SM it_VA iu iu_CA iw ja ja_JP jgo jmc jv ka ka_GE kab kab_DZ kam kde kea khq ki kk kk_KZ kkj kl kl_GL kln km km_KH kn kn_IN ko ko_KP ko_KR kok kok_IN ks ks_IN ks_IN@devanagari ksb ksf ksh ku ku_TR kw kw_GB ky ky_KG lag lb lb_LU lg lg_UG li li_NL lij lij_IT lkt ln ln_AO ln_CD ln_CF ln_CG lo lo_LA lrc lrc_IQ lt lt_LT lu luo luy lv lv_LV lzh lzh_TW mag mag_IN mai mai_IN mas mas_TZ mer mfe mfe_MU mg mg_MG mgh mgo mhr mhr_RU mi mi_NZ miq miq_NI mjw mjw_IN mk mk_MK ml ml_IN mn mn_MN mni mni_IN mo mr mr_IN ms ms_BN ms_MY ms_SG mt mt_MT mua my my_MM mzn nan nan_TW nan_TW@latin naq nb nb_NO nb_SJ nd nds nds_DE nds_NL ne ne_IN ne_NP nhn nhn_MX niu niu_NU nl nl_AW nl_BE nl_BQ nl_CW nl_NL nl_SR nl_SX nmg nn nn_NO nnh no nr nr_ZA nso nso_ZA nus nyn oc oc_FR om om_ET om_KE or or_IN os os_RU pa pa_Arab pa_Guru pa_IN pa_PK pap pap_AW pap_CW pl pl_PL prg ps ps_AF pt pt_AO pt_BR pt_CH pt_CV pt_GQ pt_GW pt_LU pt_MO pt_MZ pt_PT pt_ST pt_TL qu qu_BO qu_EC quz quz_PE raj raj_IN rm rn ro ro_MD ro_RO rof ru ru_BY ru_KG ru_KZ ru_MD ru_RU ru_UA rw rw_RW rwk sa sa_IN sah sah_RU saq sat sat_IN sbp sc sc_IT sd sd_IN sd_IN@devanagari se se_FI se_NO se_SE seh ses sg sgs sgs_LT sh shi shi_Latn shi_Tfng shn shn_MM shs shs_CA si si_LK sid sid_ET sk sk_SK sl sl_SI sm sm_WS smn sn so so_DJ so_ET so_KE so_SO sq sq_AL sq_MK sq_XK sr sr_Cyrl sr_Cyrl_BA sr_Cyrl_ME sr_Cyrl_XK sr_Latn sr_Latn_BA sr_Latn_ME sr_Latn_XK sr_ME sr_RS sr_RS@latin ss ss_ZA st st_ZA sv sv_AX sv_FI sv_SE sw sw_CD sw_KE sw_TZ sw_UG szl szl_PL ta ta_IN ta_LK ta_MY ta_SG tcy tcy_IN te te_IN teo teo_KE tet tg tg_TJ th th_TH the the_NP ti ti_ER ti_ET tig tig_ER tk tk_TM tl tl_PH tlh tn tn_ZA to to_TO tpi tpi_PG tr tr_CY tr_TR ts ts_ZA tt tt_RU tt_RU@iqtelif twq tzl tzm tzm_Latn ug ug_CN uk uk_UA unm unm_US ur ur_IN ur_PK uz uz_Arab uz_Cyrl uz_Latn uz_UZ uz_UZ@cyrillic vai vai_Latn vai_Vaii ve ve_ZA vi vi_VN vo vun wa wa_BE wae wae_CH wal wal_ET wo wo_SN xh xh_ZA xog yav yi yi_US yo yo_BJ yo_NG yue yue_HK yue_Hans yue_Hant yuw yuw_PG zgh zh zh_CN zh_HK zh_Hans zh_Hans_HK zh_Hans_MO zh_Hans_SG zh_Hant zh_Hant_HK zh_Hant_MO zh_Hant_TW zh_MO zh_SG zh_TW zh_YUE zu zu_ZA","title":"List of available date function locales"},{"location":"webhookscript/date-locales.html#list-of-available-date-function-locales","text":"aa aa_DJ aa_ER aa_ER@saaho aa_ET af af_NA af_ZA agq agr agr_PE ak ak_GH am am_ET an an_ES anp anp_IN ar ar_AE ar_BH ar_DJ ar_DZ ar_EG ar_EH ar_ER ar_IL ar_IN ar_IQ ar_JO ar_KM ar_KW ar_LB ar_LY ar_MA ar_MR ar_OM ar_PS ar_QA ar_SA ar_SD ar_SO ar_SS ar_SY ar_Shakl ar_TD ar_TN ar_YE as as_IN asa ast ast_ES ayc ayc_PE az az_AZ az_Cyrl az_IR az_Latn bas be be_BY be_BY@latin bem bem_ZM ber ber_DZ ber_MA bez bg bg_BG bhb bhb_IN bho bho_IN bi bi_VU bm bn bn_BD bn_IN bo bo_CN bo_IN br br_FR brx brx_IN bs bs_BA bs_Cyrl bs_Latn byn byn_ER ca ca_AD ca_ES ca_ES_Valencia ca_FR ca_IT ccp ccp_IN ce ce_RU cgg chr chr_US cmn cmn_TW crh crh_UA cs cs_CZ csb csb_PL cu cv cv_RU cy cy_GB da da_DK da_GL dav de de_AT de_BE de_CH de_DE de_IT de_LI de_LU dje doi doi_IN dsb dsb_DE dua dv dv_MV dyo dz dz_BT ebu ee ee_TG el el_CY el_GR en en_001 en_150 en_AG en_AI en_AS en_AT en_AU en_BB en_BE en_BI en_BM en_BS en_BW en_BZ en_CA en_CC en_CH en_CK en_CM en_CX en_CY en_DE en_DG en_DK en_DM en_ER en_FI en_FJ en_FK en_FM en_GB en_GD en_GG en_GH en_GI en_GM en_GU en_GY en_HK en_IE en_IL en_IM en_IN en_IO en_ISO en_JE en_JM en_KE en_KI en_KN en_KY en_LC en_LR en_LS en_MG en_MH en_MO en_MP en_MS en_MT en_MU en_MW en_MY en_NA en_NF en_NG en_NL en_NR en_NU en_NZ en_PG en_PH en_PK en_PN en_PR en_PW en_RW en_SB en_SC en_SD en_SE en_SG en_SH en_SI en_SL en_SS en_SX en_SZ en_TC en_TK en_TO en_TT en_TV en_TZ en_UG en_UM en_US en_US_Posix en_VC en_VG en_VI en_VU en_WS en_ZA en_ZM en_ZW eo es es_419 es_AR es_BO es_BR es_BZ es_CL es_CO es_CR es_CU es_DO es_EA es_EC es_ES es_GQ es_GT es_HN es_IC es_MX es_NI es_PA es_PE es_PH es_PR es_PY es_SV es_US es_UY es_VE et et_EE eu eu_ES ewo fa fa_AF fa_IR ff ff_CM ff_GN ff_MR ff_SN fi fi_FI fil fil_PH fo fo_DK fo_FO fr fr_BE fr_BF fr_BI fr_BJ fr_BL fr_CA fr_CD fr_CF fr_CG fr_CH fr_CI fr_CM fr_DJ fr_DZ fr_FR fr_GA fr_GF fr_GN fr_GP fr_GQ fr_HT fr_KM fr_LU fr_MA fr_MC fr_MF fr_MG fr_ML fr_MQ fr_MR fr_MU fr_NC fr_NE fr_PF fr_PM fr_RE fr_RW fr_SC fr_SN fr_SY fr_TD fr_TG fr_TN fr_VU fr_WF fr_YT fur fur_IT fy fy_DE fy_NL ga ga_IE gd gd_GB gez gez_ER gez_ET gl gl_ES gom gom_Latn gsw gsw_CH gsw_FR gsw_LI gu gu_IN guz gv gv_GB ha ha_GH ha_NE ha_NG hak hak_TW haw he he_IL hi hi_IN hif hif_FJ hne hne_IN hr hr_BA hr_HR hsb hsb_DE ht ht_HT hu hu_HU hy hy_AM i18n ia ia_FR id id_ID ig ig_NG ii ik ik_CA in is is_IS it it_CH it_IT it_SM it_VA iu iu_CA iw ja ja_JP jgo jmc jv ka ka_GE kab kab_DZ kam kde kea khq ki kk kk_KZ kkj kl kl_GL kln km km_KH kn kn_IN ko ko_KP ko_KR kok kok_IN ks ks_IN ks_IN@devanagari ksb ksf ksh ku ku_TR kw kw_GB ky ky_KG lag lb lb_LU lg lg_UG li li_NL lij lij_IT lkt ln ln_AO ln_CD ln_CF ln_CG lo lo_LA lrc lrc_IQ lt lt_LT lu luo luy lv lv_LV lzh lzh_TW mag mag_IN mai mai_IN mas mas_TZ mer mfe mfe_MU mg mg_MG mgh mgo mhr mhr_RU mi mi_NZ miq miq_NI mjw mjw_IN mk mk_MK ml ml_IN mn mn_MN mni mni_IN mo mr mr_IN ms ms_BN ms_MY ms_SG mt mt_MT mua my my_MM mzn nan nan_TW nan_TW@latin naq nb nb_NO nb_SJ nd nds nds_DE nds_NL ne ne_IN ne_NP nhn nhn_MX niu niu_NU nl nl_AW nl_BE nl_BQ nl_CW nl_NL nl_SR nl_SX nmg nn nn_NO nnh no nr nr_ZA nso nso_ZA nus nyn oc oc_FR om om_ET om_KE or or_IN os os_RU pa pa_Arab pa_Guru pa_IN pa_PK pap pap_AW pap_CW pl pl_PL prg ps ps_AF pt pt_AO pt_BR pt_CH pt_CV pt_GQ pt_GW pt_LU pt_MO pt_MZ pt_PT pt_ST pt_TL qu qu_BO qu_EC quz quz_PE raj raj_IN rm rn ro ro_MD ro_RO rof ru ru_BY ru_KG ru_KZ ru_MD ru_RU ru_UA rw rw_RW rwk sa sa_IN sah sah_RU saq sat sat_IN sbp sc sc_IT sd sd_IN sd_IN@devanagari se se_FI se_NO se_SE seh ses sg sgs sgs_LT sh shi shi_Latn shi_Tfng shn shn_MM shs shs_CA si si_LK sid sid_ET sk sk_SK sl sl_SI sm sm_WS smn sn so so_DJ so_ET so_KE so_SO sq sq_AL sq_MK sq_XK sr sr_Cyrl sr_Cyrl_BA sr_Cyrl_ME sr_Cyrl_XK sr_Latn sr_Latn_BA sr_Latn_ME sr_Latn_XK sr_ME sr_RS sr_RS@latin ss ss_ZA st st_ZA sv sv_AX sv_FI sv_SE sw sw_CD sw_KE sw_TZ sw_UG szl szl_PL ta ta_IN ta_LK ta_MY ta_SG tcy tcy_IN te te_IN teo teo_KE tet tg tg_TJ th th_TH the the_NP ti ti_ER ti_ET tig tig_ER tk tk_TM tl tl_PH tlh tn tn_ZA to to_TO tpi tpi_PG tr tr_CY tr_TR ts ts_ZA tt tt_RU tt_RU@iqtelif twq tzl tzm tzm_Latn ug ug_CN uk uk_UA unm unm_US ur ur_IN ur_PK uz uz_Arab uz_Cyrl uz_Latn uz_UZ uz_UZ@cyrillic vai vai_Latn vai_Vaii ve ve_ZA vi vi_VN vo vun wa wa_BE wae wae_CH wal wal_ET wo wo_SN xh xh_ZA xog yav yi yi_US yo yo_BJ yo_NG yue yue_HK yue_Hans yue_Hant yuw yuw_PG zgh zh zh_CN zh_HK zh_Hans zh_Hans_HK zh_Hans_MO zh_Hans_SG zh_Hant zh_Hant_HK zh_Hant_MO zh_Hant_TW zh_MO zh_SG zh_TW zh_YUE zu zu_ZA","title":"List of available date function locales"},{"location":"webhookscript/examples.html","text":"WebhookScript Examples \u00b6 Info Do you have a nice example to share with other users? Or looking for even more examples? Take a look at the WebhookScript example repository, and make a pull request if you want to contribute: Webhook.site Script Repository Convert a date \u00b6 In this example, if we assume the variable $mydate$ is set to 2021-07-26T16:23:50+03:00 , the variable will be overwritten to 2021.07.26 16:23 for actions running after the WebhookScript action. input = var ( '$mydate$' ) output = date_format ( input , 'YYYY.MM.DD HH:mm' ) set ( '$mydate$' , output ) More information about available date format characters. Request counter \u00b6 This script uses Global Variables to keep track of the amount of requests sent to a Webhook.site URL within the last 10 minutes. Once the 10 minutes are up, it sends a request to another endpoint with the amount of requests and the date, and then it resets the counter. period = 600 // 10 minutes in seconds currentPeriod = var ( 'current_period' , now ()) counter = var ( 'counter' , 0 ). to_number () currentPeriodSecs = date_interval ( currentPeriod ) if ( currentPeriodSecs < period ) { counter = counter + 1 store ( 'counter' , counter ) } else { // Above 10 minutes, reset and send request store ( 'counter' , 0 ) store ( 'current_period' , now ()) request ( 'https://webhook.site/14fea227-60ab-4291-b679-12b8c104c78e' , json_encode ([ \"counter\" : counter , \"timestamp\" : now (), ]), 'POST' ) } echo ( 'count : {}' . format ( counter )) echo ( 'period: {}' . format ( currentPeriodSecs )) Parse and loop through JSON \u00b6 This example shows various ways of iterating through JSON arrays, comparing data and rearranging it to another format. First, it loops through the items array, verifying that the item must have a group ID that a specific one from an array. Second, it changes the fields array from an array of objects to a key-value object using the name and value fields. // Define input as a JSON string json = '{ \"items\": [ { \"first_name\": \"Jack\", \"last_name\": \"Daniels\", \"phone\": \"+1 100-555-999\", \"group_ids\": [346, 46456, 23423], \"fields\": [ { \"id\": 45698, \"name\": \"birthday\", \"value\": \"1990-01-01\" }, { \"id\": 344, \"name\": \"car\", \"value\": \"BMW M2\" } ] }, { \"first_name\": \"Jim\", \"last_name\": \"Beam\", \"phone\": \"+1 123-555-788\", \"group_ids\": [3456, 43546, 234234, 456456], \"fields\": [ { \"id\": 45698, \"name\": \"birthday\", \"value\": \"1987-05-01\" }, { \"id\": 344, \"name\": \"car\", \"value\": \"Toyota Corolla\" }, { \"id\": 248, \"name\": \"nickname\", \"value\": \"Jimmie\" } ] } ] }' // Decode to array data = json_decode ( json ) // Define an array of valid groups valid_groups = [ 43546 , 999999 ] // Loop over items for ( item in data [ 'items' ]) { // Per default, item does not have a valid group. has_valid_group = false // Loop through each group ID in the data for ( group_id in item [ 'group_ids' ]) { // Does the \"valid_groups\" array contain this group ID? if ( valid_groups . contains ( group_id )) { has_valid_group = true } } if ( has_valid_group ) { echo ( item [ 'first_name' ] + ' did not have a valid group.' ) } else { echo ( item [ 'first_name' ] + ' has a valid group.' ) } // Extract \"fields\" into an array of key => value fields = [] for ( field in item [ 'fields' ]) { fields [ field [ 'name' ]] = field [ 'value' ] } echo ( json_encode ( fields )) } Returns the following output: Jack has a valid group. { \"birthday\": \"1990-01-01\", \"car\": \"BMW M2\" } Jim did not have a valid group. { \"birthday\": \"1987-05-01\", \"car\": \"Toyota Corolla\", \"nickname\": \"Jimmie\" } Loop through and compare items \u00b6 In this example, we loop through a series of items and pick the item that's contained in a string. location = 'test ABC example' ; compares = [ '123' : 'token1' , 'ABC' : 'token2' , 'DEF' : 'token3' , ] token = '' ; // Default value for ( compare in array_keys ( compares )) { if ( location . contains ( compare )) { token = compares [ compare ] } } dump ( token ) // token2 Submit request with escaped JSON \u00b6 If you're building a JSON object, we recommend doing it in WebhookScript instead of typing JSON in the Send Request action type (If you do anyway, we recommend using the .json Variable Modifier, More info here ). In this example, one of the JSON values contain HTML generated using the string_format function. html_template = '<b><u>New {} lead</u></b><br> <br> Location: {}<br> Message from customer:<br> <div style=\"background:#CCC\">{}</div>' html_message = string_format ( html_template , var ( 'lead_type' ), var ( 'location' ), var ( 'message' ) ) payload = json_encode ([ 'lead' : [ 'firstname' : var ( 'firstname' ), 'lastname' : var ( 'lastname' ), 'html' : html_message ] ]) request ( 'https://example.com/leads' , payload , 'POST' , [ 'Content-Type: application/json' ] ) Validate request \u00b6 In this example, we use a common method of verifying webhooks by taking a hash of its contents concatenated to a secret. It demonstrates the way WebhookScript can get various information about the request by using the get_variable() function, as well as string concatenation, hashing , if statements and returning responses with content, status codes and headers using respond() , which halts execution. verification_secret = \"JHRlc3RTY3JpcHRTZWNyZXQ\" verification_challenge = var ( \"request.header.x-request-verification\" ) verification_result = hash ( var ( \"request.content\" ) + verification_secret , \"sha256\" ) if ( ! verification_challenge or verification_challenge != verification_result ) { respond ( \"Invalid request\" , 500 ) } respond ( \"Successful request\" , 200 ) Send a x-www-form-urlencoded request \u00b6 content = query ([ 'country' : 'Cura\u00e7ao' , 'population' : 158665 ]) headers = [ 'Content-Type: application/x-www-form-urlencoded' ]; response = request ( 'https://example.com' , content , 'POST' , headers ); Transform and resend \u00b6 In the following, an incoming request is JSON decoded to an array, transformed and sent to \"Web Service 1\". Then the output is saved and passed on to \"Web Service 2\" in XML format. Basic error handling and validation is demonstrated. // Configuration, fetched from the users' Global Variables in Control Panel ws1_api_key = var ( 'WS1_KEY' ) ws2_user_token = var ( 'WS1_USER_TOKEN' ) // Function for error handling which stops processing further actions/code and returns an error message function error ( message ) { echo ( 'Error: {}' . format ( message )) respond ( json_encode ([ 'error' : message ]), 500 ) } // Parse original request orig_req = json_decode ( var ( 'request.content' )) // If the JSON was invalid if ( ! orig_req ) { error ( 'Invalid request' ) } // Send request to Web Service 1, using format() for string placeholders // with JSON decoded values from the incoming request body ws1_url = 'https://ws1.example.com/3.0/lists/{}/interest-categories/{}/interests' . format ( orig_req [ 'listId' ], orig_req [ 'groupId' ] ) ws1_content = [ 'first_name' : orig_req [ 'firstName' ], 'last_name' : orig_req [ 'lastName' ] ] ws1_response = request ( ws1_url , json_encode ( ws1_content ), 'POST' , [ 'Authorization: Basic ' + ws1_api_key ] ) // Don't go further if the Web Service 1 step didn't succeed if ( ws1_response [ 'status' ] != 200 ) { echo ( ws1_response [ 'content' ]); // Log content to output error ( 'Invalid response from WS1' ) } // Get a value from the Web Service 1 request ws1_response_id = json_decode ( ws1_response )[ 'id' ] // Pass response on to Web Service 2 in XML format, using a multi-line string and format() ws2_content = ' <qdbapi> <usertoken>{}</usertoken> <listid>{}</listid> <field fid=\"7\">{}</field> </qdbapi>' . format ( ws2_user_token , orig_req [ 'listId' ], ws1_group_id ) ws2_response = request ( 'https://ws2.example.com/db/zzzzzz' , ws2_content , 'POST' , [ \"Action: API_EditRecord\" , \"Content-Type: application/xml\" ] ) if ( ws2_response [ 'status' ] != 200 ) { echo ( ws2_response [ 'content' ]); // Log content to debug log error ( 'Invalid response from WS2' ) } // Output the WS2 response content to debug output echo ( ws2_response [ 'content' ]) respond ( 'OK' , 200 ) Telegram bot \u00b6 The Messaging service Telegram allows bots using their API. The general principle is this: Create a Bot using the /newbot command sent to the BotFather Telegram User Using the bot token sent from BotFather , use the Telegram API to create a Webhook subscription (using your Webhook.site URL) Add some logic using WebhookScript! Note: Everywhere you see TELEGRAM_TOKEN , replace it with the token you got from BotFather! Subscribe to Webhook \u00b6 To create the Webhook subscription, change the token and the Webhook.site URL to your own and go to the following URL in your browser: https://api.telegram.org/bot TELEGRAM_TOKEN /setWebhook?url= https://webhook.site/a1351781 You should get a response similar to this: { \"ok\" : true , \"result\" : true , \"description\" : \"Webhook was set\" } First incoming Webhook \u00b6 When you add your bot to your Telegram contacts list, Telegram automatically sends a /start command to the bot, which triggers a Webhook similar to this: { \"update_id\" : 176446573 , \"message\" : { \"message_id\" : 1 , \"from\" : { \"id\" : 2346545645 , \"is_bot\" : false , \"first_name\" : \"Simon\" , \"language_code\" : \"en\" }, \"chat\" : { \"id\" : 34534673234 , \"first_name\" : \"Simon\" , \"type\" : \"private\" }, \"date\" : 1581706369 , \"text\" : \"/start\" , \"entities\" : [ { \"offset\" : 0 , \"length\" : 6 , \"type\" : \"bot_command\" } ] } } You should be able to see this in the Webhook.site requests list. From this, we have all the parts needed to build a script that answers to commands: // Telegram API token token = 'TELEGRAM_TOKEN' ; content = json_decode ( var ( '$request.content$' )); msg = content [ 'message' ][ 'text' ]; response = \"Couldn't come up with anything witty.\" ; if ( msg == \"How's it going?\" ) { response = 'Pretty good.' } if ( msg == r \"You're (.*)\" ) { match = regex_extract_first ( r \"You're (.*)\" , msg ) response = 'No, YOU are {}' . format ( match ); } if ( msg == \"/start\" ) { response = \"Hi! I'm WebhookBot.\" } url = 'https://api.telegram.org/bot{}/sendMessage' . format ( token ) json = [ 'chat_id' : content [ 'message' ][ 'chat' ][ 'id' ], 'text' : response ] request ( url , json_encode ( json ), 'POST' ); Things to note: The API token is added to the script, but could also have been saved in Global Variables in Control Panel and fetched out with the var() function. The third if-statement uses regex matching to provide a dynamic response. Someone typing \"You're a bot\" would receive \"No, YOU are a bot\" Finally, we JSON encode a WebhookScript array and send it using the request() function. Simply copy this script into a WebhookScript Custom Action (remember to change the token!), and click Save Action. Then, you can interact with the bot using the Telegram app: And that's it! Congratulations on your bot. It's not very smart, but from here, the possibilities are endless! Building HTML content \u00b6 The following script builds a piece of HTML content using the string_format function, based on previously defined variables, and shows how to use a function to return different content based on input. After this, it sends a JSON request (by converting an array to JSON via the json_encode function) containing the HTML using basic Bearer authentication. function alert_class () { if ( status == 'Operational' ) { return 'success' ; } if ( status == 'Degraded Performance' ) { return 'warning' ; } if ( string_contains ( status , 'Disruption' )) { return 'danger' ; } } template = ' <div class=\"alert alert-{}\"> <h2 class=\"alert-title\">{} - {}</h2> <p> {}<br /> State: {}<br /> Component affected: {} </p> <p>{}</p> </div>' ; postbody = string_format ( template , alert_class (), message , state , component , to_date ( 'now' ). date_format ( 'LLLL' ) ) json = [ 'alert' : [ 'title' : '{} - {}' . format ( component , state ), 'body' : postbody , 'draft' : false , 'types' : [ 'alert' ] ], ] request ( 'http://example.com/alerts' , json_encode ( json ), 'POST' , [ 'Content-Type: application/json' , 'Authorization: Basic {}' . format ( token ) ] ) Uploading and parsing CSV file \u00b6 With this script, a file upload form is displayed when visiting the URL. After submitting the form, the CSV file is processed and validated (in this example, there must be more than 2 rows). If it can't be validated, an error message is shown. Finally, the user is shown an \"Upload successful\" message if the CSV file is valid. url = var ( 'request.url' ) set_header ( 'content-type' , 'text/html' ); // Display file upload form and exit if HTTP method is not POST if ( var ( 'request.method' ) != 'POST' ) { respond ( ' <html> <head><title>Upload CSV</title></head> <body> <h1>Upload CSV</h1> <form action=\"{}\" method=\"POST\" enctype=\"multipart/form-data\"> <input type=\"file\" name=\"file\"/> <button type=\"submit\">Upload</button> </form> </body> </html> ' . format ( url )) } // Use a comma as delimiter and treat first row (0) as header row array = csv_to_array ( var ( 'request.file.file.content' ), ',' , 0 ) // If CSV can't be parsed, or there's less than 2 rows, fail if ( ! array or array . length () < 2 ) { respond ( ' <h1>Could not parse CSV</h1> <a href=\"{}\">Upload again</a> ' . format ( url )); } // Display the parsed CSV in JSON format respond ( ' <h1>Upload successful</h1> <pre>{}</pre> <p> <a href=\"{}\">Upload again</a> </p> ' . format ( json_encode ( array ), url ))","title":"Examples"},{"location":"webhookscript/examples.html#webhookscript-examples","text":"Info Do you have a nice example to share with other users? Or looking for even more examples? Take a look at the WebhookScript example repository, and make a pull request if you want to contribute: Webhook.site Script Repository","title":"WebhookScript Examples"},{"location":"webhookscript/examples.html#convert-a-date","text":"In this example, if we assume the variable $mydate$ is set to 2021-07-26T16:23:50+03:00 , the variable will be overwritten to 2021.07.26 16:23 for actions running after the WebhookScript action. input = var ( '$mydate$' ) output = date_format ( input , 'YYYY.MM.DD HH:mm' ) set ( '$mydate$' , output ) More information about available date format characters.","title":"Convert a date"},{"location":"webhookscript/examples.html#request-counter","text":"This script uses Global Variables to keep track of the amount of requests sent to a Webhook.site URL within the last 10 minutes. Once the 10 minutes are up, it sends a request to another endpoint with the amount of requests and the date, and then it resets the counter. period = 600 // 10 minutes in seconds currentPeriod = var ( 'current_period' , now ()) counter = var ( 'counter' , 0 ). to_number () currentPeriodSecs = date_interval ( currentPeriod ) if ( currentPeriodSecs < period ) { counter = counter + 1 store ( 'counter' , counter ) } else { // Above 10 minutes, reset and send request store ( 'counter' , 0 ) store ( 'current_period' , now ()) request ( 'https://webhook.site/14fea227-60ab-4291-b679-12b8c104c78e' , json_encode ([ \"counter\" : counter , \"timestamp\" : now (), ]), 'POST' ) } echo ( 'count : {}' . format ( counter )) echo ( 'period: {}' . format ( currentPeriodSecs ))","title":"Request counter"},{"location":"webhookscript/examples.html#parse-and-loop-through-json","text":"This example shows various ways of iterating through JSON arrays, comparing data and rearranging it to another format. First, it loops through the items array, verifying that the item must have a group ID that a specific one from an array. Second, it changes the fields array from an array of objects to a key-value object using the name and value fields. // Define input as a JSON string json = '{ \"items\": [ { \"first_name\": \"Jack\", \"last_name\": \"Daniels\", \"phone\": \"+1 100-555-999\", \"group_ids\": [346, 46456, 23423], \"fields\": [ { \"id\": 45698, \"name\": \"birthday\", \"value\": \"1990-01-01\" }, { \"id\": 344, \"name\": \"car\", \"value\": \"BMW M2\" } ] }, { \"first_name\": \"Jim\", \"last_name\": \"Beam\", \"phone\": \"+1 123-555-788\", \"group_ids\": [3456, 43546, 234234, 456456], \"fields\": [ { \"id\": 45698, \"name\": \"birthday\", \"value\": \"1987-05-01\" }, { \"id\": 344, \"name\": \"car\", \"value\": \"Toyota Corolla\" }, { \"id\": 248, \"name\": \"nickname\", \"value\": \"Jimmie\" } ] } ] }' // Decode to array data = json_decode ( json ) // Define an array of valid groups valid_groups = [ 43546 , 999999 ] // Loop over items for ( item in data [ 'items' ]) { // Per default, item does not have a valid group. has_valid_group = false // Loop through each group ID in the data for ( group_id in item [ 'group_ids' ]) { // Does the \"valid_groups\" array contain this group ID? if ( valid_groups . contains ( group_id )) { has_valid_group = true } } if ( has_valid_group ) { echo ( item [ 'first_name' ] + ' did not have a valid group.' ) } else { echo ( item [ 'first_name' ] + ' has a valid group.' ) } // Extract \"fields\" into an array of key => value fields = [] for ( field in item [ 'fields' ]) { fields [ field [ 'name' ]] = field [ 'value' ] } echo ( json_encode ( fields )) } Returns the following output: Jack has a valid group. { \"birthday\": \"1990-01-01\", \"car\": \"BMW M2\" } Jim did not have a valid group. { \"birthday\": \"1987-05-01\", \"car\": \"Toyota Corolla\", \"nickname\": \"Jimmie\" }","title":"Parse and loop through JSON"},{"location":"webhookscript/examples.html#loop-through-and-compare-items","text":"In this example, we loop through a series of items and pick the item that's contained in a string. location = 'test ABC example' ; compares = [ '123' : 'token1' , 'ABC' : 'token2' , 'DEF' : 'token3' , ] token = '' ; // Default value for ( compare in array_keys ( compares )) { if ( location . contains ( compare )) { token = compares [ compare ] } } dump ( token ) // token2","title":"Loop through and compare items"},{"location":"webhookscript/examples.html#submit-request-with-escaped-json","text":"If you're building a JSON object, we recommend doing it in WebhookScript instead of typing JSON in the Send Request action type (If you do anyway, we recommend using the .json Variable Modifier, More info here ). In this example, one of the JSON values contain HTML generated using the string_format function. html_template = '<b><u>New {} lead</u></b><br> <br> Location: {}<br> Message from customer:<br> <div style=\"background:#CCC\">{}</div>' html_message = string_format ( html_template , var ( 'lead_type' ), var ( 'location' ), var ( 'message' ) ) payload = json_encode ([ 'lead' : [ 'firstname' : var ( 'firstname' ), 'lastname' : var ( 'lastname' ), 'html' : html_message ] ]) request ( 'https://example.com/leads' , payload , 'POST' , [ 'Content-Type: application/json' ] )","title":"Submit request with escaped JSON"},{"location":"webhookscript/examples.html#validate-request","text":"In this example, we use a common method of verifying webhooks by taking a hash of its contents concatenated to a secret. It demonstrates the way WebhookScript can get various information about the request by using the get_variable() function, as well as string concatenation, hashing , if statements and returning responses with content, status codes and headers using respond() , which halts execution. verification_secret = \"JHRlc3RTY3JpcHRTZWNyZXQ\" verification_challenge = var ( \"request.header.x-request-verification\" ) verification_result = hash ( var ( \"request.content\" ) + verification_secret , \"sha256\" ) if ( ! verification_challenge or verification_challenge != verification_result ) { respond ( \"Invalid request\" , 500 ) } respond ( \"Successful request\" , 200 )","title":"Validate request"},{"location":"webhookscript/examples.html#send-a-x-www-form-urlencoded-request","text":"content = query ([ 'country' : 'Cura\u00e7ao' , 'population' : 158665 ]) headers = [ 'Content-Type: application/x-www-form-urlencoded' ]; response = request ( 'https://example.com' , content , 'POST' , headers );","title":"Send a x-www-form-urlencoded request"},{"location":"webhookscript/examples.html#transform-and-resend","text":"In the following, an incoming request is JSON decoded to an array, transformed and sent to \"Web Service 1\". Then the output is saved and passed on to \"Web Service 2\" in XML format. Basic error handling and validation is demonstrated. // Configuration, fetched from the users' Global Variables in Control Panel ws1_api_key = var ( 'WS1_KEY' ) ws2_user_token = var ( 'WS1_USER_TOKEN' ) // Function for error handling which stops processing further actions/code and returns an error message function error ( message ) { echo ( 'Error: {}' . format ( message )) respond ( json_encode ([ 'error' : message ]), 500 ) } // Parse original request orig_req = json_decode ( var ( 'request.content' )) // If the JSON was invalid if ( ! orig_req ) { error ( 'Invalid request' ) } // Send request to Web Service 1, using format() for string placeholders // with JSON decoded values from the incoming request body ws1_url = 'https://ws1.example.com/3.0/lists/{}/interest-categories/{}/interests' . format ( orig_req [ 'listId' ], orig_req [ 'groupId' ] ) ws1_content = [ 'first_name' : orig_req [ 'firstName' ], 'last_name' : orig_req [ 'lastName' ] ] ws1_response = request ( ws1_url , json_encode ( ws1_content ), 'POST' , [ 'Authorization: Basic ' + ws1_api_key ] ) // Don't go further if the Web Service 1 step didn't succeed if ( ws1_response [ 'status' ] != 200 ) { echo ( ws1_response [ 'content' ]); // Log content to output error ( 'Invalid response from WS1' ) } // Get a value from the Web Service 1 request ws1_response_id = json_decode ( ws1_response )[ 'id' ] // Pass response on to Web Service 2 in XML format, using a multi-line string and format() ws2_content = ' <qdbapi> <usertoken>{}</usertoken> <listid>{}</listid> <field fid=\"7\">{}</field> </qdbapi>' . format ( ws2_user_token , orig_req [ 'listId' ], ws1_group_id ) ws2_response = request ( 'https://ws2.example.com/db/zzzzzz' , ws2_content , 'POST' , [ \"Action: API_EditRecord\" , \"Content-Type: application/xml\" ] ) if ( ws2_response [ 'status' ] != 200 ) { echo ( ws2_response [ 'content' ]); // Log content to debug log error ( 'Invalid response from WS2' ) } // Output the WS2 response content to debug output echo ( ws2_response [ 'content' ]) respond ( 'OK' , 200 )","title":"Transform and resend"},{"location":"webhookscript/examples.html#telegram-bot","text":"The Messaging service Telegram allows bots using their API. The general principle is this: Create a Bot using the /newbot command sent to the BotFather Telegram User Using the bot token sent from BotFather , use the Telegram API to create a Webhook subscription (using your Webhook.site URL) Add some logic using WebhookScript! Note: Everywhere you see TELEGRAM_TOKEN , replace it with the token you got from BotFather!","title":"Telegram bot"},{"location":"webhookscript/examples.html#subscribe-to-webhook","text":"To create the Webhook subscription, change the token and the Webhook.site URL to your own and go to the following URL in your browser: https://api.telegram.org/bot TELEGRAM_TOKEN /setWebhook?url= https://webhook.site/a1351781 You should get a response similar to this: { \"ok\" : true , \"result\" : true , \"description\" : \"Webhook was set\" }","title":"Subscribe to Webhook"},{"location":"webhookscript/examples.html#first-incoming-webhook","text":"When you add your bot to your Telegram contacts list, Telegram automatically sends a /start command to the bot, which triggers a Webhook similar to this: { \"update_id\" : 176446573 , \"message\" : { \"message_id\" : 1 , \"from\" : { \"id\" : 2346545645 , \"is_bot\" : false , \"first_name\" : \"Simon\" , \"language_code\" : \"en\" }, \"chat\" : { \"id\" : 34534673234 , \"first_name\" : \"Simon\" , \"type\" : \"private\" }, \"date\" : 1581706369 , \"text\" : \"/start\" , \"entities\" : [ { \"offset\" : 0 , \"length\" : 6 , \"type\" : \"bot_command\" } ] } } You should be able to see this in the Webhook.site requests list. From this, we have all the parts needed to build a script that answers to commands: // Telegram API token token = 'TELEGRAM_TOKEN' ; content = json_decode ( var ( '$request.content$' )); msg = content [ 'message' ][ 'text' ]; response = \"Couldn't come up with anything witty.\" ; if ( msg == \"How's it going?\" ) { response = 'Pretty good.' } if ( msg == r \"You're (.*)\" ) { match = regex_extract_first ( r \"You're (.*)\" , msg ) response = 'No, YOU are {}' . format ( match ); } if ( msg == \"/start\" ) { response = \"Hi! I'm WebhookBot.\" } url = 'https://api.telegram.org/bot{}/sendMessage' . format ( token ) json = [ 'chat_id' : content [ 'message' ][ 'chat' ][ 'id' ], 'text' : response ] request ( url , json_encode ( json ), 'POST' ); Things to note: The API token is added to the script, but could also have been saved in Global Variables in Control Panel and fetched out with the var() function. The third if-statement uses regex matching to provide a dynamic response. Someone typing \"You're a bot\" would receive \"No, YOU are a bot\" Finally, we JSON encode a WebhookScript array and send it using the request() function. Simply copy this script into a WebhookScript Custom Action (remember to change the token!), and click Save Action. Then, you can interact with the bot using the Telegram app: And that's it! Congratulations on your bot. It's not very smart, but from here, the possibilities are endless!","title":"First incoming Webhook"},{"location":"webhookscript/examples.html#building-html-content","text":"The following script builds a piece of HTML content using the string_format function, based on previously defined variables, and shows how to use a function to return different content based on input. After this, it sends a JSON request (by converting an array to JSON via the json_encode function) containing the HTML using basic Bearer authentication. function alert_class () { if ( status == 'Operational' ) { return 'success' ; } if ( status == 'Degraded Performance' ) { return 'warning' ; } if ( string_contains ( status , 'Disruption' )) { return 'danger' ; } } template = ' <div class=\"alert alert-{}\"> <h2 class=\"alert-title\">{} - {}</h2> <p> {}<br /> State: {}<br /> Component affected: {} </p> <p>{}</p> </div>' ; postbody = string_format ( template , alert_class (), message , state , component , to_date ( 'now' ). date_format ( 'LLLL' ) ) json = [ 'alert' : [ 'title' : '{} - {}' . format ( component , state ), 'body' : postbody , 'draft' : false , 'types' : [ 'alert' ] ], ] request ( 'http://example.com/alerts' , json_encode ( json ), 'POST' , [ 'Content-Type: application/json' , 'Authorization: Basic {}' . format ( token ) ] )","title":"Building HTML content"},{"location":"webhookscript/examples.html#uploading-and-parsing-csv-file","text":"With this script, a file upload form is displayed when visiting the URL. After submitting the form, the CSV file is processed and validated (in this example, there must be more than 2 rows). If it can't be validated, an error message is shown. Finally, the user is shown an \"Upload successful\" message if the CSV file is valid. url = var ( 'request.url' ) set_header ( 'content-type' , 'text/html' ); // Display file upload form and exit if HTTP method is not POST if ( var ( 'request.method' ) != 'POST' ) { respond ( ' <html> <head><title>Upload CSV</title></head> <body> <h1>Upload CSV</h1> <form action=\"{}\" method=\"POST\" enctype=\"multipart/form-data\"> <input type=\"file\" name=\"file\"/> <button type=\"submit\">Upload</button> </form> </body> </html> ' . format ( url )) } // Use a comma as delimiter and treat first row (0) as header row array = csv_to_array ( var ( 'request.file.file.content' ), ',' , 0 ) // If CSV can't be parsed, or there's less than 2 rows, fail if ( ! array or array . length () < 2 ) { respond ( ' <h1>Could not parse CSV</h1> <a href=\"{}\">Upload again</a> ' . format ( url )); } // Display the parsed CSV in JSON format respond ( ' <h1>Upload successful</h1> <pre>{}</pre> <p> <a href=\"{}\">Upload again</a> </p> ' . format ( json_encode ( array ), url ))","title":"Uploading and parsing CSV file"},{"location":"webhookscript/functions.html","text":"The functions page has been split up in multiple sub-pages, please start here .","title":"Functions"},{"location":"webhookscript/reference.html","text":"Language Reference \u00b6 These are the functions that can be used in your script, and includes various utility functions and functions to interact with your Webhook.site URL. Syntax \u00b6 The language is built with a familiar PHP/JS/C-like syntax. Statements are separated using the ; character , but this is only required for multiple statements on the same line: Using semicolons (recommended) : a = 1 + 2 ; b = a + 3 ; c = b - a ; Using newlines: a = 1 + 2 b = a + 3 c = b - a Data types \u00b6 The language has 6 data types: Bool Number String Regex Array Function Boolean \u00b6 Example usage: a = true ; b = 1 == 2 ; // false c = b == false ; // true d = c == \"hello\" ; // ERR: Cannot compare 'bool' and 'string' e = \"hello\" == r \"[0-9]\" ; // false f = \"hello\" == r \"l{2}\" ; // true Number \u00b6 Both integer and float values are supported. Example usage: a = 4 - 3 ; // 1 b = a / 3 ; // 0.333... String \u00b6 This data types represents a series of characters. Multi-byte characters (accents, diacritics) are treated properly. Example usage: a = \"hello\" ; b = \"w\u00f3\u00f3\u00f3rld!\" ; c = a + \" \" + b ; // \"hello w\u00f3\u00f3\u00f3rld!\" Regex \u00b6 Regex data type exists for advanced string matching. It is defined using the r\"...\" literal (a string literal prefixed with r ) and treated as PCRE (Perl-compatible) regular expressions (the same as within PHP itself) with Unicode mode enabled. Example usage: a = \"facebook\" ; b = r \"[o]{2}.*\" ; c = a == b ; // true Array \u00b6 Arrays are untyped (PHP-style) containers that can accomodate multiple values of different (or same) types. Optionally, array index can be defined for a value. By default, integer index starting from the lowest index found (or from 0 ) is used, but strings can also be used. Example usage: a = [ \"abc\" , 123 , 4 : true , false , r \"[A-Z]+\" ]; // Resulting array: [0: \"abc\", 1: 123, 4: true, 5: false, 6: r\"[A-Z]+\"] b = json_encode ([ \"the_number\" : 123 , \"other_numbers\" : [ 42 , 1337 , 80085 ]]) // Result: // { // \"the_number\": 123, // \"other_numbers\": [ // 42, // 1337, // 80085 // ] // } Ranges \u00b6 Simple way of defining ranges between numbers is provided via the a..[s..]b range syntax. a is the from value. b is the to value, inclusive, if it is not \"skipped\" due to a rather large step (see below). s (optionally) is the step value which to use. Example usage: a = 1..4 ; // (array) [0: 1, 1: 2, 4: 3, 5: 4] b = 1..2 . .4 ; // (array) [0: 1, 1: 3] c = 10..4 . .16 ; // (array) [0: 10, 1: 14] _x = 3 _y = 6 _z = 2 d = _x .. _z .. _y ; // (array) [0: 3, 1: 5] Return value of such \"range literal\" is a new array having values that are based on the range's parameters. Functions \u00b6 Function is a value type that represents a \"unit\" of some self-contained logic . In WebhookScript they have their own type and are treated as first-class citizens: they can be stored inside variables and passed around as such. Direct invocation of an anonymous function is supported, provided that the anonymous function's definition is enclosed in parentheses. A function does capture its surrounding variables. Example usage: // Traditional definition. function sub ( a , b ) { return a - b ; } // A variable \"sub\" that holds the \"sub()\" function is now defined in current scope. sub ( 1 , 2 ); // Returns -1 // Storing a function value into a variable. // Note: This is equivalent to the previous definition. sub_2 = function ( a , b ) { return a - b ; }; // A variable \"sub_2\" that holds the \"sub_2()\" function is now defined in current scope. sub_2 ( 1 , 2 ); // Returns -1 // Creating a function with alternative, short syntax. // Note: This is equivalent all of the previous definitions. sub_3 = ( a , b ) => { return a - b ; }; // A variable \"sub_3\" that holds the \"sub_3()\" function is now defined in current scope. sub_3 ( 1 , 2 ); // Returns -1 // Creating and using an anonymous function directly. // Using an alternative, short syntax. (( a , b ) => { return a - b ; })( 1 , 2 ); // Returns -1 Chained functions \u00b6 In addition to classical function invocation, WebhookScript additionaly supports Uniform Function Call Syntax (UFCS) as a way to call functions \"on values\". Essentially, it means that calling foo(bar); is equivalent to calling bar.foo() , or - to provide an example with additional parameters - that calling foo(bar, 1, true, \"something\"); is equivalent to calling bar.foo(1, true, \"something\") . Value-type based inference of called function name \u00b6 When using chained function invocation, the interpreter will try to find the most fitting function to call . \"Most fitting\" meaning that when the client calls bar() function on a value having the string type, WebhookScript will try to find and use the string_bar() first. If such function is not defined, only then will the interpreter use the original bar() function. Consider this a syntactic sugar to make coding in WebhookScript a bit more user-friendly. Because of this the user is able to call \"something\".length() on a string the same way as calling [1, 2, 3].length() on an array, even though there are in fact two separate functions string_length() and array_length() invoked behind the scenes. Operators \u00b6 Plethora of well known operators can be used to define relationships between and/or affect various values. Different operators can have various effects on various data types, some of which are covered down below. Precedence \u00b6 Precedence of various operators is defined as follows (from highest to lowest) : - ( ... ) (parentheses) - ! (logical not) - * , / (multiplication/division) - + , - (addition/subtraction) - == , != , >= , <= , > , < (comparison) - and (logical and) - or (logical not) - = (assignment) Precedence example \u00b6 Raw source Equivalent to 1 + 2 + 3 + 4 ((1 + 2) + 3) + 4 1 - 2 + 3 - 4 ((1 - 2) + 3) - 4 1 + 2 * 3 + 4 1 + (2 * 3) + 4 1 + 2 * 3 / 4 1 + ((2 * 3) / 4) 1 + -2 * 3 / 4 1 + (((-2) * 3) / 4) 1 and 2 or 3 and 4 (1 and 2) or (3 and 4) 1 or 2 or 3 and 4 (1 or 2) or (3 and 4) 1 or !2 or !3 and 4 (1 or (!2)) or ((!3) and 4)) x = true or false and true x = (true or (false and true)) x = a == b x = (a == b) x = a > 5 and b < 6 x = ((a > 5) and (b < 6)) Logical operators \u00b6 and Returns true if both operands are truthy . Otherwise returns false . or Returns true if either one (or both) operand is truthy . Otherwise returns false . Negation \u00b6 ! Negate the value located after this operator. Examples: a = true ; b = ! a ; // false c = ! b ; // true d = !! b ; // false Assignment \u00b6 = Assigns some value to a variable. Can also be used to insert values to values that support it (eg. arrays). Examples: a = 1 ; b = \"a word\" ; c = false ; d = r \"regul[ar]+\" ; e = [ \"x\" , \"b\" : \"z\" ]; e [ \"c\" ] = \"x\" ; // e == [\"x\", \"b\": \"z\", \"c\": \"x\"] Addition and multiplication \u00b6 + , - Performs addition (subtraction) of two values. Numbers: + Add two numbers. - Subtract two numbers. Strings: + Concatenate two strings. - Removes all occurences of the right side from the left side. - (if the right side is a Regex value) Removes all matches of the regex from the left side string. Examples: a = 5 + 4 // (number) 9 b = 5 - 4 ; // (number) 1 c = \"a word and number \" + 5. to_string (); // (string) \"a word and number 5\" d = \"a word and number {}\" . format ( 5 ); // (string) \"a word and number 5\" e = \"a word\" + \" and one more\" ; // (string) \"a word and one more\" f = \"a word\" - \"or\" ; // (string) \"a wd\" g = \"regular expressions\" - r \"regul[ar]+\\s*\" ; // (string) \"expressions\" _x = 5 + \"4\" // ERR: Cannot use operator '+' with 'number' and 'string' _x = \"a word and number \" + 5 ; // ERR: Cannot use operator '+' with 'number' and 'string' * , / Performs multiplication (division) of two values. Numbers: + Multiply two numbers. - Divide two numbers. Examples: a = 1 * - 2 ; // (number) -2 b = 2 * 3 ; // (number) 6 c = 2 * \"3\" ; // (string) \"33\" d = \"3\" * 4 ; // (string) \"3333\" e = 5 / 4 ; // (number) 1.25 g = 5 / 5 ; // (number) 1 _x = \"2\" * \"3\" ; // ERR: Cannot use operator '*' with 'string' and 'string' _x = 5 / \"4\" ; // ERR: Cannot use operator '/' with 'number' and 'string' _x = \"20\" / 4 ; // ERR: Cannot use operator '/' with 'string' and 'number' Control structures \u00b6 You can control the flow of your program with several kinds of statements the language provides. if construct \u00b6 The if construct - as in all other programming languages - allows you to dynamically branch your program flow based on some conditions during runtime. Examples \u00b6 a = true ; if ( a ) { b = 1 ; } // b == 1 c = false ; if ( c ) { d = 1 ; } else { d = 2 ; } // d == 2 a = false ; b = true ; c = 5 ; if ( a or b ) { d = 1 ; if ( d < c ) { e = d + c ; } } // d == 1, e == 6 for construct \u00b6 The for construct allows you to iterate over a value that supports it ( array or string values) , while performing a task on that collection's single item. Examples \u00b6 txt = \"123456789\" ; result = []; for ( n in txt ) { if ( 5 > n . to_number () > 0 ) { result . push ( n ); } } // result == [0: \"1\", 1: \"2\", 2: \"3\", 3: \"4\"] prices = [ 100 , 200 , 300 , 600 , 1200 ]; sentence_template = \"This costs {} units of money!\" ; results = []; for ( price in prices ) { results . push ( sentence_template . format ( price )); } // results == [ // 0: \"This costs 100 units of money!\", // 1: \"This costs 200 units of money!\", // 2: \"This costs 300 units of money!\", // 3: \"This costs 600 units of money!\", // 4: \"This costs 1200 units of money!\" // ] Note: The flow of program inside the for cycle can be controlled further by using the continue and break statements. while construct \u00b6 The while construct does a thing if a specified condition is met (if the condition expression has a truthy value). c = 0 ; while ( c < 100 ) { total = total + c ; c = c + 1 ; } // total == 4950 Note: The flow of program inside the while cycle can be controlled further by using the continue and break statements.","title":"Reference"},{"location":"webhookscript/reference.html#language-reference","text":"These are the functions that can be used in your script, and includes various utility functions and functions to interact with your Webhook.site URL.","title":"Language Reference"},{"location":"webhookscript/reference.html#syntax","text":"The language is built with a familiar PHP/JS/C-like syntax. Statements are separated using the ; character , but this is only required for multiple statements on the same line: Using semicolons (recommended) : a = 1 + 2 ; b = a + 3 ; c = b - a ; Using newlines: a = 1 + 2 b = a + 3 c = b - a","title":"Syntax"},{"location":"webhookscript/reference.html#data-types","text":"The language has 6 data types: Bool Number String Regex Array Function","title":"Data types"},{"location":"webhookscript/reference.html#boolean","text":"Example usage: a = true ; b = 1 == 2 ; // false c = b == false ; // true d = c == \"hello\" ; // ERR: Cannot compare 'bool' and 'string' e = \"hello\" == r \"[0-9]\" ; // false f = \"hello\" == r \"l{2}\" ; // true","title":"Boolean"},{"location":"webhookscript/reference.html#number","text":"Both integer and float values are supported. Example usage: a = 4 - 3 ; // 1 b = a / 3 ; // 0.333...","title":"Number"},{"location":"webhookscript/reference.html#string","text":"This data types represents a series of characters. Multi-byte characters (accents, diacritics) are treated properly. Example usage: a = \"hello\" ; b = \"w\u00f3\u00f3\u00f3rld!\" ; c = a + \" \" + b ; // \"hello w\u00f3\u00f3\u00f3rld!\"","title":"String"},{"location":"webhookscript/reference.html#regex","text":"Regex data type exists for advanced string matching. It is defined using the r\"...\" literal (a string literal prefixed with r ) and treated as PCRE (Perl-compatible) regular expressions (the same as within PHP itself) with Unicode mode enabled. Example usage: a = \"facebook\" ; b = r \"[o]{2}.*\" ; c = a == b ; // true","title":"Regex"},{"location":"webhookscript/reference.html#array","text":"Arrays are untyped (PHP-style) containers that can accomodate multiple values of different (or same) types. Optionally, array index can be defined for a value. By default, integer index starting from the lowest index found (or from 0 ) is used, but strings can also be used. Example usage: a = [ \"abc\" , 123 , 4 : true , false , r \"[A-Z]+\" ]; // Resulting array: [0: \"abc\", 1: 123, 4: true, 5: false, 6: r\"[A-Z]+\"] b = json_encode ([ \"the_number\" : 123 , \"other_numbers\" : [ 42 , 1337 , 80085 ]]) // Result: // { // \"the_number\": 123, // \"other_numbers\": [ // 42, // 1337, // 80085 // ] // }","title":"Array"},{"location":"webhookscript/reference.html#ranges","text":"Simple way of defining ranges between numbers is provided via the a..[s..]b range syntax. a is the from value. b is the to value, inclusive, if it is not \"skipped\" due to a rather large step (see below). s (optionally) is the step value which to use. Example usage: a = 1..4 ; // (array) [0: 1, 1: 2, 4: 3, 5: 4] b = 1..2 . .4 ; // (array) [0: 1, 1: 3] c = 10..4 . .16 ; // (array) [0: 10, 1: 14] _x = 3 _y = 6 _z = 2 d = _x .. _z .. _y ; // (array) [0: 3, 1: 5] Return value of such \"range literal\" is a new array having values that are based on the range's parameters.","title":"Ranges"},{"location":"webhookscript/reference.html#functions","text":"Function is a value type that represents a \"unit\" of some self-contained logic . In WebhookScript they have their own type and are treated as first-class citizens: they can be stored inside variables and passed around as such. Direct invocation of an anonymous function is supported, provided that the anonymous function's definition is enclosed in parentheses. A function does capture its surrounding variables. Example usage: // Traditional definition. function sub ( a , b ) { return a - b ; } // A variable \"sub\" that holds the \"sub()\" function is now defined in current scope. sub ( 1 , 2 ); // Returns -1 // Storing a function value into a variable. // Note: This is equivalent to the previous definition. sub_2 = function ( a , b ) { return a - b ; }; // A variable \"sub_2\" that holds the \"sub_2()\" function is now defined in current scope. sub_2 ( 1 , 2 ); // Returns -1 // Creating a function with alternative, short syntax. // Note: This is equivalent all of the previous definitions. sub_3 = ( a , b ) => { return a - b ; }; // A variable \"sub_3\" that holds the \"sub_3()\" function is now defined in current scope. sub_3 ( 1 , 2 ); // Returns -1 // Creating and using an anonymous function directly. // Using an alternative, short syntax. (( a , b ) => { return a - b ; })( 1 , 2 ); // Returns -1","title":"Functions"},{"location":"webhookscript/reference.html#chained-functions","text":"In addition to classical function invocation, WebhookScript additionaly supports Uniform Function Call Syntax (UFCS) as a way to call functions \"on values\". Essentially, it means that calling foo(bar); is equivalent to calling bar.foo() , or - to provide an example with additional parameters - that calling foo(bar, 1, true, \"something\"); is equivalent to calling bar.foo(1, true, \"something\") .","title":"Chained functions"},{"location":"webhookscript/reference.html#value-type-based-inference-of-called-function-name","text":"When using chained function invocation, the interpreter will try to find the most fitting function to call . \"Most fitting\" meaning that when the client calls bar() function on a value having the string type, WebhookScript will try to find and use the string_bar() first. If such function is not defined, only then will the interpreter use the original bar() function. Consider this a syntactic sugar to make coding in WebhookScript a bit more user-friendly. Because of this the user is able to call \"something\".length() on a string the same way as calling [1, 2, 3].length() on an array, even though there are in fact two separate functions string_length() and array_length() invoked behind the scenes.","title":"Value-type based inference of called function name"},{"location":"webhookscript/reference.html#operators","text":"Plethora of well known operators can be used to define relationships between and/or affect various values. Different operators can have various effects on various data types, some of which are covered down below.","title":"Operators"},{"location":"webhookscript/reference.html#precedence","text":"Precedence of various operators is defined as follows (from highest to lowest) : - ( ... ) (parentheses) - ! (logical not) - * , / (multiplication/division) - + , - (addition/subtraction) - == , != , >= , <= , > , < (comparison) - and (logical and) - or (logical not) - = (assignment)","title":"Precedence"},{"location":"webhookscript/reference.html#precedence-example","text":"Raw source Equivalent to 1 + 2 + 3 + 4 ((1 + 2) + 3) + 4 1 - 2 + 3 - 4 ((1 - 2) + 3) - 4 1 + 2 * 3 + 4 1 + (2 * 3) + 4 1 + 2 * 3 / 4 1 + ((2 * 3) / 4) 1 + -2 * 3 / 4 1 + (((-2) * 3) / 4) 1 and 2 or 3 and 4 (1 and 2) or (3 and 4) 1 or 2 or 3 and 4 (1 or 2) or (3 and 4) 1 or !2 or !3 and 4 (1 or (!2)) or ((!3) and 4)) x = true or false and true x = (true or (false and true)) x = a == b x = (a == b) x = a > 5 and b < 6 x = ((a > 5) and (b < 6))","title":"Precedence example"},{"location":"webhookscript/reference.html#logical-operators","text":"and Returns true if both operands are truthy . Otherwise returns false . or Returns true if either one (or both) operand is truthy . Otherwise returns false .","title":"Logical operators"},{"location":"webhookscript/reference.html#negation","text":"! Negate the value located after this operator. Examples: a = true ; b = ! a ; // false c = ! b ; // true d = !! b ; // false","title":"Negation"},{"location":"webhookscript/reference.html#assignment","text":"= Assigns some value to a variable. Can also be used to insert values to values that support it (eg. arrays). Examples: a = 1 ; b = \"a word\" ; c = false ; d = r \"regul[ar]+\" ; e = [ \"x\" , \"b\" : \"z\" ]; e [ \"c\" ] = \"x\" ; // e == [\"x\", \"b\": \"z\", \"c\": \"x\"]","title":"Assignment"},{"location":"webhookscript/reference.html#addition-and-multiplication","text":"+ , - Performs addition (subtraction) of two values. Numbers: + Add two numbers. - Subtract two numbers. Strings: + Concatenate two strings. - Removes all occurences of the right side from the left side. - (if the right side is a Regex value) Removes all matches of the regex from the left side string. Examples: a = 5 + 4 // (number) 9 b = 5 - 4 ; // (number) 1 c = \"a word and number \" + 5. to_string (); // (string) \"a word and number 5\" d = \"a word and number {}\" . format ( 5 ); // (string) \"a word and number 5\" e = \"a word\" + \" and one more\" ; // (string) \"a word and one more\" f = \"a word\" - \"or\" ; // (string) \"a wd\" g = \"regular expressions\" - r \"regul[ar]+\\s*\" ; // (string) \"expressions\" _x = 5 + \"4\" // ERR: Cannot use operator '+' with 'number' and 'string' _x = \"a word and number \" + 5 ; // ERR: Cannot use operator '+' with 'number' and 'string' * , / Performs multiplication (division) of two values. Numbers: + Multiply two numbers. - Divide two numbers. Examples: a = 1 * - 2 ; // (number) -2 b = 2 * 3 ; // (number) 6 c = 2 * \"3\" ; // (string) \"33\" d = \"3\" * 4 ; // (string) \"3333\" e = 5 / 4 ; // (number) 1.25 g = 5 / 5 ; // (number) 1 _x = \"2\" * \"3\" ; // ERR: Cannot use operator '*' with 'string' and 'string' _x = 5 / \"4\" ; // ERR: Cannot use operator '/' with 'number' and 'string' _x = \"20\" / 4 ; // ERR: Cannot use operator '/' with 'string' and 'number'","title":"Addition and multiplication"},{"location":"webhookscript/reference.html#control-structures","text":"You can control the flow of your program with several kinds of statements the language provides.","title":"Control structures"},{"location":"webhookscript/reference.html#if-construct","text":"The if construct - as in all other programming languages - allows you to dynamically branch your program flow based on some conditions during runtime.","title":"if construct"},{"location":"webhookscript/reference.html#examples","text":"a = true ; if ( a ) { b = 1 ; } // b == 1 c = false ; if ( c ) { d = 1 ; } else { d = 2 ; } // d == 2 a = false ; b = true ; c = 5 ; if ( a or b ) { d = 1 ; if ( d < c ) { e = d + c ; } } // d == 1, e == 6","title":"Examples"},{"location":"webhookscript/reference.html#for-construct","text":"The for construct allows you to iterate over a value that supports it ( array or string values) , while performing a task on that collection's single item.","title":"for construct"},{"location":"webhookscript/reference.html#examples_1","text":"txt = \"123456789\" ; result = []; for ( n in txt ) { if ( 5 > n . to_number () > 0 ) { result . push ( n ); } } // result == [0: \"1\", 1: \"2\", 2: \"3\", 3: \"4\"] prices = [ 100 , 200 , 300 , 600 , 1200 ]; sentence_template = \"This costs {} units of money!\" ; results = []; for ( price in prices ) { results . push ( sentence_template . format ( price )); } // results == [ // 0: \"This costs 100 units of money!\", // 1: \"This costs 200 units of money!\", // 2: \"This costs 300 units of money!\", // 3: \"This costs 600 units of money!\", // 4: \"This costs 1200 units of money!\" // ] Note: The flow of program inside the for cycle can be controlled further by using the continue and break statements.","title":"Examples"},{"location":"webhookscript/reference.html#while-construct","text":"The while construct does a thing if a specified condition is met (if the condition expression has a truthy value). c = 0 ; while ( c < 100 ) { total = total + c ; c = c + 1 ; } // total == 4950 Note: The flow of program inside the while cycle can be controlled further by using the continue and break statements.","title":"while construct"},{"location":"webhookscript/functions/array.html","text":"array_contains( array array, string/number needle) : bool \u00b6 Returns true or false depending on whether array contains a value equal to needle . To check whether a key exists, use the array_has function. employees = [ 6547 : 'Simon' , 235345 : 'Jack' , 4657 : 'Jim' ] dd ( array_contains ( employees , 'Simon' )) // -> true array_chunk( array array, number count, bool preserve_keys = false) : array \u00b6 Splits a single array into chunks of count . When preserve_keys is set to true , the array keys are preserved. test_arr = [ 'a' : 123 , 'b' : 234 , 'c' : 345 , 'd' : 345 , 'e' : 456 ] dump ( array_chunk ( test_arr , 2 , true )) // -> [0: [\"a\": 123, \"b\": 234], 1: [\"c\": 345, \"d\": 345], 2: [\"e\": 456]] dump ( array_chunk ( test_arr , 2 , false )) // -> [0: [0: 123, 1: 234], 1: [0: 345, 1: 345], 2: [0: 456]] array_copy( array array) : array \u00b6 Returns a copy of array array_diff( array array1, array array2) : array \u00b6 Returns the items of array1 that are not present in array2 while keeping the array indices. array_get( array array, string/number index, any default) : any \u00b6 array_has( array array, string/number key) : bool \u00b6 Returns true if array contains key , and false if it does not. To check whether a value exists, use the array_contains function. employees = [ 6547 : 'Simon' , 235345 : 'Jack' , 4657 : 'Jim' ] dd ( array_has ( employees , 235345 )) // -> true array_join( array array, string joiner) : string \u00b6 Returns a string where all the values are joined by joiner . [ 'hello' , 'world' ]. join ( ',' ) -> \"hello,world\" array_keys( array array) : array \u00b6 Returns the keys of an array. array_length( array array) : number \u00b6 array_map( array array, func function) \u00b6 Runs function with each array value, and returns array with key as result. employees = [ 'Simon' , 'Jack' , 'Jim' ] result = array_map ( employees , function ( employee ) { return 'Hello, ' + employee + '!' }) dd ( result ) // -> [0: \"Hello, Simon!\", 1: \"Hello, Jack!\", 2: \"Hello, Jim!\"] array_merge( array array1, array array2): array \u00b6 Merges 2 arrays into a single array. test1 = [ 123 , 234 , 345 ] test2 = [ 345 , 456 ] dump ( array_merge ( test1 , test2 )) // -> [0: 123, 1: 234, 2: 345, 3: 345, 4: 456] array_number_of( array , string/number value) : number \u00b6 Returns amount of value array_pop( array array) : any \u00b6 Pop element off end of array array_push( array array, any value) : any \u00b6 Adds value to end of array and returns value array_random( array array) : any \u00b6 Returns random value of array array_reverse( array array) : array \u00b6 Returns array in reverse order employees = [ 6547 : 'Simon' , 235345 : 'Jack' , 4657 : 'Jim' ] dd ( array_reverse ( employees )) // -> [0: \"Jim\", 1: \"Jack\", 2: \"Simon\"] array_shuffle( array array) : array \u00b6 Returns shuffled version of array array_sort( array array) : array \u00b6 Sorts array by its values. Keys are kept as-is. array_values( array array) : array \u00b6 Returns the values of an array. employees = [ 6547 : 'Simon' , 235345 : 'Jack' , 4657 : 'Jim' ] dd ( array_values ( employees )) // -> [0: \"Simon\", 1: \"Jack\", 2: \"Jim\"] to_array( array array) : array \u00b6 Returns array .","title":"Arrays"},{"location":"webhookscript/functions/array.html#array_containsarray-array-stringnumber-needle-bool","text":"Returns true or false depending on whether array contains a value equal to needle . To check whether a key exists, use the array_has function. employees = [ 6547 : 'Simon' , 235345 : 'Jack' , 4657 : 'Jim' ] dd ( array_contains ( employees , 'Simon' )) // -> true","title":"array_contains(array array, string/number needle) : bool"},{"location":"webhookscript/functions/array.html#array_chunkarray-array-number-count-bool-preserve_keys-false-array","text":"Splits a single array into chunks of count . When preserve_keys is set to true , the array keys are preserved. test_arr = [ 'a' : 123 , 'b' : 234 , 'c' : 345 , 'd' : 345 , 'e' : 456 ] dump ( array_chunk ( test_arr , 2 , true )) // -> [0: [\"a\": 123, \"b\": 234], 1: [\"c\": 345, \"d\": 345], 2: [\"e\": 456]] dump ( array_chunk ( test_arr , 2 , false )) // -> [0: [0: 123, 1: 234], 1: [0: 345, 1: 345], 2: [0: 456]]","title":"array_chunk(array array, number count, bool preserve_keys = false) : array"},{"location":"webhookscript/functions/array.html#array_copyarray-array-array","text":"Returns a copy of array","title":"array_copy(array array) : array"},{"location":"webhookscript/functions/array.html#array_diffarray-array1-array-array2-array","text":"Returns the items of array1 that are not present in array2 while keeping the array indices.","title":"array_diff(array array1, array array2) : array"},{"location":"webhookscript/functions/array.html#array_getarray-array-stringnumber-index-any-default-any","text":"","title":"array_get(array array, string/number index, any default) : any"},{"location":"webhookscript/functions/array.html#array_hasarray-array-stringnumber-key-bool","text":"Returns true if array contains key , and false if it does not. To check whether a value exists, use the array_contains function. employees = [ 6547 : 'Simon' , 235345 : 'Jack' , 4657 : 'Jim' ] dd ( array_has ( employees , 235345 )) // -> true","title":"array_has(array array, string/number key) : bool"},{"location":"webhookscript/functions/array.html#array_joinarray-array-string-joiner-string","text":"Returns a string where all the values are joined by joiner . [ 'hello' , 'world' ]. join ( ',' ) -> \"hello,world\"","title":"array_join(array array, string joiner) : string"},{"location":"webhookscript/functions/array.html#array_keysarray-array-array","text":"Returns the keys of an array.","title":"array_keys(array array) : array"},{"location":"webhookscript/functions/array.html#array_lengtharray-array-number","text":"","title":"array_length(array array) : number"},{"location":"webhookscript/functions/array.html#array_maparray-array-func-function","text":"Runs function with each array value, and returns array with key as result. employees = [ 'Simon' , 'Jack' , 'Jim' ] result = array_map ( employees , function ( employee ) { return 'Hello, ' + employee + '!' }) dd ( result ) // -> [0: \"Hello, Simon!\", 1: \"Hello, Jack!\", 2: \"Hello, Jim!\"]","title":"array_map(array array, func function)"},{"location":"webhookscript/functions/array.html#array_mergearray-array1-array-array2-array","text":"Merges 2 arrays into a single array. test1 = [ 123 , 234 , 345 ] test2 = [ 345 , 456 ] dump ( array_merge ( test1 , test2 )) // -> [0: 123, 1: 234, 2: 345, 3: 345, 4: 456]","title":"array_merge(array array1, array array2): array"},{"location":"webhookscript/functions/array.html#array_number_ofarray-stringnumber-value-number","text":"Returns amount of value","title":"array_number_of(array, string/number value) : number"},{"location":"webhookscript/functions/array.html#array_poparray-array-any","text":"Pop element off end of array","title":"array_pop(array array) : any"},{"location":"webhookscript/functions/array.html#array_pusharray-array-any-value-any","text":"Adds value to end of array and returns value","title":"array_push(array array, any value) : any"},{"location":"webhookscript/functions/array.html#array_randomarray-array-any","text":"Returns random value of array","title":"array_random(array array) : any"},{"location":"webhookscript/functions/array.html#array_reversearray-array-array","text":"Returns array in reverse order employees = [ 6547 : 'Simon' , 235345 : 'Jack' , 4657 : 'Jim' ] dd ( array_reverse ( employees )) // -> [0: \"Jim\", 1: \"Jack\", 2: \"Simon\"]","title":"array_reverse(array array) : array"},{"location":"webhookscript/functions/array.html#array_shufflearray-array-array","text":"Returns shuffled version of array","title":"array_shuffle(array array) : array"},{"location":"webhookscript/functions/array.html#array_sortarray-array-array","text":"Sorts array by its values. Keys are kept as-is.","title":"array_sort(array array) : array"},{"location":"webhookscript/functions/array.html#array_valuesarray-array-array","text":"Returns the values of an array. employees = [ 6547 : 'Simon' , 235345 : 'Jack' , 4657 : 'Jim' ] dd ( array_values ( employees )) // -> [0: \"Simon\", 1: \"Jack\", 2: \"Jim\"]","title":"array_values(array array) : array"},{"location":"webhookscript/functions/array.html#to_arrayarray-array-array","text":"Returns array .","title":"to_array(array array) : array"},{"location":"webhookscript/functions/bool.html","text":"bool_and( bool value1, bool value2): bool \u00b6 Returns value1 && value2 bool_not( bool value) : bool \u00b6 Returns !value to_bool( string/number/array/bool value) : bool \u00b6 Casts value to a bool.","title":"Booleans"},{"location":"webhookscript/functions/bool.html#bool_andbool-value1-bool-value2-bool","text":"Returns value1 && value2","title":"bool_and(bool value1, bool value2): bool"},{"location":"webhookscript/functions/bool.html#bool_notbool-value-bool","text":"Returns !value","title":"bool_not(bool value) : bool"},{"location":"webhookscript/functions/bool.html#to_boolstringnumberarraybool-value-bool","text":"Casts value to a bool.","title":"to_bool(string/number/array/bool value) : bool"},{"location":"webhookscript/functions/date.html","text":"Date and Time Manipulation \u00b6 Supported date and time formats \u00b6 In WebhookScript, dates are not a specific type, but rather expressed as strings that WebhookScript will attempt to parse using a very powerful date parsing engine. WebhookScript supports a variety of date formats, and functions taking a date will attempt to guess the format of the input string in order to parse the date into a ISO-8601 format If possible, it's recommended to use the ISO-8601 format, for example 2020-05-27T04:00:00.000000Z . Special format examples \u00b6 In addition to date strings, these special formats can also be used to generate dates. now +4 day , -2 month - adds or subtracts to the current date and time, can be suffixed to other dates Other units supported: second , minute , hour , day , fortnight , week , month , year next Thursday last Monday first day of January 2008 first Saturday of July 2008 Monday next week @1215282385 - UNIX timestamp Date format characters \u00b6 Click here for a list of possible date format characters for the to_date and date_format functions. Date locales available \u00b6 Click here for a list of possible locales/translations available for date display functions. now( ?string timezone) : string \u00b6 Returns the current date in ISO-8601 format, using timezone , if specified. to_date( string date, ?string format, ?locale locale, ?string timezone, bool keep_timezone = false): string \u00b6 Returns a ISO-8601 formatted date string in UTC time from the provided date string. For more information about the accepted dates, see Supported date formats . If specified, format is used to parse the date without having to guess the format (see the Date Format Characters specification.) If the keep_timezone parameter is set to true, the resulting date string will keep the timezone. The locale parameter will attempt to parse the date using the specified locale. If the date is invalid or could not be guessed, null is returned. // Current date and time 'now' . to_date () // -> 2020-11-25T00:00:00.000000Z // Relative formats 'first monday august 2019' . to_date () // Automatic format guessing '2020-01-01 23:02:01' . to_date () // Timezone handling '2020-01-01 23:02:01' . to_date ( null , null , 'GMT-5' ) // -> \"2020-01-02T04:02:01.000000Z\", interpreted as GMT-5 and converted to UTC '2020-01-01 23:02:01' . to_date ( null , null , 'GMT-5' , true ) // -> \"2020-01-01T23:02:01.000000-05:00\", date keeps timezone // Unix timestamp '@1215282385' . to_date () // Custom date format '2/4/12 06:03' . to_date ( 'M/D/YY HH:mm' ) // -> 2012-02-04T06:03:00.000000Z // To escape characters in the format string, backslashes can be used '2020-01-05 12h30m15s' . to_date ( 'YYYY-MM-DD HH\\\\hmm\\\\mss\\\\s' ) // -> 2020-01-05T12:30:15.000000Z date_format( string date, ?string format, ?string locale, ?string timezone): string \u00b6 Returns a date parsed to the format specified in format . For more information about the accepted dates, see Supported date formats . For a full list of date format characters, see the Date Format Characters specification. date_format ( '2008-07-05T18:26:25.000000Z' , 'YYYY-MM-DD' ) // -> 2008-07-05 date_format ( '2008-07-05T18:26:25.000000Z' , 'LLLL' , 'da' ) // -> l\u00f8rdag d. 5. juli 2008 kl. 18:26 date_format ( '2020-01-01T23:02:01.000000-05:00' , 'LLLL' , null , 'GMT+2' ) // -> Thursday, January 2, 2020 6:02 AM // If no format is specified, a default human readable readable string is returned date_format ( '2008-07-05T18:26:25.000000Z' ) // -> Sat Jul 05 2008 18:26:25 GMT+0000 'now' . date_format ( 'x' ) // -> 1606329669220 (current date in UNIX timestamp with microseconds) // Add 1 hour to an existing date (see Special format examples above) date_format ( '2021-10-28 11:28:55 +1 hour' , 'YYYY-MM-DD HH:mm:ss' ) // -> 2021-10-28 12:28:55 date_to_array( string ): array \u00b6 Returns an array containing all the components of a given date. dump ( date_to_array ( '2008-07-05T18:26:25.324542Z' )) // [ // \"year\": 2008, // \"month\": 7, // \"day\": 5, // \"dayOfWeek\": 6, // \"dayOfYear\": 187, // \"hour\": 18, // \"minute\": 26, // \"second\": 25, // \"micro\": 324542, // \"timestamp\": 1215282385, // \"formatted\": \"2008-07-05 18:26:25\", // \"timezone\": \"Z\" // ] date_interval( string date1, ?string date2, ?string format): string/int \u00b6 Calculates the interval between date1 and date2 . When date2 is unspecified/null, now is used. If no format string is specified, the interval is returned as the number of seconds between the dates, with the number being negative if date2 is before date1 . Note that for the format string, this function does not use the ISO format, but rather the uses the PHP DateInterval format specification . date_interval ( '2008-07-16T23:13:26.234212Z' , '2008-07-05T18:26:25.324542Z' ) // -> -967620 date_interval ( '2008-07-16T23:13:26.234212Z' , '2008-07-05T18:26:25.324542Z' , '%d days, %h hours, %i minutes' ) // -> 11 days, 4 hours, 47 minutes date_interval_human( string date1, ?string date2, ?string locale): string/int \u00b6 Formats the difference between 2 dates in a way that's easy to read for humans. If no locale is specified, English is used. When date2 is unspecified/null, now is used. date_interval_human ( '2008-07-16T23:13:26.234212Z' , '2008-07-05T18:26:25.324542Z' ) // -> 1 week after date_interval_human ( '2008-07-16T23:13:26.234212Z' , '2008-07-05T18:26:25.324542Z' , 'es' ) // -> 1 semana despu\u00e9s","title":"Dates"},{"location":"webhookscript/functions/date.html#date-and-time-manipulation","text":"","title":"Date and Time Manipulation"},{"location":"webhookscript/functions/date.html#supported-date-and-time-formats","text":"In WebhookScript, dates are not a specific type, but rather expressed as strings that WebhookScript will attempt to parse using a very powerful date parsing engine. WebhookScript supports a variety of date formats, and functions taking a date will attempt to guess the format of the input string in order to parse the date into a ISO-8601 format If possible, it's recommended to use the ISO-8601 format, for example 2020-05-27T04:00:00.000000Z .","title":"Supported date and time formats"},{"location":"webhookscript/functions/date.html#special-format-examples","text":"In addition to date strings, these special formats can also be used to generate dates. now +4 day , -2 month - adds or subtracts to the current date and time, can be suffixed to other dates Other units supported: second , minute , hour , day , fortnight , week , month , year next Thursday last Monday first day of January 2008 first Saturday of July 2008 Monday next week @1215282385 - UNIX timestamp","title":"Special format examples"},{"location":"webhookscript/functions/date.html#date-format-characters","text":"Click here for a list of possible date format characters for the to_date and date_format functions.","title":"Date format characters"},{"location":"webhookscript/functions/date.html#date-locales-available","text":"Click here for a list of possible locales/translations available for date display functions.","title":"Date locales available"},{"location":"webhookscript/functions/date.html#nowstring-timezone-string","text":"Returns the current date in ISO-8601 format, using timezone , if specified.","title":"now(?string timezone) : string"},{"location":"webhookscript/functions/date.html#to_datestring-date-string-format-locale-locale-string-timezone-bool-keep_timezone-false-string","text":"Returns a ISO-8601 formatted date string in UTC time from the provided date string. For more information about the accepted dates, see Supported date formats . If specified, format is used to parse the date without having to guess the format (see the Date Format Characters specification.) If the keep_timezone parameter is set to true, the resulting date string will keep the timezone. The locale parameter will attempt to parse the date using the specified locale. If the date is invalid or could not be guessed, null is returned. // Current date and time 'now' . to_date () // -> 2020-11-25T00:00:00.000000Z // Relative formats 'first monday august 2019' . to_date () // Automatic format guessing '2020-01-01 23:02:01' . to_date () // Timezone handling '2020-01-01 23:02:01' . to_date ( null , null , 'GMT-5' ) // -> \"2020-01-02T04:02:01.000000Z\", interpreted as GMT-5 and converted to UTC '2020-01-01 23:02:01' . to_date ( null , null , 'GMT-5' , true ) // -> \"2020-01-01T23:02:01.000000-05:00\", date keeps timezone // Unix timestamp '@1215282385' . to_date () // Custom date format '2/4/12 06:03' . to_date ( 'M/D/YY HH:mm' ) // -> 2012-02-04T06:03:00.000000Z // To escape characters in the format string, backslashes can be used '2020-01-05 12h30m15s' . to_date ( 'YYYY-MM-DD HH\\\\hmm\\\\mss\\\\s' ) // -> 2020-01-05T12:30:15.000000Z","title":"to_date(string date, ?string format, ?locale locale, ?string timezone, bool keep_timezone = false): string"},{"location":"webhookscript/functions/date.html#date_formatstring-date-string-format-string-locale-string-timezone-string","text":"Returns a date parsed to the format specified in format . For more information about the accepted dates, see Supported date formats . For a full list of date format characters, see the Date Format Characters specification. date_format ( '2008-07-05T18:26:25.000000Z' , 'YYYY-MM-DD' ) // -> 2008-07-05 date_format ( '2008-07-05T18:26:25.000000Z' , 'LLLL' , 'da' ) // -> l\u00f8rdag d. 5. juli 2008 kl. 18:26 date_format ( '2020-01-01T23:02:01.000000-05:00' , 'LLLL' , null , 'GMT+2' ) // -> Thursday, January 2, 2020 6:02 AM // If no format is specified, a default human readable readable string is returned date_format ( '2008-07-05T18:26:25.000000Z' ) // -> Sat Jul 05 2008 18:26:25 GMT+0000 'now' . date_format ( 'x' ) // -> 1606329669220 (current date in UNIX timestamp with microseconds) // Add 1 hour to an existing date (see Special format examples above) date_format ( '2021-10-28 11:28:55 +1 hour' , 'YYYY-MM-DD HH:mm:ss' ) // -> 2021-10-28 12:28:55","title":"date_format(string date, ?string format, ?string locale, ?string timezone): string"},{"location":"webhookscript/functions/date.html#date_to_arraystring-array","text":"Returns an array containing all the components of a given date. dump ( date_to_array ( '2008-07-05T18:26:25.324542Z' )) // [ // \"year\": 2008, // \"month\": 7, // \"day\": 5, // \"dayOfWeek\": 6, // \"dayOfYear\": 187, // \"hour\": 18, // \"minute\": 26, // \"second\": 25, // \"micro\": 324542, // \"timestamp\": 1215282385, // \"formatted\": \"2008-07-05 18:26:25\", // \"timezone\": \"Z\" // ]","title":"date_to_array(string): array"},{"location":"webhookscript/functions/date.html#date_intervalstring-date1-string-date2-string-format-stringint","text":"Calculates the interval between date1 and date2 . When date2 is unspecified/null, now is used. If no format string is specified, the interval is returned as the number of seconds between the dates, with the number being negative if date2 is before date1 . Note that for the format string, this function does not use the ISO format, but rather the uses the PHP DateInterval format specification . date_interval ( '2008-07-16T23:13:26.234212Z' , '2008-07-05T18:26:25.324542Z' ) // -> -967620 date_interval ( '2008-07-16T23:13:26.234212Z' , '2008-07-05T18:26:25.324542Z' , '%d days, %h hours, %i minutes' ) // -> 11 days, 4 hours, 47 minutes","title":"date_interval(string date1, ?string date2, ?string format): string/int"},{"location":"webhookscript/functions/date.html#date_interval_humanstring-date1-string-date2-string-locale-stringint","text":"Formats the difference between 2 dates in a way that's easy to read for humans. If no locale is specified, English is used. When date2 is unspecified/null, now is used. date_interval_human ( '2008-07-16T23:13:26.234212Z' , '2008-07-05T18:26:25.324542Z' ) // -> 1 week after date_interval_human ( '2008-07-16T23:13:26.234212Z' , '2008-07-05T18:26:25.324542Z' , 'es' ) // -> 1 semana despu\u00e9s","title":"date_interval_human(string date1, ?string date2, ?string locale): string/int"},{"location":"webhookscript/functions/files.html","text":"When you send an email, or send a multipart/form-data request, files are extracted as the file.*.* variables, but you can also loop over files using WebhookScript. files( string name) : array \u00b6 Returns an array of files, with the following keys: id - unique file ID filename - original filename size - size of the file in bytes content-type - mime content type of the file dump ( files ()) // [ // 0: [ // \"id\": \"76b7274a-e806-4f72-ba49-85ad05926ef0\", // \"filename\": \"Screen Shot 2020-06-05 at 2.15.29 PM.png\", // \"size\": 1203671, // \"content_type\": \"image/png\" // ] // ] // Filtering files by type for ( file in files ()) { if ( r '.*\\.png' . match ( file [ 'filename' ])) { dump ( file [ 'filename' ] + ' is png.' ) } } // \"Screen Shot 2020-06-05 at 2.15.29 PM.png is png.\" file_content( string fileId) : string \u00b6 Returns the content of a specific file, using the id key from the files() function above. firstFile = array_get ( files (), 0 ) fileContent = file_contents ( firstFile [ 'id' ]);","title":"File handling"},{"location":"webhookscript/functions/files.html#filesstring-name-array","text":"Returns an array of files, with the following keys: id - unique file ID filename - original filename size - size of the file in bytes content-type - mime content type of the file dump ( files ()) // [ // 0: [ // \"id\": \"76b7274a-e806-4f72-ba49-85ad05926ef0\", // \"filename\": \"Screen Shot 2020-06-05 at 2.15.29 PM.png\", // \"size\": 1203671, // \"content_type\": \"image/png\" // ] // ] // Filtering files by type for ( file in files ()) { if ( r '.*\\.png' . match ( file [ 'filename' ])) { dump ( file [ 'filename' ] + ' is png.' ) } } // \"Screen Shot 2020-06-05 at 2.15.29 PM.png is png.\"","title":"files(string name) : array"},{"location":"webhookscript/functions/files.html#file_contentstring-fileid-string","text":"Returns the content of a specific file, using the id key from the files() function above. firstFile = array_get ( files (), 0 ) fileContent = file_contents ( firstFile [ 'id' ]);","title":"file_content(string fileId) : string"},{"location":"webhookscript/functions/flow.html","text":"Script Execution \u00b6 action( string action_type, array parameters) : array \u00b6 Runs Custom Actions in WebhookScript. Can be used to loop over items in a way that not possible using the visual Custom Actions editor. The function returns an array of runtime variables which can be used to fetch the result of an action that sets a variable, like google_sheets_get_values . The action_type s and their parameters can be seen here . The following action extracts a list of files from an array of objects in a JSON array and uploads each file to Dropbox using the dropbox_upload_file action. Example In this example, we assume that the request content sent to the Webhook.site URL contains the following: { \"files\" : [ { \"url\" : \"https://example.com/path/980e683e-9bd7-4512-bc0e-acfd6e022a81\" , \"name\" : \"example_1.png\" }, { \"url\" : \"https://example.com/path/c8e1282f-46a7-45ab-9699-0472ff9ab96c\" , \"name\" : \"example_2.png\" } ] } In the script, the request contents are JSON decoded and looped over. For each item, the file's URL is downloaded and a Dropbox Upload File action is executed. files = json_path ( var ( 'request.content' ), '.files.*' ) for ( file_info in files ) { // Download file from URL file_download = request ( file_info [ 'url' ]) // Generate a destination path for the Dropbox file destination_path = '/Example Files/%s' . format ( file_info [ 'name' ]) // Execute Dropbox Upload File action action ( 'dropbox_upload_file' , [ 'path' : destination_path , 'body' : file_download [ 'content' ], 'mode' : 'update' , 'provider_id' : providerId ] ) } delay( int seconds, string code) \u00b6 Executes code in the future. Any output will be stored on the request and will show with a \"Was delayed\" label. The code will not inherit the execution scope. In this example, the format function is used to prepare the code string with a URL, causing {} to be replaced with with https://example.com . code = ' request( \"{}\", \\'{\"message\": \"Hello World!\"}\\', \"POST\" ) ' url = 'https://example.com' delay ( 5 , code . format ( url )); The maximum amount of seconds allowed is 604800 (7 days). dont_save() \u00b6 Marks the request so it is not saved in Webhook.site, which is useful when receiving a large amount of requests. The request can still be seen when it comes in, but will not be available through through the app later, or through the API. The action is useful in cases where e.g. a URL receive a large amount of requests. exec( string code) : any \u00b6 Executes code in code and returns the result. The code will inherit the execution scope. import( string url) : any \u00b6 Downloads code located at url and returns the result. The code will inherit the execution scope. As an example, this can be used if you want to re-use code. Just upload it to a server or e.g. Github and use it in different WebhookScript actions. result = import ( 'https://raw.githubusercontent.com/fredsted/webhookscripts/ec22946a83ea85f607fcc6bff83f9d81ed2fe4ed/hello_world.ws' ) echo ( result ) // value stop() \u00b6 Stops Custom Action execution. Responses \u00b6 respond( string content, int status, array headers) \u00b6 Stops Custom Action execution and return a response immediately. set_content( string content) \u00b6 Sets or overwrites the response content of the URL. Script execution continues. set_header( string header_name, string header_value) \u00b6 Sets or overwrites a response header of the URL. Script execution continues. set_response( string content, int status, array headers) \u00b6 Sets or overwrites response content, status and headers in single function. Script execution continues. headers should be an array of strings e.g. [\"X-Example: Value\", \"X-Foo: Bar\"] . set_status( number status) \u00b6 Sets or overwrites the HTTP response status of the current URL. Script execution continues.","title":"Flow Control and Responses"},{"location":"webhookscript/functions/flow.html#script-execution","text":"","title":"Script Execution"},{"location":"webhookscript/functions/flow.html#actionstring-action_type-array-parameters-array","text":"Runs Custom Actions in WebhookScript. Can be used to loop over items in a way that not possible using the visual Custom Actions editor. The function returns an array of runtime variables which can be used to fetch the result of an action that sets a variable, like google_sheets_get_values . The action_type s and their parameters can be seen here . The following action extracts a list of files from an array of objects in a JSON array and uploads each file to Dropbox using the dropbox_upload_file action. Example In this example, we assume that the request content sent to the Webhook.site URL contains the following: { \"files\" : [ { \"url\" : \"https://example.com/path/980e683e-9bd7-4512-bc0e-acfd6e022a81\" , \"name\" : \"example_1.png\" }, { \"url\" : \"https://example.com/path/c8e1282f-46a7-45ab-9699-0472ff9ab96c\" , \"name\" : \"example_2.png\" } ] } In the script, the request contents are JSON decoded and looped over. For each item, the file's URL is downloaded and a Dropbox Upload File action is executed. files = json_path ( var ( 'request.content' ), '.files.*' ) for ( file_info in files ) { // Download file from URL file_download = request ( file_info [ 'url' ]) // Generate a destination path for the Dropbox file destination_path = '/Example Files/%s' . format ( file_info [ 'name' ]) // Execute Dropbox Upload File action action ( 'dropbox_upload_file' , [ 'path' : destination_path , 'body' : file_download [ 'content' ], 'mode' : 'update' , 'provider_id' : providerId ] ) }","title":"action(string action_type, array parameters) : array"},{"location":"webhookscript/functions/flow.html#delayint-seconds-string-code","text":"Executes code in the future. Any output will be stored on the request and will show with a \"Was delayed\" label. The code will not inherit the execution scope. In this example, the format function is used to prepare the code string with a URL, causing {} to be replaced with with https://example.com . code = ' request( \"{}\", \\'{\"message\": \"Hello World!\"}\\', \"POST\" ) ' url = 'https://example.com' delay ( 5 , code . format ( url )); The maximum amount of seconds allowed is 604800 (7 days).","title":"delay(int seconds, string code)"},{"location":"webhookscript/functions/flow.html#dont_save","text":"Marks the request so it is not saved in Webhook.site, which is useful when receiving a large amount of requests. The request can still be seen when it comes in, but will not be available through through the app later, or through the API. The action is useful in cases where e.g. a URL receive a large amount of requests.","title":"dont_save()"},{"location":"webhookscript/functions/flow.html#execstring-code-any","text":"Executes code in code and returns the result. The code will inherit the execution scope.","title":"exec(string code) : any"},{"location":"webhookscript/functions/flow.html#importstring-url-any","text":"Downloads code located at url and returns the result. The code will inherit the execution scope. As an example, this can be used if you want to re-use code. Just upload it to a server or e.g. Github and use it in different WebhookScript actions. result = import ( 'https://raw.githubusercontent.com/fredsted/webhookscripts/ec22946a83ea85f607fcc6bff83f9d81ed2fe4ed/hello_world.ws' ) echo ( result ) // value","title":"import(string url) : any"},{"location":"webhookscript/functions/flow.html#stop","text":"Stops Custom Action execution.","title":"stop()"},{"location":"webhookscript/functions/flow.html#responses","text":"","title":"Responses"},{"location":"webhookscript/functions/flow.html#respondstring-content-int-status-array-headers","text":"Stops Custom Action execution and return a response immediately.","title":"respond(string content, int status, array headers)"},{"location":"webhookscript/functions/flow.html#set_contentstring-content","text":"Sets or overwrites the response content of the URL. Script execution continues.","title":"set_content(string content)"},{"location":"webhookscript/functions/flow.html#set_headerstring-header_name-string-header_value","text":"Sets or overwrites a response header of the URL. Script execution continues.","title":"set_header(string header_name, string header_value)"},{"location":"webhookscript/functions/flow.html#set_responsestring-content-int-status-array-headers","text":"Sets or overwrites response content, status and headers in single function. Script execution continues. headers should be an array of strings e.g. [\"X-Example: Value\", \"X-Foo: Bar\"] .","title":"set_response(string content, int status, array headers)"},{"location":"webhookscript/functions/flow.html#set_statusnumber-status","text":"Sets or overwrites the HTTP response status of the current URL. Script execution continues.","title":"set_status(number status)"},{"location":"webhookscript/functions/general.html","text":"About Functions \u00b6 These are the functions that can be used in your script, and includes various utility functions and functions to interact with your Webhook.site URL. Chaining \u00b6 Functions can be chained directly to a primitive (strings, numbers, arrays). These two statements are equivalent: 'Hello World' . echo () echo ( 'Hello World' ) They can even be chained, for example: 'Hello World' . hash ( 'md5' ). echo () Furthermore, functions that begin in a type can be referenced without it, for example, when calling the format function with the first argument being a string, the language infers that actually the string_format function should be used. echo ( string_format ( 'hello %s' , 'world' )) // hello world 'hello %s' . format ( 'world' ). echo () // hello world Read more about functions in the reference . Custom functions \u00b6 Define your own functions like this: function sub ( a , b ) { return a - b ; } Read more about functions in the reference . Debugging and output \u00b6 echo(... string string) \u00b6 Adds string to script debug output. dd(... any value) \u00b6 Stops Custom Action execution and adds value to script debug output. dump(... any value) \u00b6 Adds value as a decoded string to script debug output. Types \u00b6 type( any value) : string \u00b6 Returns the type name of a value, e.g. \"string\" .","title":"General"},{"location":"webhookscript/functions/general.html#about-functions","text":"These are the functions that can be used in your script, and includes various utility functions and functions to interact with your Webhook.site URL.","title":"About Functions"},{"location":"webhookscript/functions/general.html#chaining","text":"Functions can be chained directly to a primitive (strings, numbers, arrays). These two statements are equivalent: 'Hello World' . echo () echo ( 'Hello World' ) They can even be chained, for example: 'Hello World' . hash ( 'md5' ). echo () Furthermore, functions that begin in a type can be referenced without it, for example, when calling the format function with the first argument being a string, the language infers that actually the string_format function should be used. echo ( string_format ( 'hello %s' , 'world' )) // hello world 'hello %s' . format ( 'world' ). echo () // hello world Read more about functions in the reference .","title":"Chaining"},{"location":"webhookscript/functions/general.html#custom-functions","text":"Define your own functions like this: function sub ( a , b ) { return a - b ; } Read more about functions in the reference .","title":"Custom functions"},{"location":"webhookscript/functions/general.html#debugging-and-output","text":"","title":"Debugging and output"},{"location":"webhookscript/functions/general.html#echostring-string","text":"Adds string to script debug output.","title":"echo(...string string)"},{"location":"webhookscript/functions/general.html#ddany-value","text":"Stops Custom Action execution and adds value to script debug output.","title":"dd(...any value)"},{"location":"webhookscript/functions/general.html#dumpany-value","text":"Adds value as a decoded string to script debug output.","title":"dump(...any value)"},{"location":"webhookscript/functions/general.html#types","text":"","title":"Types"},{"location":"webhookscript/functions/general.html#typeany-value-string","text":"Returns the type name of a value, e.g. \"string\" .","title":"type(any value) : string"},{"location":"webhookscript/functions/math.html","text":"Math and Numbers \u00b6 abs( number number) : number \u00b6 atan( number number) : number \u00b6 ceil( number number) : number \u00b6 cos( number number) : number \u00b6 floor( number number) : number \u00b6 is_numeric( any value) : bool \u00b6 Returns true if value is numeric. Examples: 12345 returns true . \"1.0\" returns true . null returns false . max( array numbers) : number \u00b6 min( array numbers) : number \u00b6 mod( number number, number divisor) : number \u00b6 Returns the remainder after number is divided by divisor . number_length( number number) : number \u00b6 num2hex( number number) : string \u00b6 hex2num( string hex_string) : number \u00b6 hex2bin( string hex_string) : ?string \u00b6 pi() : number \u00b6 Returns the value of Pi. pow( number number, number power) : number \u00b6 rand( number min, number max) : number \u00b6 Returns a random number between min and max . round( number number, number precision) : number \u00b6 sin( number number) : number \u00b6 sqrt( number number) : number \u00b6 tan( number number) : number \u00b6 to_number( any value) : number \u00b6","title":"Math and Numbers"},{"location":"webhookscript/functions/math.html#math-and-numbers","text":"","title":"Math and Numbers"},{"location":"webhookscript/functions/math.html#absnumber-number-number","text":"","title":"abs(number number) : number"},{"location":"webhookscript/functions/math.html#atannumber-number-number","text":"","title":"atan(number number) : number"},{"location":"webhookscript/functions/math.html#ceilnumber-number-number","text":"","title":"ceil(number number) : number"},{"location":"webhookscript/functions/math.html#cosnumber-number-number","text":"","title":"cos(number number) : number"},{"location":"webhookscript/functions/math.html#floornumber-number-number","text":"","title":"floor(number number) : number"},{"location":"webhookscript/functions/math.html#is_numericany-value-bool","text":"Returns true if value is numeric. Examples: 12345 returns true . \"1.0\" returns true . null returns false .","title":"is_numeric(any value) : bool"},{"location":"webhookscript/functions/math.html#maxarray-numbers-number","text":"","title":"max(array numbers) : number"},{"location":"webhookscript/functions/math.html#minarray-numbers-number","text":"","title":"min(array numbers) : number"},{"location":"webhookscript/functions/math.html#modnumber-number-number-divisor-number","text":"Returns the remainder after number is divided by divisor .","title":"mod(number number, number divisor) : number"},{"location":"webhookscript/functions/math.html#number_lengthnumber-number-number","text":"","title":"number_length(number number) : number"},{"location":"webhookscript/functions/math.html#num2hexnumber-number-string","text":"","title":"num2hex(number number) : string"},{"location":"webhookscript/functions/math.html#hex2numstring-hex_string-number","text":"","title":"hex2num(string hex_string) : number"},{"location":"webhookscript/functions/math.html#hex2binstring-hex_string-string","text":"","title":"hex2bin(string hex_string) : ?string"},{"location":"webhookscript/functions/math.html#pi-number","text":"Returns the value of Pi.","title":"pi() : number"},{"location":"webhookscript/functions/math.html#pownumber-number-number-power-number","text":"","title":"pow(number number, number power) : number"},{"location":"webhookscript/functions/math.html#randnumber-min-number-max-number","text":"Returns a random number between min and max .","title":"rand(number min, number max) : number"},{"location":"webhookscript/functions/math.html#roundnumber-number-number-precision-number","text":"","title":"round(number number, number precision) : number"},{"location":"webhookscript/functions/math.html#sinnumber-number-number","text":"","title":"sin(number number) : number"},{"location":"webhookscript/functions/math.html#sqrtnumber-number-number","text":"","title":"sqrt(number number) : number"},{"location":"webhookscript/functions/math.html#tannumber-number-number","text":"","title":"tan(number number) : number"},{"location":"webhookscript/functions/math.html#to_numberany-value-number","text":"","title":"to_number(any value) : number"},{"location":"webhookscript/functions/network.html","text":"HTTP \u00b6 query( array form_values) : string \u00b6 Converts an associative array into a form-style string, used for e.g. application/x-www-form-urlencoded requests or HTTP query strings. query ([ 'country' : 'Cura\u00e7ao' , 'population' : 158665 ]) // country=Cura%C3%A7ao&population=158665 request( string url, string body, string method = 'GET', array headers, bool override = false, timeout = 10) : array \u00b6 Sends a HTTP request and returns an array with the following keys containing response data: content (contains a cURL error message in case of an error) status ( null in case of an error) headers url The headers should be an array of strings, for example: [ 'Content-Type: application/json' , 'Accept: application/json, text/plain, */*' ] To get a JSON document, validate if valid JSON, and get a property: response = request ( 'https://example.com' ) decoded = json_decode ( response [ 'content' ]) if ( decoded ) { value = decoded [ 'value' ] } If override is set to true, none of the content from the original request is included (e.g. query strings, headers, content.) url_decode( string value) : string \u00b6 Returns an URL-decoded version of value . url_encode( string value) : string \u00b6 Returns an URL-encoded version of value . url_encode ( 'here\\'s a value' ) // here%27s+a+value","title":"Network and HTTP"},{"location":"webhookscript/functions/network.html#http","text":"","title":"HTTP"},{"location":"webhookscript/functions/network.html#queryarray-form_values-string","text":"Converts an associative array into a form-style string, used for e.g. application/x-www-form-urlencoded requests or HTTP query strings. query ([ 'country' : 'Cura\u00e7ao' , 'population' : 158665 ]) // country=Cura%C3%A7ao&population=158665","title":"query(array form_values) : string"},{"location":"webhookscript/functions/network.html#requeststring-url-string-body-string-method-get-array-headers-bool-override-false-timeout-10-array","text":"Sends a HTTP request and returns an array with the following keys containing response data: content (contains a cURL error message in case of an error) status ( null in case of an error) headers url The headers should be an array of strings, for example: [ 'Content-Type: application/json' , 'Accept: application/json, text/plain, */*' ] To get a JSON document, validate if valid JSON, and get a property: response = request ( 'https://example.com' ) decoded = json_decode ( response [ 'content' ]) if ( decoded ) { value = decoded [ 'value' ] } If override is set to true, none of the content from the original request is included (e.g. query strings, headers, content.)","title":"request(string url, string body, string method = 'GET', array headers, bool override = false, timeout = 10) : array"},{"location":"webhookscript/functions/network.html#url_decodestring-value-string","text":"Returns an URL-decoded version of value .","title":"url_decode(string value) : string"},{"location":"webhookscript/functions/network.html#url_encodestring-value-string","text":"Returns an URL-encoded version of value . url_encode ( 'here\\'s a value' ) // here%27s+a+value","title":"url_encode(string value) : string"},{"location":"webhookscript/functions/string.html","text":"General string functions \u00b6 string_contains( string subject, number/string/regex value) : bool \u00b6 Returns boolean if subject contains value string_find_first( string subject, number/string value) : number \u00b6 Returns position of value in subject , or false if not found string_find_last( string subject, number/string value) : number \u00b6 Returns position of value in subject , or false if not found string_format( string formatString, ... any items) : string \u00b6 Sprintf-like formatting of formatString with items , see PHP sprintf docs. string_join( string subject, array items (number/string/bool/array)) : string \u00b6 Joins items with string subject string_length( string string) : number \u00b6 Returns length of string (multibyte-aware) string_lower( string string) : string \u00b6 Converts string to lowercase (multibyte-aware) string_number_of( string string) : number \u00b6 Returns number value of string string_replace( string subject, string search, string replace) : string \u00b6 Replaces string search with replace found in subject . string_reverse( string subject) : string \u00b6 Reverses string subject string_slice( string subject, number from, number to = null) : string \u00b6 Extracts a segment of a string. Multibyte-aware. string_slice('hello world', 0, 5) returns hello . string_slice('hello world', 6) returns world . string_shuffle( string string) : string \u00b6 Returns string where the individual characters has been shuffled. string_split( string subject, string/regex delimiter) : array \u00b6 Returns array of split string subject with delimiter string_title( string string) : string \u00b6 Returns string converted to title case . string_title('hello world') returns Hello World . string_upper( string string) : string \u00b6 Converts string to UPPERCASE (multibyte-aware). to_regex( string regex) : regex \u00b6 Converts a regex string to a regex type to_string( string/number/bool value) : string \u00b6 Returns value as string trim( string string): string \u00b6 Returns string with space, tab and newline characters removed from the beginning and end of the string. CSV \u00b6 csv_to_array( string content, string delimiter, ?int header_offset, string enclosure, string escape) : array \u00b6 Takes a CSV string and outputs to an array, with each row being an item in the array. content should be a string containing the CSV document. delimiter will explicitly set the CSV delimiter the parser will attempt to use (e.g. ; ). Must be a single character. Defaults to , (comma.) header_offset , when specified, causes the output array item's keys to be set to the header values. Setting to 0 will mark the first row as the header row. enclosure sets the field enclosure character. Must be a single character. Defaults to \" (double quote.) escape sets the field escape character. Must be a single character. Defaults to \\ (backslash.) csv_content = 'firstname,lastname,title \"M. J.\",Plumley,\"Sr. Developer\" Emily,\"Jenna Platt\",\"Chief Information Officer\"' array = csv_to_array ( csv_content , ',' , 0 ) echo ( json_encode ( array )) // [ // { // \"firstname\": \"John\", // \"lastname\": \"Doe\", // \"title\": \"Sr. Developer\" // }, // { // \"firstname\": \"Emily\", // \"lastname\": \"Jenna Platt\", // \"title\": \"Chief Information Officer\" // } // ] Base64 \u00b6 base64_decode( string string) : string \u00b6 Returns a base64-encoded string. base64_encode( string string) : string \u00b6 Returns decoded base64 string. Hashing \u00b6 hash( string/number value, string algo) : string \u00b6 Returns a hashed version of value using the algo algorithm. 'hello world'.hash('md5') // 5eb63bbbe01eeed093cb22bb8f5acdc3 The following built-in algorithms are available: md2 , md4 , md5 , sha1 , sha224 , sha256 , sha384 , sha512/224 , sha512/256 , sha512 , sha3-224 , sha3-256 , sha3-384 , sha3-512 , ripemd128 , ripemd160 , ripemd256 , ripemd320 , whirlpool , tiger128,3 , tiger160,3 , tiger192,3 , tiger128,4 , tiger160,4 , tiger192,4 , snefru , snefru256 , gost , gost-crypto , adler32 , crc32 , crc32b , fnv132 , fnv1a32 , fnv164 , fnv1a64 , joaat , haval128,3 , haval160,3 , haval192,3 , haval224,3 , haval256,3 , haval128,4 , haval160,4 , haval192,4 , haval224,4 , haval256,4 , haval128,5 , haval160,5 , haval192,5 , haval224,5 , haval256,5 . hmac( string value, string algo, string secret) : string/false \u00b6 Returns the hexadecimal hash if the authentication succeeds, and false if it doesn't. For a list of possible values for algo , see hash() above. HTML and Markdown \u00b6 html_strip_tags( string string) : string \u00b6 Returns a string with all HTML tags removed. html_strip_tags('<b>test</b>') returns test . html_to_text( string string) : string \u00b6 Converts HTML to plaintext. A more aggressive version of html_strip_tags . html_to_text('<b>test</b>') returns test . html_decode( string string) : string \u00b6 Decodes all HTML entities (for example, &nbsp; ) to normal characters. html_encode( string string) : string \u00b6 Replaces characters in a string with HTML encoded versions. markdown_to_html( string string, bool safe_mode = false) : string \u00b6 Converts a Markdown string to HTML. markdown_to_html('# Hello world') returns <h1>Hello world</h1> . If safe_mode is set to true, characters like < , > are HTML-entity encoded. JSON \u00b6 json_decode( string json) : array \u00b6 Decodes json and returns an array. array = json_decode ( var ( 'request.content' )) json_encode( array array) : string \u00b6 Takes an array and encodes it as a JSON string. json_path( string json, string jsonpath, bool return_first = true) : string \u00b6 Returns the result of a json string parsed using the JSONPath functionality. Per default, if there's just one match (e.g. if matching on a property value that's a string), this value is returned. To always return an array, set return_first to false. dump ( json_path ( '{\"v\": []}' , 'v[*]' , false )) dump ( json_path ( '{\"v\": []}' , 'v[*]' )) // [] // \"\" dump ( json_path ( '{\"v\": [\"item1\"]}' , 'v[*]' , false )) dump ( json_path ( '{\"v\": [\"item1\"]}' , 'v[*]' )) // [0: \"item1\"] // \"item1\" dump ( json_path ( '{\"v\": [\"item1\", \"item2\"]}' , 'v[*]' , false )) dump ( json_path ( '{\"v\": [\"item1\", \"item2\"]}' , 'v[*]' )) // [0: \"item1\", 1: \"item2\"] // [0: \"item1\", 1: \"item2\"] json_escape( string json) : string \u00b6 JSON-escapes all special JSON characters like double quotes, newlines, etc. Regex \u00b6 preg_match( string regex, string subject) : array/false \u00b6 Returns the matching values as an array, or false if the regex did not match. Supports regex pattern modifiers . // Returns anything enclosed within <html> tags in a string html = preg_match ( '/<html>(.*)<\\\\/html>/s' , content ) regex_extract( regex regex, string subject) : array/false \u00b6 Returns the matching string and all match groups as an array, and false on failure. input = \"You're a good bot\" output = regex_extract ( r \"You're (\\w) (.*)\" , input ) dump ( output ) // [0: \"You're a good bot\", 1: \"a\", 2: \"good bot\"] regex_extract_first( regex regex, string subject, any default) : string/false \u00b6 Returns the first match group of a regex, and false (or default , if set) on failure. input = \"You're a good bot\" output = regex_extract ( r \"You're (.*)\" , input ) dump ( output ) // \"a good bot\" input = \"Hello world\" output = regex_extract ( r \"You're (.*)\" , input , 'no value' ) dump ( output ) // \"no value\" regex_match( regex regex, string subject) : string/false \u00b6 Returns the first matching string, otherwise false. input = \"You're a good bot\" output = regex_match ( r \"You're .*\" , input ) dump ( output ) // \"You're a good bot\" regex_to_string( regex regex) : string \u00b6 Returns the regex converted to a string XML XPath \u00b6 xpath( string xpath, string input): string/null \u00b6 Returns the first result of an XPath query on XML document input . Given a request with the following content: <?xml version=\"1.0\"?> <organization name=\"ExampleCo\"> <employees> <employee id=\"1\">Jack</employee> <employee id=\"2\">Ann</employee> </employees> </organization> xpath(var('$request.content$'), '//employee[1]') // returns \"Jack\" var('$request.content$').xpath('//employee[1]') // returns \"Jack\" More information and examples regarding XPath . xpath_all( string xpath, string input): string/null \u00b6 Returns the results of an XPath query on XML document input as an array. Given a request with the following content: <?xml version=\"1.0\"?> <organization name=\"ExampleCo\"> <employees> <employee id=\"1\">Jack</employee> <employee id=\"2\">Ann</employee> </employees> </organization> xpath_all(var('$request.content$'), '//employee]') // returns [0: \"Jack\", 1: \"Ann\"] var('$request.content$').xpath('//employee') // returns [0: \"Jack\", 1: \"Ann\"] More information and examples regarding XPath . Special string functions \u00b6 convert_kana( string , mode ) : string \u00b6 Performs a \"han-kaku\" - \"zen-kaku\" conversion for string string. This function is only useful for Japanese. See here for more info.","title":"Strings"},{"location":"webhookscript/functions/string.html#general-string-functions","text":"","title":"General string functions"},{"location":"webhookscript/functions/string.html#string_containsstring-subject-numberstringregex-value-bool","text":"Returns boolean if subject contains value","title":"string_contains(string subject, number/string/regex value) : bool"},{"location":"webhookscript/functions/string.html#string_find_firststring-subject-numberstring-value-number","text":"Returns position of value in subject , or false if not found","title":"string_find_first(string subject, number/string value) : number"},{"location":"webhookscript/functions/string.html#string_find_laststring-subject-numberstring-value-number","text":"Returns position of value in subject , or false if not found","title":"string_find_last(string subject, number/string value) : number"},{"location":"webhookscript/functions/string.html#string_formatstring-formatstring-any-items-string","text":"Sprintf-like formatting of formatString with items , see PHP sprintf docs.","title":"string_format(string formatString, ...any items) : string"},{"location":"webhookscript/functions/string.html#string_joinstring-subject-array-items-numberstringboolarray-string","text":"Joins items with string subject","title":"string_join(string subject, array items (number/string/bool/array)) : string"},{"location":"webhookscript/functions/string.html#string_lengthstring-string-number","text":"Returns length of string (multibyte-aware)","title":"string_length(string string) : number"},{"location":"webhookscript/functions/string.html#string_lowerstring-string-string","text":"Converts string to lowercase (multibyte-aware)","title":"string_lower(string string) : string"},{"location":"webhookscript/functions/string.html#string_number_ofstring-string-number","text":"Returns number value of string","title":"string_number_of(string string) : number"},{"location":"webhookscript/functions/string.html#string_replacestring-subject-string-search-string-replace-string","text":"Replaces string search with replace found in subject .","title":"string_replace(string subject, string search, string replace) : string"},{"location":"webhookscript/functions/string.html#string_reversestring-subject-string","text":"Reverses string subject","title":"string_reverse(string subject) : string"},{"location":"webhookscript/functions/string.html#string_slicestring-subject-number-from-number-to-null-string","text":"Extracts a segment of a string. Multibyte-aware. string_slice('hello world', 0, 5) returns hello . string_slice('hello world', 6) returns world .","title":"string_slice(string subject, number from, number to = null) : string"},{"location":"webhookscript/functions/string.html#string_shufflestring-string-string","text":"Returns string where the individual characters has been shuffled.","title":"string_shuffle(string string) : string"},{"location":"webhookscript/functions/string.html#string_splitstring-subject-stringregex-delimiter-array","text":"Returns array of split string subject with delimiter","title":"string_split(string subject, string/regex delimiter) : array"},{"location":"webhookscript/functions/string.html#string_titlestring-string-string","text":"Returns string converted to title case . string_title('hello world') returns Hello World .","title":"string_title(string string) : string"},{"location":"webhookscript/functions/string.html#string_upperstring-string-string","text":"Converts string to UPPERCASE (multibyte-aware).","title":"string_upper(string string) : string"},{"location":"webhookscript/functions/string.html#to_regexstring-regex-regex","text":"Converts a regex string to a regex type","title":"to_regex(string regex) : regex"},{"location":"webhookscript/functions/string.html#to_stringstringnumberbool-value-string","text":"Returns value as string","title":"to_string(string/number/bool value) : string"},{"location":"webhookscript/functions/string.html#trimstring-string-string","text":"Returns string with space, tab and newline characters removed from the beginning and end of the string.","title":"trim(string string): string"},{"location":"webhookscript/functions/string.html#csv","text":"","title":"CSV"},{"location":"webhookscript/functions/string.html#csv_to_arraystring-content-string-delimiter-int-header_offset-string-enclosure-string-escape-array","text":"Takes a CSV string and outputs to an array, with each row being an item in the array. content should be a string containing the CSV document. delimiter will explicitly set the CSV delimiter the parser will attempt to use (e.g. ; ). Must be a single character. Defaults to , (comma.) header_offset , when specified, causes the output array item's keys to be set to the header values. Setting to 0 will mark the first row as the header row. enclosure sets the field enclosure character. Must be a single character. Defaults to \" (double quote.) escape sets the field escape character. Must be a single character. Defaults to \\ (backslash.) csv_content = 'firstname,lastname,title \"M. J.\",Plumley,\"Sr. Developer\" Emily,\"Jenna Platt\",\"Chief Information Officer\"' array = csv_to_array ( csv_content , ',' , 0 ) echo ( json_encode ( array )) // [ // { // \"firstname\": \"John\", // \"lastname\": \"Doe\", // \"title\": \"Sr. Developer\" // }, // { // \"firstname\": \"Emily\", // \"lastname\": \"Jenna Platt\", // \"title\": \"Chief Information Officer\" // } // ]","title":"csv_to_array(string content, string delimiter, ?int header_offset, string enclosure, string escape) : array"},{"location":"webhookscript/functions/string.html#base64","text":"","title":"Base64"},{"location":"webhookscript/functions/string.html#base64_decodestring-string-string","text":"Returns a base64-encoded string.","title":"base64_decode(string string) : string"},{"location":"webhookscript/functions/string.html#base64_encodestring-string-string","text":"Returns decoded base64 string.","title":"base64_encode(string string) : string"},{"location":"webhookscript/functions/string.html#hashing","text":"","title":"Hashing"},{"location":"webhookscript/functions/string.html#hashstringnumber-value-string-algo-string","text":"Returns a hashed version of value using the algo algorithm. 'hello world'.hash('md5') // 5eb63bbbe01eeed093cb22bb8f5acdc3 The following built-in algorithms are available: md2 , md4 , md5 , sha1 , sha224 , sha256 , sha384 , sha512/224 , sha512/256 , sha512 , sha3-224 , sha3-256 , sha3-384 , sha3-512 , ripemd128 , ripemd160 , ripemd256 , ripemd320 , whirlpool , tiger128,3 , tiger160,3 , tiger192,3 , tiger128,4 , tiger160,4 , tiger192,4 , snefru , snefru256 , gost , gost-crypto , adler32 , crc32 , crc32b , fnv132 , fnv1a32 , fnv164 , fnv1a64 , joaat , haval128,3 , haval160,3 , haval192,3 , haval224,3 , haval256,3 , haval128,4 , haval160,4 , haval192,4 , haval224,4 , haval256,4 , haval128,5 , haval160,5 , haval192,5 , haval224,5 , haval256,5 .","title":"hash(string/number value, string algo) : string"},{"location":"webhookscript/functions/string.html#hmacstring-value-string-algo-string-secret-stringfalse","text":"Returns the hexadecimal hash if the authentication succeeds, and false if it doesn't. For a list of possible values for algo , see hash() above.","title":"hmac(string value, string algo, string secret) : string/false"},{"location":"webhookscript/functions/string.html#html-and-markdown","text":"","title":"HTML and Markdown"},{"location":"webhookscript/functions/string.html#html_strip_tagsstring-string-string","text":"Returns a string with all HTML tags removed. html_strip_tags('<b>test</b>') returns test .","title":"html_strip_tags(string string) : string"},{"location":"webhookscript/functions/string.html#html_to_textstring-string-string","text":"Converts HTML to plaintext. A more aggressive version of html_strip_tags . html_to_text('<b>test</b>') returns test .","title":"html_to_text(string string) : string"},{"location":"webhookscript/functions/string.html#html_decodestring-string-string","text":"Decodes all HTML entities (for example, &nbsp; ) to normal characters.","title":"html_decode(string string) : string"},{"location":"webhookscript/functions/string.html#html_encodestring-string-string","text":"Replaces characters in a string with HTML encoded versions.","title":"html_encode(string string) : string"},{"location":"webhookscript/functions/string.html#markdown_to_htmlstring-string-bool-safe_mode-false-string","text":"Converts a Markdown string to HTML. markdown_to_html('# Hello world') returns <h1>Hello world</h1> . If safe_mode is set to true, characters like < , > are HTML-entity encoded.","title":"markdown_to_html(string string, bool safe_mode = false) : string"},{"location":"webhookscript/functions/string.html#json","text":"","title":"JSON"},{"location":"webhookscript/functions/string.html#json_decodestring-json-array","text":"Decodes json and returns an array. array = json_decode ( var ( 'request.content' ))","title":"json_decode(string json) : array"},{"location":"webhookscript/functions/string.html#json_encodearray-array-string","text":"Takes an array and encodes it as a JSON string.","title":"json_encode(array array) : string"},{"location":"webhookscript/functions/string.html#json_pathstring-json-string-jsonpath-bool-return_first-true-string","text":"Returns the result of a json string parsed using the JSONPath functionality. Per default, if there's just one match (e.g. if matching on a property value that's a string), this value is returned. To always return an array, set return_first to false. dump ( json_path ( '{\"v\": []}' , 'v[*]' , false )) dump ( json_path ( '{\"v\": []}' , 'v[*]' )) // [] // \"\" dump ( json_path ( '{\"v\": [\"item1\"]}' , 'v[*]' , false )) dump ( json_path ( '{\"v\": [\"item1\"]}' , 'v[*]' )) // [0: \"item1\"] // \"item1\" dump ( json_path ( '{\"v\": [\"item1\", \"item2\"]}' , 'v[*]' , false )) dump ( json_path ( '{\"v\": [\"item1\", \"item2\"]}' , 'v[*]' )) // [0: \"item1\", 1: \"item2\"] // [0: \"item1\", 1: \"item2\"]","title":"json_path(string json, string jsonpath, bool return_first = true) : string"},{"location":"webhookscript/functions/string.html#json_escapestring-json-string","text":"JSON-escapes all special JSON characters like double quotes, newlines, etc.","title":"json_escape(string json) : string"},{"location":"webhookscript/functions/string.html#regex","text":"","title":"Regex"},{"location":"webhookscript/functions/string.html#preg_matchstring-regex-string-subject-arrayfalse","text":"Returns the matching values as an array, or false if the regex did not match. Supports regex pattern modifiers . // Returns anything enclosed within <html> tags in a string html = preg_match ( '/<html>(.*)<\\\\/html>/s' , content )","title":"preg_match(string regex, string subject) : array/false"},{"location":"webhookscript/functions/string.html#regex_extractregex-regex-string-subject-arrayfalse","text":"Returns the matching string and all match groups as an array, and false on failure. input = \"You're a good bot\" output = regex_extract ( r \"You're (\\w) (.*)\" , input ) dump ( output ) // [0: \"You're a good bot\", 1: \"a\", 2: \"good bot\"]","title":"regex_extract(regex regex, string subject) : array/false"},{"location":"webhookscript/functions/string.html#regex_extract_firstregex-regex-string-subject-any-default-stringfalse","text":"Returns the first match group of a regex, and false (or default , if set) on failure. input = \"You're a good bot\" output = regex_extract ( r \"You're (.*)\" , input ) dump ( output ) // \"a good bot\" input = \"Hello world\" output = regex_extract ( r \"You're (.*)\" , input , 'no value' ) dump ( output ) // \"no value\"","title":"regex_extract_first(regex regex, string subject, any default) : string/false"},{"location":"webhookscript/functions/string.html#regex_matchregex-regex-string-subject-stringfalse","text":"Returns the first matching string, otherwise false. input = \"You're a good bot\" output = regex_match ( r \"You're .*\" , input ) dump ( output ) // \"You're a good bot\"","title":"regex_match(regex regex, string subject) : string/false"},{"location":"webhookscript/functions/string.html#regex_to_stringregex-regex-string","text":"Returns the regex converted to a string","title":"regex_to_string(regex regex) : string"},{"location":"webhookscript/functions/string.html#xml-xpath","text":"","title":"XML XPath"},{"location":"webhookscript/functions/string.html#xpathstring-xpath-string-input-stringnull","text":"Returns the first result of an XPath query on XML document input . Given a request with the following content: <?xml version=\"1.0\"?> <organization name=\"ExampleCo\"> <employees> <employee id=\"1\">Jack</employee> <employee id=\"2\">Ann</employee> </employees> </organization> xpath(var('$request.content$'), '//employee[1]') // returns \"Jack\" var('$request.content$').xpath('//employee[1]') // returns \"Jack\" More information and examples regarding XPath .","title":"xpath(string xpath, string input): string/null"},{"location":"webhookscript/functions/string.html#xpath_allstring-xpath-string-input-stringnull","text":"Returns the results of an XPath query on XML document input as an array. Given a request with the following content: <?xml version=\"1.0\"?> <organization name=\"ExampleCo\"> <employees> <employee id=\"1\">Jack</employee> <employee id=\"2\">Ann</employee> </employees> </organization> xpath_all(var('$request.content$'), '//employee]') // returns [0: \"Jack\", 1: \"Ann\"] var('$request.content$').xpath('//employee') // returns [0: \"Jack\", 1: \"Ann\"] More information and examples regarding XPath .","title":"xpath_all(string xpath, string input): string/null"},{"location":"webhookscript/functions/string.html#special-string-functions","text":"","title":"Special string functions"},{"location":"webhookscript/functions/string.html#convert_kanastring-mode-string","text":"Performs a \"han-kaku\" - \"zen-kaku\" conversion for string string. This function is only useful for Japanese. See here for more info.","title":"convert_kana(string, mode) : string"},{"location":"webhookscript/functions/variables.html","text":"These functions lets you interface with other Custom Actions by getting and setting variables from them. These functions are also how you retrieve Global Variables defined in the Control Panel. var( string variable_name, ?string/number default) : mixed \u00b6 Retrieves the value of a Variable or Global Variable (defined in the Control Panel). The surrounding dollar signs are not mandatory. Returns null (or the value of default ) if the variable does not exist. var ( 'request.header.x-request-verification' ) // returns value of the `x-request-verification` header set( string variable_name, string variable_value) \u00b6 Exports a Variable for use in downstream actions, like the Set Runtime Variable action. For example, the following code: set ( 'myvar' , 'Hello world' ) Would cause the string $myvar$ to be replaced with Hello world in all subsequent actions. store( string global_variable_name, any value): any \u00b6 Permanently creates or updates a Global Variable (as defined in Control Panel.) The value can also be retrieved with the var() function in subsequent action executions. variables : array \u00b6 A variable (not a function) containing an associative array with all available Webhook.site variables. user_agent = variables [ 'request.header.user-agent' ]","title":"Custom Action Variables"},{"location":"webhookscript/functions/variables.html#varstring-variable_name-stringnumber-default-mixed","text":"Retrieves the value of a Variable or Global Variable (defined in the Control Panel). The surrounding dollar signs are not mandatory. Returns null (or the value of default ) if the variable does not exist. var ( 'request.header.x-request-verification' ) // returns value of the `x-request-verification` header","title":"var(string variable_name, ?string/number default) : mixed"},{"location":"webhookscript/functions/variables.html#setstring-variable_name-string-variable_value","text":"Exports a Variable for use in downstream actions, like the Set Runtime Variable action. For example, the following code: set ( 'myvar' , 'Hello world' ) Would cause the string $myvar$ to be replaced with Hello world in all subsequent actions.","title":"set(string variable_name, string variable_value)"},{"location":"webhookscript/functions/variables.html#storestring-global_variable_name-any-value-any","text":"Permanently creates or updates a Global Variable (as defined in Control Panel.) The value can also be retrieved with the var() function in subsequent action executions.","title":"store(string global_variable_name, any value): any"},{"location":"webhookscript/functions/variables.html#variables-array","text":"A variable (not a function) containing an associative array with all available Webhook.site variables. user_agent = variables [ 'request.header.user-agent' ]","title":"variables : array"}]}